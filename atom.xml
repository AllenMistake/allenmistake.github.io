<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AllenMistake的小屋</title>
  
  <subtitle>The world changed so fast，Update everyday！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.allenmistake.top/"/>
  <updated>2024-06-15T04:25:06.774Z</updated>
  <id>http://www.allenmistake.top/</id>
  
  <author>
    <name>weitanori</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>欢迎来到泰兰德</title>
    <link href="http://www.allenmistake.top/2024/06/15/WelcomeToThailand/"/>
    <id>http://www.allenmistake.top/2024/06/15/WelcomeToThailand/</id>
    <published>2024-06-15T03:55:21.000Z</published>
    <updated>2024-06-15T04:25:06.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="突如其来的出差"><a href="#突如其来的出差" class="headerlink" title="突如其来的出差"></a>突如其来的出差</h2><p>突然一下子接到通知，端午节过后就要来泰国出差了，起初知道这个事情的时候还是激动大于忐忑，但是经过一段时间（其实并不允许有太多时间去反应就是了）思考，思绪还是比较复杂的，毕竟要在泰国待很久，自己要去的地方又不是曼谷这种大城市，会有诸多的不适应。不过也还好，对于已经习惯出差的我来说，泰国也许就是到了一个很南方的地方，周围的同事都讲中文，除了工作上有新的任务需要熟悉之外，基本上没有什么太大差别，不过如果试图去接触外界，那恐怕是很难的，在泰国生活，特别是在泰国不是很发达的小城市生活，需要克服的苦难还是比较多的</p><p>首先来讲，一个foreigner，在国外难过的一关就是语言关，泰语终归来说还算小众，不过这边很多人还是会讲英语的，可惜我的英文水平也不高，只能一个单词一个单词的往外蹦，想要练成句子的话要很费劲，对于我和听的人都是一种折磨。我尝试去视频网站学习泰语，知道泰语有五个声调，在听到这五个声调的区别后，我毫不犹豫的放弃了，后来转变了一下思路，要不就干脆学习泰文吧，看了看视频教学，觉得上手也还是难了一些，也放弃了。</p><p>最终还是决定少和外界沟通。</p><p>语言不通带来的影响远比我想象的大，这里商品是泰文，路标是泰文，就连涂鸦也是泰文。这时候发现其实身处国外比自己想的要更艰难一些。由此带来的第二个困难就是孤独感，陌生的街道，陌生的人，陌生的动物，都仿佛在你周遭扣了一个无形的罩子，这个罩子让你感到喘不上气，在国内，总看见说每个人都是一座孤岛，但我想，在国外这种环境下才算是真的孤岛，孤独感如同洪水猛兽般袭来的时候，想起来王建国的那期去聊孤独</p><p><strong>“因为孤独是我在这个世界上最爱的东西，也是唯一爱的东西”</strong></p><p>孤独分为绝对孤独和屈从性孤独，还有认知障碍性孤独和主观迷幻性孤独。我想我大概是属于屈从性孤独吧，不属于王建国爱的那一种孤独，亦或者是很多种孤独叠加在一起？</p><p>说了半天差点聊跑题，第三个就是泰国实在是太潮湿了，作为热带国家，日晒+湿气使得你在这边稍微运动量大一些就会出一脑门+一后背的汗，及时补充水分盐分成了必修课，并且一些补水晒后修复的洗护产品也变得尤为关键，Lotus超市速度安排上。</p><h2 id="与泰兰德的邂逅"><a href="#与泰兰德的邂逅" class="headerlink" title="与泰兰德的邂逅"></a>与泰兰德的邂逅</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="http://www.allenmistake.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="碎碎念" scheme="http://www.allenmistake.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>marryChristmas</title>
    <link href="http://www.allenmistake.top/2022/12/24/marryChristmas/"/>
    <id>http://www.allenmistake.top/2022/12/24/marryChristmas/</id>
    <published>2022-12-24T13:15:09.000Z</published>
    <updated>2022-12-24T12:29:20.753Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="“The-Cake-is-A-Lie”"><a href="#“The-Cake-is-A-Lie”" class="headerlink" title="“The Cake is A Lie”"></a>“The Cake is A Lie”</h2><p>不知道怎么，突然想到了这一句著名台词，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>哈喽啊，我回来了</title>
    <link href="http://www.allenmistake.top/2022/09/08/HelloMyNameIsZhang/"/>
    <id>http://www.allenmistake.top/2022/09/08/HelloMyNameIsZhang/</id>
    <published>2022-09-08T04:24:54.000Z</published>
    <updated>2022-09-08T03:25:51.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#归来测试一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>小张回家了（假装很高兴）</title>
    <link href="http://www.allenmistake.top/2021/01/31/BackHome/"/>
    <id>http://www.allenmistake.top/2021/01/31/BackHome/</id>
    <published>2021-01-31T10:30:06.000Z</published>
    <updated>2021-01-31T09:48:55.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="田园将芜胡不归"><a href="#田园将芜胡不归" class="headerlink" title="田园将芜胡不归"></a>田园将芜胡不归</h2><p>距离疫情爆发已经一年多的时间了，可是回家这件事情还是很难。</p><p>政策制定的都很人性了，其实还是不放心自己在家能不能把论文搞出来，今天特意来星巴克里面来找找学习的感觉，不得不说，我觉得除了家，任何一个有电源和暖气的地方都可以学习，没想到在这种嘈杂的环境中下还能投入</p><p>真是奇怪，卧室那么安静的地方学不下去，在嘈杂的咖啡馆里竟能码字神速。</p><p>之前在学校的时候一直纠结要不要回家，周围的小伙伴很多也选择了留校，毕竟研三了，论文高于一切。</p><p>大概是想换个环境吧，真不想在学校待了，压力有些大。</p><h2 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h2><p>其实，在我的潜意识里，一定是害怕过年的，过年意味着各种问候，各种聚会。对于我这种喜欢远离喧嚣的人来说，是极其排斥这种感觉的，我的理想状态是一个很隔绝的状态，这样才能静下来，去看看书也好，看看电影也好。</p><p>而且都已经回家了，必须为家里面贡献一些劳动力啊，北方的习俗还是很多的，又要贴各种福字吊钱，又要扫房。</p><p>给自己定个小目标吧，小年是哪天来着？控制好学习、娱乐之间的平衡吧</p><p>还有一本好不容易带回家的《日本史》，这个寒假不知道能不能读完</p>        <div id="aplayer-JmbGahIQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-JmbGahIQ"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "双门洞/惠化洞（口琴版）",              author: "Tenholes蓝调口琴/园园",              url: "双门洞.mp3",              pic: "/2021/01/31/BackHome/dong.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>告别意味着新的开始</title>
    <link href="http://www.allenmistake.top/2021/01/01/newYear2021/"/>
    <id>http://www.allenmistake.top/2021/01/01/newYear2021/</id>
    <published>2021-01-01T03:28:42.000Z</published>
    <updated>2021-01-31T09:49:00.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><p>很难描述我的2020年，因为疫情的原因发生了，上半年变得零零散散，感觉什么都干了， 比如学习做菜，开车上路… 可又感觉自己什么也没干，就好像一个人把屋子装饰的再怎么好，他还是没有走出那个屋子一样。 我以为自己改变了很多，但下半年告诉我，改变一个人确实是很难的。</p><p>其实对于跨年，我的感情一直是很淡的，从小对于元旦也只是一个不痛不痒的一天假，毕竟学生放完元旦还要上课。我是一个比较传统的人，一直觉得辞旧迎新是大年三十该干的，况且每年元旦都在外面，纵使周围花团锦簇，也觉得喧嚣而已。</p><p>但不管怎么说，2020年还是很值得我们去告别的，大家好像都对于2020有很多不好的记忆，我也是，但是不得不说，2020是一个特别的年份，发生了很多类似魔幻的时间，这让我感到一种新鲜感，也许是我记事之后经历的第一个不平凡的一年吧。</p><p>得了，说多了又陷入对过去的回顾。但今天还是多说说展望吧</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>今年对我来说大概终于能从学校里面走出去了吧，想想也觉得蛮恐慌，自己很多事情还没搞清楚，就要工作了。不求能完美应对接下来的每个问题，只希望在每次应对问题之后能更走向成熟吧，年年都追求成熟，但每年都感觉自己不够成熟</p><p>论文，专利的事情最近也是忙糟糟的，希望年后都能搞定，然后顺利毕业，这大概是我今年最大的愿望了</p><p>还有朋友问我找到了什么工作，首先感谢你对我博客的关注，这种自己慢慢耕种的土地突然来一位客人的感觉还不错，其次我没有回复你是因为最近事情比较多，而且工作的事情我也在纠结，也没法给出一个确定的答案，如果你想咨询什么问题可以在下面回复，我都能看见</p><p>计划什么的，每年的计划都写读完xx本书，太空了。作为一个年度希冀，更应该放眼于一片。最近的话对于历史和纪录片非常感兴趣，下载了《河西走廊》、还有各种美食纪录片，也买了关于日本的历史，特意买了纸质的书，我觉得对于历史类的书籍还是纸质书舒服，不是说能感受到历史的厚重之类的话，只是以后放在书架上会显得很有文化。</p><p>又扯远了，所以我的年度希冀就说这么几点吧</p><ul><li>了解更多的历史、人文，更为知识面更广的人</li><li>去大西北（至少去甘肃、青海）</li><li>录毕业Vlog</li><li>减少对于视频的依赖</li></ul><p>之前说减少对于游戏的依赖，我发现执行的挺成功，但是感觉由游戏转到视频上了，对于文字性的东西吸收的越来越浅，这样不好，太浮躁了，希望2021能沉下心来，用微单更好的捕捉生活美好吧</p><p>过年我想再写一篇，今天就先到这里吧，总之，2020，再见</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2021/01/01/newYear2021/bye.jpg" alt="goodbye" title>                </div>                <div class="image-caption">goodbye</div>            </figure>        <div id="aplayer-oCqyprHI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-oCqyprHI"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "我的姑娘 她在远方",              author: "隔壁老樊",              url: "我的姑娘.mp3",              pic: "/2021/01/01/newYear2021/head.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Wake Me Up When September Ends</title>
    <link href="http://www.allenmistake.top/2020/10/03/WakeMeUpWhenSepEnds/"/>
    <id>http://www.allenmistake.top/2020/10/03/WakeMeUpWhenSepEnds/</id>
    <published>2020-10-03T11:48:08.000Z</published>
    <updated>2021-01-01T03:07:17.890Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/10/03/WakeMeUpWhenSepEnds/fall.jpg" alt="Its" title="time">                </div>                <div class="image-caption">time</div>            </figure><p>一场秋雨一场凉，提醒大家注意天气变化，不要像我一样，闹完嗓子接着感冒。</p><h2 id="培养爱好"><a href="#培养爱好" class="headerlink" title="培养爱好"></a>培养爱好</h2><p>九月份找完工作就开始学习摄影了，可惜没有什么机会拍人像，只能拍一拍风景，其实关于拍照学习的东西还有很多，目前也只是简单的看了一下大概的摄像参数，之后的</p><ul><li>构图思路</li><li>不同情况下的参数调整（调光圈、快门、曝光）</li><li>后期的色调与主题的呼应</li></ul><p>都是需要去学习的，争取在过年前把这些系统学习一下，如果情况顺利的话我可能会把我的学习过程记录在这里。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/10/03/WakeMeUpWhenSepEnds/西安.jpg" alt="之前比较随笔拍的一张，仔细看图片还有点发虚" title>                </div>                <div class="image-caption">之前比较随笔拍的一张，仔细看图片还有点发虚</div>            </figure><h2 id="Wake-Me-Up"><a href="#Wake-Me-Up" class="headerlink" title="Wake Me Up"></a>Wake Me Up</h2><p>既然工作已经确定了，那剩下就要好好搞论文了~</p><p>争取在放假之前把论文前三章写出来，应该问题不大。</p><p>还是应该读书了，十月份至少读一本书吧，其实九月份看了《乌合之众》，但是并没有看完，这个前言实在是很劝退，但是我觉得分析得很中肯，其实《乌合之众》更像是一种观察报告，译者强调了一点，他无法对未来有很强的预见作用并用《资本论》来对比，诚然《乌合之众》有它自身的魅力，不然不可能被大家推荐来推荐去，就算现在问我的态度，我还是推荐的，但我更推荐大家去批判性的看，要有自己的思考，这本书有很强的局限性。</p>        <div id="aplayer-aYDHXakR" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aYDHXakR"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "Wake Me up When September Ends",              author: "Green Day",              url: "September.mp3",              pic: "/2020/10/03/WakeMeUpWhenSepEnds/September.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="碎碎念" scheme="http://www.allenmistake.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>找不到工作，我很抱歉</title>
    <link href="http://www.allenmistake.top/2020/08/31/keepStudy/"/>
    <id>http://www.allenmistake.top/2020/08/31/keepStudy/</id>
    <published>2020-08-31T03:23:09.000Z</published>
    <updated>2020-08-31T09:22:40.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没有更博了，原因主要还是自己没养成习惯，不给自己找理由。也不许什么目标，我想保证每篇博客言之有物，以后有想说的干货就说一说，不管你是想看技术还是看生活感悟，希望都对大家有帮助。</p><h2 id="春"><a href="#春" class="headerlink" title="春"></a>春</h2><p>由于今年的特殊性，上半年没什么学习动力，也算是很遗憾吧，没有抓住机会，在这个疫情期间没有好好投资自己，导致自己后面的选择面变得很窄。之前做了一些项目到后来基础打的不好，算法也跟不上，很多公司也都错过了，写这篇也算是对自己的反思吧。</p><h2 id="我的实习"><a href="#我的实习" class="headerlink" title="我的实习"></a>我的实习</h2><p>由于家在天津，去找了天津一个国企的实习，感受了一下国企的氛围，坦白来讲，比我想象的好一些，工资肯定没有互联网那么高，甚至低很多很多，但是性价比也还是有的，而且周围的师傅对实习生都很好。现在不是都谈内卷问题嘛，不如换个角度，<strong>找那些和自己专业不那么对口，但是可以结合自己专业，在从事的领域有一定的优势</strong>。就像冯巩老师说的一样，在相声界吉他弹得最好，在吉他界相声说的最好，一样，我觉得这其实是一种规避内卷的方式。</p><h2 id="下半年的计划"><a href="#下半年的计划" class="headerlink" title="下半年的计划"></a>下半年的计划</h2><p>其实目前的形式还是 不简单~不简单~ 心里赞叹这世上的艰难~，岗位变少了，人数变多了。和周围的同学商量来商量去最稳的办法是读博，但我觉得读博对于我这种学术菜鸡就是一种逃避手段，还是走向社会吧，就算是博士，也是学生，终归有自身的局限性。</p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>最后说几个可以提升自己的点吧，可能会有点鸡汤味道，可以理解为给我喝的，不喜欢的可以忽略这部分</p><h3 id="延时满足"><a href="#延时满足" class="headerlink" title="延时满足"></a>延时满足</h3><p>老生常谈的一个能力，往更大了说就是控制自己欲望的能力，说一个简单的例子，刷某音，刷某站一些毫无营养的视频，比如什么xxx挑战，或者是那些土味，刷起来太上头，要学会控制自己，不要让他们占据你过多的时间，我们还年轻，我们的时间尽量放在提升自己上面。</p><h3 id="执行力"><a href="#执行力" class="headerlink" title="执行力"></a>执行力</h3><p>之前买过一本书，叫做《执行力》，记得那本书写的还蛮不错的，可惜自己的执行力在没有人监督或者没有 deadline 的情况下基本为0，要想一想怎么提高了。<br>我现在有点讨厌那种Todo List，计划了半天，执行力不够，画再多 0 不如写个 1 个 1，对吧。</p><p>之后打算写一些在国企工作的感悟，我们下一篇再见吧</p><p>最近有个新的记笔记的，也是仿 notion ，有个比较舒服的地方就是自动排版英文（不用费劲打空格啦），如果各位注册的话，我的邀请码：NLYYJP3 。</p><p>希望各位看官能支持一下（完全随意昂，你不支持我也会更新的），为了放音乐特意办了网抑云的会员，找不到工作，我很抱歉。</p><p>最后放个锦鲤，祝看到这篇文章的人，可能你曾经困苦，但结尾苦尽甘来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/08/31/keepStudy/jinli.jpg" alt="比较喜欢的一张锦鲤照片 PS.人家说放太多锦鲤照片就不灵" title>                </div>                <div class="image-caption">比较喜欢的一张锦鲤照片 PS.人家说放太多锦鲤照片就不灵</div>            </figure>        <div id="aplayer-jvkljBWr" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-jvkljBWr"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "问问吾问问",              author: "丛帅",              url: "问问吾问问.mp3",              pic: "/2020/08/31/keepStudy/问问吾问问.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="碎碎念" scheme="http://www.allenmistake.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>来点音乐~</title>
    <link href="http://www.allenmistake.top/2020/06/17/musicInSummer/"/>
    <id>http://www.allenmistake.top/2020/06/17/musicInSummer/</id>
    <published>2020-06-17T09:38:53.000Z</published>
    <updated>2020-06-17T09:42:17.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Summer Coming~ </p><a id="more"></a><p>夏天到了，有点闷，来点音乐~</p>        <div id="aplayer-sIVrHnjx" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-sIVrHnjx"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "月半弯",              author: "陈坤",              url: "月半弯.mp3",              pic: "/2020/06/17/musicInSummer/月半弯.jfif",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summer Coming~ &lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>雨季，总是突如其来</title>
    <link href="http://www.allenmistake.top/2020/05/07/2020May/"/>
    <id>http://www.allenmistake.top/2020/05/07/2020May/</id>
    <published>2020-05-07T12:40:03.000Z</published>
    <updated>2020-05-07T13:34:51.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="稚气"><a href="#稚气" class="headerlink" title="稚气"></a>稚气</h2><p>前两天和初中的朋友们见了一面，感觉大家也都在各自的岗位上混得不错。有人还开了宝马过来，有点小羡慕。</p><p>到场的几个人里面，就我在读研，还是比同龄的他们多了几分稚气，不知道如何才能摆脱<br>“工作就好啦”他们安慰道。<br>可是我们仍然是同龄人，就因为学习就会有这种傻气吗？<br>不见得，还是自身不行。</p><h2 id="不了解自己，所以无法做出选择"><a href="#不了解自己，所以无法做出选择" class="headerlink" title="不了解自己，所以无法做出选择"></a>不了解自己，所以无法做出选择</h2><p>有的时候，觉得自己又到了人生的十字路口上，我也清楚每个选项，但是还是太不了解自己了，还是无法做出选择。</p><p>我们总是在想把未来的每一天过好，找到适合自己的路。可惜生活是个单行路，不能回头那种，不选择是消极的，选择的时候也不必死去活来，毕竟谁都是选择一次，高考也罢，考研也罢，专业也好，工作也好，说是很重要，也没那么一锤定音。</p><p>但有的是时候还是要浇一盆冷水给自己，因为越到后面，我们的选择的容错率越低。</p><p>只要我们还年轻，我们还有的是机会，我们是后浪。</p><h2 id="后浪"><a href="#后浪" class="headerlink" title="后浪"></a>后浪</h2><p>前些日子，何冰老师和bilibili联合出品的《后浪》在青年节上发布了，我满怀激情的看完了这份演讲，朋友圈也都大量转发，感悟其实有很多，那种未来就在自我掌控之中的豪情，还有广阔天地，大有作为的澎湃，前浪对我们说，尽情驰骋吧，后浪！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/05/07/2020May/wave.jpg" alt="bilibili献给新一代的演讲《后浪》" title>                </div>                <div class="image-caption">bilibili献给新一代的演讲《后浪》</div>            </figure><p>但是，大家在转发的时候，还是引用了不同的句子，我喜欢古文，我朋友圈发的是</p><p><strong>“君子美美与共，和而不同”，加油，致后浪，致我们。</strong></p><p>于是抱着兼收并蓄，看看众人如何理解的心态，我去知乎，发现这里竟然大多数对这部演讲有着一些或者很多的抵触情绪。</p><p>原因有很多，有些点说的其实也蛮有道理，往商业上来讲，其实就是 bilibili 做的一个宣传片，宣传一个年轻人比较多的平台，焕发着朝气。比较多的人觉得，后浪是因前浪而赋予名字。后浪也会变成前浪，正所谓</p><p>少年不识愁滋味，爱上层楼，爱上层楼。为赋新词强说愁。<br>而今识尽愁滋味，欲说还休，欲说还休。却道天凉好个秋。</p><p>这个事情吧，准中年人看完会流泪，晚期青年人嗤之以鼻、尚未工作的大学生兴奋不已、未成年人。————引用知乎用户</p><p>其实还有比部分观点，意思就是很多年轻人并不能接触到这些很美好的事物，回归现实，确实是这样，这里面也有很多难。但是以为这个就去否定这个片子就没必要了，还有甚者去何冰老师微博下面爆破，无奈了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="碎碎念" scheme="http://www.allenmistake.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Flutter UI绘制渲染机制分析</title>
    <link href="http://www.allenmistake.top/2020/04/16/flutter-ui/"/>
    <id>http://www.allenmistake.top/2020/04/16/flutter-ui/</id>
    <published>2020-04-16T03:31:04.000Z</published>
    <updated>2020-05-07T14:00:56.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/04/16/flutter-ui/ui.jpg" alt="UI渲染流程" title>                </div>                <div class="image-caption">UI渲染流程</div>            </figure><h2 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h2><p>Weight 在Flutter 中是必不可少的存在，翻译过来是控件的意思，Flutter中的每一种都是一个Weight。<br>Widget里面存储了一个视图的配置信息，包括布局、属性等待。所以它只是一份轻量的，可直接使用的数据结构。在构建为结构树，甚至重新创建和销毁结构树时都不存在明显的性能问题。</p><p>而对于渲染问题，并不是由 Weight 直接管理，而是通过State这个对象来管理状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// If you wish to associate mutable state with a widget, consider using a</span></span><br><span class="line"><span class="comment">/// [StatefulWidget], which creates a [State] object (via</span></span><br><span class="line"><span class="comment">/// [StatefulWidget.createState]) whenever it is inflated into an element and</span></span><br><span class="line"><span class="comment">/// incorporated into the tree.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Widget会被填充到Element,并由Element管理底层渲染树。</span></span><br><span class="line"><span class="comment">* Widget本身没有可变状态（所有的字段必须是final）。</span></span><br><span class="line"><span class="comment">* 如果想要把可变状态与Widget关联起来，可以使用StatefulWidget，</span></span><br><span class="line"><span class="comment">* StatefulWidget通过使用StatefulWidget.createState方法创建State对象，</span></span><br><span class="line"><span class="comment">* 并将之扩充到Element以及合并到树中；</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到， Weight是不可变的，如果要使它成为可变状态，就不得不提到Element</p><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>Widget 和 Element 之间是一对多的关系 。实际上渲染树是由 Element 实例的节点构成的树，而作为配置文件的 Widget 可能被复用到树的多个部分，对应产生多个 Element 对象。</p><p>打开<code>Element</code>类，在里面发现了 Element 的两个重要属性<code>widget</code>和<code>renderObject</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RenderObject get renderObject&#123;</span><br><span class="line">    RenderObject result;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element element)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span>(result == <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(element is RenderObjectElement)</span><br><span class="line">            result = element.renderObject;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            element.visitChildren(visit);</span><br><span class="line">    &#125;</span><br><span class="line">    visit(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说Element同时持有了Widgets和RenderObject。那Element的作用就比较明确了，<strong>Element作为中间件来分离控件树和渲染对象。</strong></p><h2 id="RenderObject"><a href="#RenderObject" class="headerlink" title="RenderObject"></a>RenderObject</h2><p>官方定义：An object in the render tree.渲染树中的一个对象。从其名字，我们可以很直观地知道，它就是负责渲染的工作，实际上，所有的布局、绘制和事件响应全都由它负责，开发复杂视图时我们可能经常需要与之打交道。<br>而它又是由 Element 的子类 RenderObjectElement 创建出来的，RenderObject 也会构成一个 Render Tree，并且每个 RenderObject 也都会被保存下来以便在更新时复用，Render Tree构建的数据会被加入到 Engine所需的 LayerTree中，Engine通过 LayerTree进行视图合成并光栅化，提交给 GPU。</p><p>那么三者关系很明确了：<br><strong>配置文件 Widget 生成了 Element，而后创建 RenderObject 关联到 Element 的内部 renderObject 对象上，最后Flutter 通过 RenderObject 数据来布局和绘制。</strong></p><h2 id="一共有几颗树"><a href="#一共有几颗树" class="headerlink" title="一共有几颗树"></a>一共有几颗树</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>代理模式的几点总结</title>
    <link href="http://www.allenmistake.top/2020/03/06/proxy/"/>
    <id>http://www.allenmistake.top/2020/03/06/proxy/</id>
    <published>2020-03-06T07:16:59.000Z</published>
    <updated>2020-03-06T10:35:50.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为其它对象提供一种代理以控制这个对象的访问。</p><p>简单的举个例子，可以看作一个玩家自己不打游戏，而是通过找代练让代练去操作游戏。诸如Windows上的快捷方式，其实都是一种代理模式。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>职责清晰。真实的角色就是实现实际的业务逻辑，不用担心其他非本职责的事务。</li><li>高扩展性。代理类完全可以在不做任何修改的情况下使用。</li><li>智能化。比如动态代理。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>有些类型的代理模式可能会造成请求的处理速度变慢。</li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ul><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/03/06/proxy/UML.png" alt="UML框图" title>                </div>                <div class="image-caption">UML框图</div>            </figure><p>代理模式中有以下角色：</p><ul><li>抽象主题类(Subject): 声明真实主题和代理Proxy 的共同接口方法。</li><li>真实主题类(RealSubject): 具体主题角色，定义了 Proxy 所代表的真实实体</li><li>代理类(Proxy)：持有对真实主题类的引用,使代理可以访问实体，并提供一个与 Subject 的接口相同的接口。</li><li>客户端类。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>首先我们来看一下对应基本结构下的代理模式。</p><h3 id="Subject抽象类"><a href="#Subject抽象类" class="headerlink" title="Subject抽象类"></a>Subject抽象类</h3><p>定义了 RealSubject 和 Proxy 的共同接口，这样就在任何使用 RealSubject 的地方都可以使用Proxy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RealSubject类"><a href="#RealSubject类" class="headerlink" title="RealSubject类"></a>RealSubject类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"真实的请求RealSubject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h3><p>代理类。一个代理类可以代理多个被委托者或被代理者，因此一个代理类具体代理哪个真实主题角色，是由场景类决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-客户端"><a href="#Client-客户端" class="headerlink" title="Client 客户端"></a>Client 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>所谓静态代理类是指：由程序员创建或由特定工具自动生成源代码，再对其进行编译。在程序运行之前，代理类的.class文件就已经存在了。</p><h3 id="抽象主题类"><a href="#抽象主题类" class="headerlink" title="抽象主题类"></a>抽象主题类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真实主题类"><a href="#真实主题类" class="headerlink" title="真实主题类"></a>真实主题类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Allenmistake</span> <span class="keyword">implements</span> <span class="title">IShop</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Purchasing</span> <span class="keyword">implements</span> <span class="title">IShop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IShop mShop;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Purchasing</span><span class="params">(IShop shop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mShop = shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mShop.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、客户端类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IShop allenmistake = <span class="keyword">new</span> Allenmistake();</span><br><span class="line">        IShop purchasing = <span class="keyword">new</span> Purchasing(allenmistake);</span><br><span class="line">        purchasing.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>在代码运行时通过反射来动态地生成代理类的对象，并确定到底来代理谁。</p><p>通过动态代理，我们不再需要手动创建代理类，只需编写一个动态处理器即可，而<strong>真正的代理对象由JDK在运行时帮我们创建</strong>。所以我们也将之称为JDK动态代理。</p><p>方法步骤如下：（<strong>重点</strong>）</p><p>写一个代理类实现 <code>InvocationHandler</code> 接口，通过构造函数把代理对象（具体目标类）传入到此处理器中，在<code>invoke()</code>方法中增加<code>method.invoke(realSubject, args)</code>。在调用方法时，通过<code>java.lang.reflect.Proxy</code> 和<code>newProxyInstance()</code> 来获取代理实现类，生成代理对象时，直接调用方法即可。真实主题类发生变化时，由于它实现了公用的接口，因此代理类不需要修改。</p><p>改写静态代理的代理类和客户端类，如下所示：</p><h3 id="动态代理类"><a href="#动态代理类" class="headerlink" title="动态代理类"></a>动态代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPurchasing</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicPurchasing</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端类"><a href="#客户端类" class="headerlink" title="客户端类"></a>客户端类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IShop jsonChao = <span class="keyword">new</span> JsonChao();</span><br><span class="line">        DynamicPurchasing mDynamicPurchasing = <span class="keyword">new</span> DynamicPurchasing(jsonChao);</span><br><span class="line">        ClassLoader cl = jsonChao.getClass.getClassLoader();</span><br><span class="line">        <span class="comment">// 生成代理类对象</span></span><br><span class="line">        IShop purchasing = Proxy.newProxyInstance(cl, <span class="keyword">new</span> Class[]&#123;IShop.class&#125;, mDynamicPurchasing);</span><br><span class="line">        purchasing.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.allenmistake.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>从预设ViewModel代码谈MVVM模式</title>
    <link href="http://www.allenmistake.top/2020/02/03/mvvm/"/>
    <id>http://www.allenmistake.top/2020/02/03/mvvm/</id>
    <published>2020-02-03T14:03:31.000Z</published>
    <updated>2020-03-06T07:31:01.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从MVC说起"><a href="#从MVC说起" class="headerlink" title="从MVC说起"></a>从MVC说起</h2><p>设计分层，不得不提到 MVC ，也就是 Model、View、Controller</p><p>这种模型——视图——控制器的设计模式有很多优点，最大的一个就是低耦合，</p><p>模型对象： 存存着应用的数据和业务逻辑。模型类通常用来映射与应用有关的一些事物，如用户、商店里的商品、服务器上的图片…<br>模型对象不关心用户界面，它为存储和管理应用数据而生。</p><p>视图对象：这个不多做解释</p><p>控制器对象：含有应用的逻辑单元，是视图对象与模型对象的联系纽带。控制器对象相应视图对象触发的各类条件，此外还管理着模型对象与视图层间的数据流动。</p><h2 id="MVC面临的问题"><a href="#MVC面临的问题" class="headerlink" title="MVC面临的问题"></a>MVC面临的问题</h2><p>MVC适合小规模的应用。他方便开发人员情理结构，快速添加新功能，为开发打下坚实基础。</p><p>但当项目功能逐渐变多的时候。fragment 和 acvtivity 开始膨胀，逐渐变得难以理解和扩展。这个时候控制层就要做出拆分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>人生，就是不断和过去告别</title>
    <link href="http://www.allenmistake.top/2020/01/08/goodbye2019/"/>
    <id>http://www.allenmistake.top/2020/01/08/goodbye2019/</id>
    <published>2020-01-08T02:10:47.000Z</published>
    <updated>2020-01-08T02:55:52.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="地久天长"><a href="#地久天长" class="headerlink" title="地久天长"></a>地久天长</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/01/08/goodbye2019/solong.jpg" alt="电影名" title>                </div>                <div class="image-caption">电影名</div>            </figure><p>其实一开始并不知道《地久天长》这部电影，只是好奇柏林影帝影后是怎样的演技，看完之后感觉，确实，这种在平凡之中所蕴藏在心底的悲伤，被演员悄无声息地蔓延开来，扑向屏幕外的观众。</p><p>3个小时的电影，电影采用闪回的方式，观众需要对闪回内容发生的时间进行分析。我想了想，为什么电影要用闪回，大概正如年纪大的人回首往事，一幕幕回忆涌上心头，尽管持续的时间不强，但是感情强烈。</p><p>每个人，只能陪你走一段路，这是我当时看完《山河故人》的最有印象的台词，那也是一部看完了全篇就好像过完一生的电影。而《地久天长》拍的更好，我很喜欢电影的英文名，So Long，My Son。So long 有如此之长，也有再见的意思，片中主角家庭很早就失去了他们的儿子，他们用自己的一生来为孩子告别。这是So long的双层含义。不得不说，很妙。</p><p>片头，当悠扬厚重的大提琴演奏出友谊地久天长的前奏时，就已经奠定了影片缓缓流淌的悲伤。正如片最后夫妻俩原谅了间接杀死自己孩子的干儿子一样，所有的感情都会随着时间的流逝而渐渐淡去，恨意，爱意。</p><p>正如歌里面唱的那样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我们曾经终日游荡</span><br><span class="line">在故乡的青山上</span><br><span class="line">我们也曾历尽苦辛</span><br><span class="line">到处奔波流浪</span><br><span class="line">...</span><br><span class="line">我们也曾终日逍遥</span><br><span class="line">荡桨在绿波上</span><br><span class="line">但如今却劳燕分飞</span><br><span class="line">远隔大海重洋</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/01/08/goodbye2019/music.jpg" alt="电影宣传曲封面" title>                </div>                <div class="image-caption">电影宣传曲封面</div>            </figure><h2 id="2019回顾"><a href="#2019回顾" class="headerlink" title="2019回顾"></a>2019回顾</h2><p>说了半天电影的故事，现在才正式对2019年进行一个回顾。其实也没什么好回顾的，整个2019没做什么重要的事，简单列举一下</p><ul><li>智能管家，对于 <strong>Android</strong> 各个组件使用慢慢熟悉</li><li>做了一个Flutter 小项目，但是对 <strong>Flutter</strong> 缺乏更深入的理解</li><li>算法方面，也是刷了不少 <strong>Leetcode</strong> ，做了不少总结，但是还是要时不时回顾。两个我觉得掌握比较好的就是回溯和排序了。下面重点是动态规划和树问题</li><li>Java方面由于看的比较早，现在印象不深，<strong>JVM</strong> 方面和 <strong>多线程</strong> 这方面总结的已经很多了，应该反复咀嚼。</li><li>通信方面实验室内容做的比较多，觉得最有收获的就是 MIMO 的空时编码，和Viterbi译码，程序写出来的时候那种成就感还是很不错的</li></ul><h2 id="你好，2020"><a href="#你好，2020" class="headerlink" title="你好，2020"></a>你好，2020</h2><p>据说2020要贫困人口摘帽，我觉得我很危险了，现在只想搞钱.jpg</p><ul><li>至少出1篇论文</li><li>看10本非专业书籍</li><li>找到一份满意的工作</li><li>LeetCode继续刷题！至少50道吧</li></ul><p>之前的年度计划保存在本地，不知道什么时候删了，这次写到博客里，应该不会忘了。</p><p>最近事情有点多，等到之后再进行补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode日记：322.换硬币</title>
    <link href="http://www.allenmistake.top/2019/11/21/CoinChange/"/>
    <id>http://www.allenmistake.top/2019/11/21/CoinChange/</id>
    <published>2019-11-21T13:40:44.000Z</published>
    <updated>2019-11-21T14:22:35.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><p>【举例】<br>输入: coins = [1, 2, 5], amount = 11<br>输出: 3<br>解释: 11 = 5 + 5 + 1</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们仍采取上次说的回溯转动态规划，来慢慢熟悉动态规划解题思路。</p><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCoins</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(coins == <span class="keyword">null</span> || coins.length == <span class="number">0</span> || amount &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proress(coins, <span class="number">0</span>, amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coins coin数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 当前考虑的第i个面值coin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rest 目前剩下需要换的钱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">proress</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> i, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case:</span></span><br><span class="line">    <span class="comment">// 此时已经没有面值能考虑的</span></span><br><span class="line">    <span class="comment">// 所以如果剩下的rest此时不是0，则返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(i == coins.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> rest == <span class="number">0</span> ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最少张数，初始为-1</span></span><br><span class="line">    <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 依次尝试使用当前面值(coins[i])0张、1张，但不能超过rest</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k * coins[i] &lt;= rest; k++)&#123;</span><br><span class="line">        <span class="comment">// 使用了k张coins[i]，剩下的钱为rest-k*coins[i]</span></span><br><span class="line">        <span class="keyword">int</span> next = proress(coins, i +<span class="number">1</span>, rest - k* coins[i]);</span><br><span class="line">        <span class="keyword">if</span>(next != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res == -<span class="number">1</span>)</span><br><span class="line">                res = next + k;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res = Math.min(res, next + k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ol><li>找可变参数，如果看了回溯的代码，马上能确定分别是：硬币面值<code>coins[i]</code>、剩下的钱<code>rest</code>。</li><li><p>构建表，二维数组的行代表硬币面值，列代表兑换面值，如下图所示。注意，为了构建base case，我们必须要创建0硬币面值，以及0兑换钱数，因为我把0面值放在了数组最后，所以我们运算方向是自下向上的<br> <img src="/2019/11/21/CoinChange/1.jpg" alt="二维数组"></p></li><li><p>随后我们对base case进行初始赋值，当0面值时。只有当兑换钱总数为0，数量才是0，其他都是-1(不可达)</p><p> <img src="/2019/11/21/CoinChange/1.1.jpg" alt="base case"></p></li><li><p>最为关键的一步，如何填写非base case，我们要梳理清楚逻辑关系，首先赋值-1，然后我们考虑此时的<code>coin[i]</code>能否构成，不能构成（coin[i] &gt; rest）我们肯定不可达，如果coins[i] &lt; rest ，这是就要看 rest - coins[i] 是否可达，如果不可达，那rest也不可达，如果可达，我们就要和之前没有coins[i]参与的面值组成的rest比一比，谁更小。</p></li></ol><p>以上这段文字需要细细品味，如果你觉得想起来有点吃力，请看下面两张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/21/CoinChange/2.png" alt="注意红字得到的过程" title>                </div>                <div class="image-caption">注意红字得到的过程</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/21/CoinChange/3.png" alt="黄字在图中标出了比较过程" title>                </div>                <div class="image-caption">黄字在图中标出了比较过程</div>            </figure><p>这两张图中，我希望你搞清楚红色数字的来由，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCoins</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(coins == <span class="keyword">null</span> || coins.length == <span class="number">0</span> || amount &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> N = coins.length;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][amount + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// base case初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">1</span>; col &lt;= amount; col++)&#123;</span><br><span class="line">        dp[N][col] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> rest = <span class="number">0</span>; rest &lt;= amount; rest++)&#123;</span><br><span class="line">            dp[i][rest] = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[i + <span class="number">1</span>][rest] != -<span class="number">1</span>)</span><br><span class="line">                dp[i][rest] = dp[i + <span class="number">1</span>][rest];</span><br><span class="line">            <span class="keyword">if</span>(rest - coins[i] &gt;= <span class="number">0</span> &amp;&amp; dp[i][rest - coins[i]] != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][rest] == -<span class="number">1</span>)</span><br><span class="line">                    dp[i][rest] = dp[i][rest - coins[i]] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][rest] = Math.min(dp[i][rest - coins[i]] + <span class="number">1</span>, dp[i][rest]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，欢迎大家来我的公众号看一看，周更一些算法总结和Java基础巩固~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191121221835471.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODQ3NjM5,size_16,color_FFFFFF,t_70" alt="微信关注安知窝" title>                </div>                <div class="image-caption">微信关注安知窝</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>这可能是我见过最全的动态规划讲解</title>
    <link href="http://www.allenmistake.top/2019/11/20/dp/"/>
    <id>http://www.allenmistake.top/2019/11/20/dp/</id>
    <published>2019-11-20T15:46:59.000Z</published>
    <updated>2019-11-21T14:09:52.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="理论篇"><a href="#理论篇" class="headerlink" title="理论篇"></a>理论篇</h2><h3 id="什么时候用动态规划"><a href="#什么时候用动态规划" class="headerlink" title="什么时候用动态规划"></a>什么时候用动态规划</h3><h4 id="一个模型三个特征"><a href="#一个模型三个特征" class="headerlink" title="一个模型三个特征"></a>一个模型三个特征</h4><ul><li><p>模型：多阶段决策最优解模型</p><p>  解决问题的过程，需要经历多个决策阶段。每个决策阶段都对应着一组状态。然后我们寻找一组决策序列，经过这组决策序列，能够产生最终期望求解的最优值。</p></li><li><p>最优子结构：</p><p>  最优子结构指的是，问题的最优解包含子问题的最优解。反过来说就是，我们可以<strong>通过子问题的最优解，推导出问题的最优解</strong>。</p></li><li><p>无后效性：</p><p>  无后效性有两层含义，第一层含义是，在推导后面阶段的状态的时候，我们只关心前面阶段的状态值，不关心这个状态是怎么一步一步推导出来的。第二层含义是，某阶段状态一旦确定，就不受之后阶段的决策影响。</p></li><li><p>重复子问题：</p><p>  不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态。</p></li></ul><h4 id="举个例子——棋盘问题"><a href="#举个例子——棋盘问题" class="headerlink" title="举个例子——棋盘问题"></a>举个例子——棋盘问题</h4><p>一个机器人从4*4的棋盘的左上角走到右下角，每次走一个，且只能向下或向右，每个格子有自己的权值，请问怎样走权值总和最小？</p><p>这就完全符合上述的情况（每走一格就代表一个阶段，每个阶段对应一个状态集合，最优路径一定由最优子路径组成；我们不关心来的路线，只关心经过路线的权值和；不同路径在相同阶段会有重复）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/20/dp/01.jpg" alt="棋盘问题" title>                </div>                <div class="image-caption">棋盘问题</div>            </figure><h3 id="两种解题思路"><a href="#两种解题思路" class="headerlink" title="两种解题思路"></a>两种解题思路</h3><ol><li><p>状态转移表法</p><p> 我们先画出一个状态表。状态表一般都是二维的，所以你可以把它想象成二维数组。其中，每个状态包含三个变量，行、列、数组值。我们根据决策的先后过程，从前往后，根据递推关系，分阶段填充状态表中的每个状态。最后，我们将这个递推填表的过程，翻译成代码，就是动态规划代码了。</p></li></ol><h3 id="回溯、贪心与动态规划"><a href="#回溯、贪心与动态规划" class="headerlink" title="回溯、贪心与动态规划"></a>回溯、贪心与动态规划</h3><ol><li><p>回溯</p><p> 回溯算法是个“万金油”。基本上能用的动态规划、贪心解决的问题，我们都可以用回溯算法解决。回溯算法相当于穷举搜索。穷举所有的情况，然后对比得到最优解。不过，回溯算法的时间复杂度非常高，是指数级别的，只能用来解决小规模数据的问题。对于大规模数据的问题，用回溯算法解决的执行效率就很低了。</p></li><li><p>动态规划</p><p> 尽管动态规划比回溯算法高效，但是，并不是所有问题，都可以用动态规划来解决。能用动态规划解决的问题，需要满足三个特征，最优子结构、无后效性和重复子问题。在重复子问题这一点上，动态规划和分治算法的区分非常明显。分治算法要求分割成的子问题，不能有重复子问题，而动态规划正好相反，动态规划之所以高效，就是因为回溯算法实现中存在大<br> 量的重复子问题。</p></li><li><p>贪心算法</p><p> 贪心算法实际上是动态规划算法的一种特殊情况。它解决问题起来更加高效，代码实现也更加简洁。不过，它可以解决的问题也更加有限。它能解决的问题需要满足三个条件，最优子结构、无后效性和贪心选择性（这里我们不怎么强调重复子问题）。其中，最优子结构、无后效性跟动态规划中的无异。</p><p> “贪心选择性”的意思是，通过局部最优的选择，能产生全局的最优选择。每一个阶段，我们都选择当前看起来最优的决策，所有阶段的决策完成之后，最终由这些局部最优解构成全局最优解。</p><hr></li></ol><h2 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h2><h3 id="机器人达到指定位置方法数"><a href="#机器人达到指定位置方法数" class="headerlink" title="机器人达到指定位置方法数"></a>机器人达到指定位置方法数</h3><p>【<strong>题目</strong>】</p><p>假设有排成一行的N个位置，记为1~N，N一定大于等于2.开始时机器人在其中的M位置上。机器人可以往左走或者往右走，如果机器人来到1位置，那么下一步只能往右来到2位置；如果机器人来到N位置，那么下一步只能往左来到N-1位置。规定机器人必须走K步，最终能来到P位置的方法有多少种？</p><p>【<strong>举例</strong>】N = 5，M = 2， K = 3， P = 3；</p><p>【<strong>解答</strong>】我们说过，所有的动态规划问题，都可以用回溯问题来解决，那么我们完全可以先利用递归的思路来想一下思路，然后过渡到动态规划，实际上，这种暴力递归到动态规划的优化对于很多问题都适用。</p><h4 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h4><p>其实暴力递归就是回溯，我们直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> N 位置1~N， 固定参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cur 当前所在位置，可变参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> rest 还剩步数，可变参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> P 最终目标，固定参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回方法数，int类型</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">walk</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> cur, <span class="keyword">int</span> rest, <span class="keyword">int</span> P)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 如果没有步数，当前位置就是最后位置</span></span><br><span class="line">     <span class="comment">// 如果最后位置停在P，那么值钱移动就是有效，反之无效</span></span><br><span class="line">     <span class="keyword">if</span>(rest == <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> cur == P ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">     <span class="comment">// 考虑两种边界情况</span></span><br><span class="line">     <span class="keyword">if</span>(cur == <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">return</span> walk(N, <span class="number">2</span>, rest - <span class="number">1</span>, P);</span><br><span class="line">     <span class="keyword">if</span>(cur == N)</span><br><span class="line">         <span class="keyword">return</span> walk(N, N - <span class="number">1</span>, rest - <span class="number">1</span>, P);</span><br><span class="line">     <span class="keyword">return</span> walk(N, cur + <span class="number">1</span>, rest - <span class="number">1</span>, P) + walk(N, cur - <span class="number">1</span>, rest - <span class="number">1</span>, P);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>看见没，回溯解决问题的代码就是那么简单，可是代码的简洁是用时间复杂度换来的。所以哈，面试的时候，如果面试官向你提了一个算法题，你可以先用回溯拖一下，因为回溯是很容易想到的解决问题的算法，然后我们再对他进行优化。</p><h4 id="优化为动态规划"><a href="#优化为动态规划" class="headerlink" title="优化为动态规划"></a>优化为动态规划</h4><p>在这之前，我们已经能确定了这个问题是具有无后效性的。</p><p>那么套路大体步骤如下：</p><ol><li>找到什么可变参数可以代表一个递归状态，也就是哪些参数一旦确定，返回值就确定了。</li><li>把可变参数的所有组合映射成一张表，有一个可变参数就是一维表，2个可变参数就是二维表…</li><li>最终答案要的是表中的哪个位置，在表中标出。</li><li>根据地轨过程的base case，把这张表最简单，最不需要依赖其他位置的那些位置填好值。</li><li>根据递归过程的非base case的部分，也就是分析表中的普遍位置需要怎么计算得到，那么这张表的填写顺序就确定了。</li><li>填好表，返回最终答案在表中的位置。</li></ol><p>针对于这道题我们可以套用一下：N = 7，M = 5， K = 9， P = 4；</p><ol><li><code>walk</code>函数中，可变参数<code>cur</code>, <code>rest</code>一旦确定，返回值也就确定了。</li><li>如果可变参数<code>cur</code>和 <code>rest</code>组合的所有可能情况组成一张表，这张表便装下了所有的返回值。如下图所示<br><img src="/2019/11/20/dp/1.png" alt="二维数组"></li><li><p>最终要求的位置，标出来。在这里我们最终位置是dp[9][4]，我们已经用星号在上图标出来了位置。</p></li><li><p>base case指问题的规模小到什么程度，就不需要划分子问题，很明显指的是代码如下的情况，表现在二维数组下图所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(reset == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cur == P ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/20/dp/2.png" alt="base case"></p></li><li>那么剩下的代码对应的就是非base case，那么如何填写呢？我们要找到下一行是怎样计算得到的，很明显，是有旁边的两个格子相加得出来的（边界条件除外），很容易得出下表<br><img src="/2019/11/20/dp/3.png" alt="计算"></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>最后，我们来看一下动态规划的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ways2</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> M, <span class="keyword">int</span> K, <span class="keyword">int</span> P)</span></span>&#123;</span><br><span class="line">   <span class="comment">// 参数无效直接返回0</span></span><br><span class="line">   <span class="keyword">if</span>(N &lt; <span class="number">2</span> || K &lt; <span class="number">1</span> || M &lt; <span class="number">1</span> ||M &gt; N || P &lt; <span class="number">1</span> || P &gt; N )</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[K + <span class="number">1</span>][N + <span class="number">1</span>];</span><br><span class="line">   dp[<span class="number">0</span>][M] = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= K; i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(j == <span class="number">1</span>)</span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(j == N)</span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][N - <span class="number">1</span>];</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dp[K][P];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参照之前的回溯，还是很容易看懂的吧，实际就是维护了一个二维数组，实际上，我们的二维数组是可以继续优化的，毕竟当我们走到第3步的时候，我们并不关心第一步走的情况，那一层数据对我们来说就是没有的用的。</p><h4 id="数组压缩"><a href="#数组压缩" class="headerlink" title="数组压缩"></a>数组压缩</h4><p>当然，我们可以将二维数组压缩为一维数组，毕竟是无后效性。我们完全可以维持更新第i步时的位置信息，注意更新的时候保存中间值，防止更新的时候覆盖掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ways2</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> M, <span class="keyword">int</span> K, <span class="keyword">int</span> P)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 参数无效直接返回0</span></span><br><span class="line">    <span class="keyword">if</span>(N &lt; <span class="number">2</span> || K &lt; <span class="number">1</span> || M &lt; <span class="number">1</span> ||M &gt; N || P &lt; <span class="number">1</span> || P &gt; N )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>];</span><br><span class="line">    dp[M] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> leftUp = dp[<span class="number">1</span>]; <span class="comment">// 记录左上角的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = dp[j];</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">1</span>)</span><br><span class="line">                dp[j] = dp[j + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j == N)</span><br><span class="line">                dp[j] = leftUp;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[j] = leftUp + dp[j + <span class="number">1</span>];</span><br><span class="line">            leftUp = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[P];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我对动态规划的一些梳理总结，希望大家看完这篇文章之后对于动态规划问题能有一个自己的判别，动态问题的难点在于识别出他的模型，建立你心中的那个表，解锁了动态规划问题之后，我们的算法库会多出来更多关于它的问题，希望大家持续关注。</p><p>我们下期再见！</p><p>附录：本文参考自《程序源代码面试指南（第二版）》、极客时间——《数据结构与算法之美》。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://www.allenmistake.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Java中的反射机制</title>
    <link href="http://www.allenmistake.top/2019/11/17/Reflect/"/>
    <id>http://www.allenmistake.top/2019/11/17/Reflect/</id>
    <published>2019-11-17T03:39:35.000Z</published>
    <updated>2019-11-17T12:12:33.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="反射的定义"><a href="#反射的定义" class="headerlink" title="反射的定义"></a>反射的定义</h2><p>何为反射？</p><p>反射机制就是在运行状态中，对于<strong>任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>用一句话总结就是反射可以实现在运行时可以知道任意一个类的属性和方法。</p><p>问题来了————</p><p>那这样一来，我的私有变量不就暴露在外面了么？</p><p>呃。。。是的，实际上，我们确实能通过反射机制对一个类的私有变量做修改，所以从某种程度上来讲，反射破坏了java的封装性，那么为什么还会作为一种高级特性存在于java中呢？</p><p>别急，我们首先看一下反射能为我们做哪些工作。</p><h2 id="反射用途"><a href="#反射用途" class="headerlink" title="反射用途"></a>反射用途</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>有三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Class&lt;? extends Person&gt; personClazz01 = person.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Class&lt;?&gt; personClazz02 = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line">Class&lt;? extends Person&gt; personClazz03 = Person.class;</span><br></pre></td></tr></table></figure><h3 id="通过反射机制得到类的包名和类名"><a href="#通过反射机制得到类的包名和类名" class="headerlink" title="通过反射机制得到类的包名和类名"></a>通过反射机制得到类的包名和类名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">   Person person = <span class="keyword">new</span> Person();</span><br><span class="line">   System.out.println(<span class="string">"Test1: 包名: "</span> + person.getClass().getPackage().getName() +</span><br><span class="line">               <span class="string">"，"</span> + <span class="string">"完整类名: "</span> + person.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心：通过反射创建类对象"><a href="#核心：通过反射创建类对象" class="headerlink" title="核心：通过反射创建类对象"></a>核心：通过反射创建类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = <span class="keyword">null</span>;</span><br><span class="line">class1 = Class.forName(<span class="string">"反射.Person"</span>);</span><br><span class="line"><span class="comment">//由于这里不能带参数，所以你要实例化的这个类Person，一定要有无参构造函数</span></span><br><span class="line">Person person = (Person) class1.newInstance();</span><br><span class="line">person.setAge(<span class="number">27</span>);</span><br><span class="line">person.setName(<span class="string">"yyc"</span>);</span><br><span class="line">System.out.println(<span class="string">"Test3: "</span> + person.getName() + <span class="string">" : "</span> + person.getAge());</span><br></pre></td></tr></table></figure><p>上述是通过反射创建一个无参对象，如果我的构造函数带参的话，需要利用<code>Constructor</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = <span class="keyword">null</span>;</span><br><span class="line">Person person1 = <span class="keyword">null</span>;</span><br><span class="line">Person person2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">class1 = Class.forName(<span class="string">"反射.Person"</span>);</span><br><span class="line"><span class="comment">//得到一系列构造函数集合</span></span><br><span class="line">Constructor&lt;?&gt;[] constructors = class1.getConstructors();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   person1 = (Person) constructors[<span class="number">0</span>].newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">person1.setAge(<span class="number">28</span>);</span><br><span class="line">person1.setName(<span class="string">"yyc"</span>);</span><br><span class="line"></span><br><span class="line">person2 = (Person) constructors[<span class="number">1</span>].newInstance(<span class="number">29</span>, <span class="string">"yyc"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Test4: "</span> + person1.getName() + <span class="string">" : "</span> + person1.getAge() + <span class="string">"  ,   "</span> + person2.getName() + <span class="string">" : "</span> + person2.getAge());</span><br></pre></td></tr></table></figure><h3 id="通过反射调用类方法"><a href="#通过反射调用类方法" class="headerlink" title="通过反射调用类方法"></a>通过反射调用类方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; class1 = <span class="keyword">null</span>;</span><br><span class="line">class1 = Class.forName(<span class="string">"反射.SuperPerson"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Test7: \n调用无参方法fly()："</span>);</span><br><span class="line">Method method = class1.getMethod(<span class="string">"fly"</span>);</span><br><span class="line">method.invoke(class1.newInstance());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"调用有参方法smoke(int m)："</span>);</span><br><span class="line">method = class1.getMethod(<span class="string">"smoke"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">method.invoke(class1.newInstance(), <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h2><p>说了那么多使用上的例子，我们还是更进一步，看一看系统底层是怎么去做的吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>这是我们正常创建一个类的实例，我们从类加载的角度去讲一下它的创建过程，具体过程可以说的很多，可以参考这篇文章<a href="https://allenmistake.top/2019/05/19/JVM3/" target="_blank" rel="noopener">JVM类加载</a></p><ol><li>遇到<code>new</code>，在磁盘中找 Person.class 文件</li><li>如果没有被加载，就<strong>在内存中生成一个代表这个类的java.lang.Class对象</strong>，所以，class对象只会有一个（在被加载的情况下）。补充：这一部分是通过类加载器实现的 ClassLoader</li></ol><p>实际上，这个类加载是在编译时期就完成的，我们称之为“静态加载”，而反射引起的类加载是在运行时期进行的，也就是“动态加载”。</p><p>那我们看一看反射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class1 = Class.forName(<span class="string">"反射.Person"</span>);</span><br><span class="line">Person person = (Person) class1.newInstance();</span><br></pre></td></tr></table></figure><p>系统根据类的名称直接找到class对象（当然，如果没有的话肯定会触发动态加载），然后通过class对象来对Person对象进行一系列操作（在上述代码，是通过<code>newInstance</code>执行构造函数，创建对象）。此时，Person对象已经完全暴露，可以调用构造函数，或者其他类函数。</p><p>如果你没读懂的话，我们来看一下源码是如何做的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">   Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">   <span class="keyword">return</span> forName0(className, <span class="keyword">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的内容我们可以不用掌握，但我们需要知道，forName这个会触发类加载器ClassLoader来对输入 String 对应类进行类加载，而这个时机是在运行时进行的。</p><h2 id="说一说用途"><a href="#说一说用途" class="headerlink" title="说一说用途"></a>说一说用途</h2><p>说了那么多，回到一开始的问题，反射究竟能起到什么作用呢？我们再来回顾一下：我们能通过类名直接访问类中的具体属性和方法。反过来，如果我们不知道类中的具体属性和方法，我们就只能用反射去得到，这种情况在什么时候会出现呢？</p><p>那就是当我们使用第三方资源或者框架的时候，我们不知道具体的实现细节，便可以通过反射来了解里面内容，在我们的编译器中，输入一个类名或者一个实例在后面输入一个点“.”，系统会自动弹出其中的所有属性与方法，其实这就是反射。</p><h2 id="Android与反射"><a href="#Android与反射" class="headerlink" title="Android与反射"></a>Android与反射</h2><h3 id="调用资源"><a href="#调用资源" class="headerlink" title="调用资源"></a>调用资源</h3><p>当我们项目需要调用第三方的布局时，我们不能使用<code>setContentView(R.layout.activity_main)</code>方法，我们需要借助反射<code>setContentView(IDHelper.getLayout(getApplicationContext(), &quot;activity_main&quot;))</code>，将布局交给工具类，以便在运行时查找。</p><h3 id="Activity启动创建"><a href="#Activity启动创建" class="headerlink" title="Activity启动创建"></a>Activity启动创建</h3><p>在Manifest文件中四大组件的注册都是用反射来完成的，还有布局文件中的widget等等。 足以见得反射应用之广</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在来看，反射是不是一个很神奇的功能，再回到一开始的问题，其实反射在破坏封装性的同时确实给我们带来了诸多便利。<br>希望本文对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="基础" scheme="http://www.allenmistake.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>维特比算法</title>
    <link href="http://www.allenmistake.top/2019/11/10/viterbi/"/>
    <id>http://www.allenmistake.top/2019/11/10/viterbi/</id>
    <published>2019-11-10T02:56:14.000Z</published>
    <updated>2019-11-10T06:55:37.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没有更新通信相关的博客了，最近在做关于维特比译码的相关工作，这两周也是把维特比算法摸了个门清，下面来简单说一下维特比译码的关键思想，重要步骤。</p><h2 id="维特比译码"><a href="#维特比译码" class="headerlink" title="维特比译码"></a>维特比译码</h2><p>首先，我们要对维特比译码有个大概的认识。</p><p>维特比算法是基于状态转移的一种算法。在我的程序中，涉及到的是相位状态，对于CPM（连续相位调制）信号，相位是随着时间连续变化的，这边是一种状态转移，由于这种状态是具有记忆性的，我们在译码的时候，便可以利用这种记忆性，从前向后，或者从后向前译码。通过找到<strong>最优路径</strong>，来将信号恢复。</p><p>在CPM信号的译码中，我们可以画出这样一种状态转移网格图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/10/viterbi/状态转移.png" alt="状态转移网格图" title>                </div>                <div class="image-caption">状态转移网格图</div>            </figure></p><p>其中，纵坐标代表的是状态，横坐标代表每个时刻的符号。第 n 时刻输入的符号不同，对应的状态也就不同。</p><h2 id="约束长度"><a href="#约束长度" class="headerlink" title="约束长度"></a>约束长度</h2><p>在网格中，对于某些路径，Viterbi 算法递归地累积直到 k 个符号间隔分支量，并选择具有最大路径度量的路径。这个k便为约束长度。理想的情况下，约束长度等于信号长度，但是时间复杂度是O(2^N)，对于通信中的信号来说，复杂度太高，且难于实现，所以，在实际中约束长度一般不会等于信号长度。在我的程序中，约束长度等于2。</p><h2 id="简化状态"><a href="#简化状态" class="headerlink" title="简化状态"></a>简化状态</h2><p>我们可以看，在上面的网格图中，有 4 种状态，计算起来复杂度比较高。我的项目中采取了简化状态的方法，通过观察状态转移网格，偶数时刻的状态只有两种情况，0 和 π。如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/11/10/viterbi/简化.png" alt="状态简化" title>                </div>                <div class="image-caption">状态简化</div>            </figure><h2 id="状态与分支度量"><a href="#状态与分支度量" class="headerlink" title="状态与分支度量"></a>状态与分支度量</h2><p>说了那么多，到底是如何找到这个最优路径的呢？对接收到的信号，对于第 n 个时刻，下一种状态对应的所有可能分支状态进行相关计算，我们把得到的这个量成为<strong>分支度量</strong>，我们比较使第 n 个时刻的分支度量最大的分支状态，保存下来。假设 n 时刻可能有两种状态，每种状态对应 2 种分支（我的项目中是4种），所以每个时刻要计算的度量总共有4个。</p><p>我们把最大似然分支找到之后，保存下来，然后往后进行递推，保存的分支数即为约束长度。</p><p>提前祝大家双十一快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="通信" scheme="http://www.allenmistake.top/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="译码" scheme="http://www.allenmistake.top/tags/%E8%AF%91%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>智能管家项目总结1————运行时权限 + FileProvider</title>
    <link href="http://www.allenmistake.top/2019/10/18/smartbutler1/"/>
    <id>http://www.allenmistake.top/2019/10/18/smartbutler1/</id>
    <published>2019-10-18T13:45:25.000Z</published>
    <updated>2019-10-18T13:56:08.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="智能管家SmartButler"><a href="#智能管家SmartButler" class="headerlink" title="智能管家SmartButler"></a>智能管家SmartButler</h2><p>从PT站发现的 Android 练手小项目，慕课网上面的课程，看过视频之后感觉优点还是挺多的</p><ol><li>上手简单</li><li>老师总结一些代码常用模板，有利于之后编程代码结构</li><li>这个框架虽说是 MVC ，但是对于小项目 MVC 也未尝不可，并且框架分类层次分明</li><li>采用许多开源框架</li></ol><p>缺点</p><ol><li>最重要的，年代稍微有些老，对于新版本（Android6.0 之后不太友好）</li><li>虽然采用了许多开源框架，但是对于框架本身并没有做太多的说明，只是轮子的拼接</li><li>部分后台接口发生改变，用不了</li></ol><h2 id="做了一些微小的工作"><a href="#做了一些微小的工作" class="headerlink" title="做了一些微小的工作"></a>做了一些微小的工作</h2><p>对于这个练手项目，肯定是要抱着学习的态度，但同时，还要结合现在新版本来看旧版代码的一些局限性，<br>自己只能做一些微小的工作</p><p>那么接下来，先从很尴尬的运行时权限说起</p><h2 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h2><p>在 Android6.0 之前，安装软件时，会告诉你该软件都需要什么什么权限，但是就算软件告诉你我要你各种隐私，你装个微信还是要装对吧，所以Android6.0很机智的引入了运行时权限这个概念，有些关键性的权限，你在AndroidManifest文件里面声明了，没有用，等到用的时候你还要申请一遍，而且会直接弹出询问UI。</p><p>这个申请的操作，是留给开发者去做的。</p><p>下面来讨论运行时权限在智能管家的应用</p><h3 id="拍照与写入内存"><a href="#拍照与写入内存" class="headerlink" title="拍照与写入内存"></a>拍照与写入内存</h3><p>调用拍照代码中，我们加入版本检测，并在高版本中引入权限请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">    <span class="comment">//如果在Android7.0以上,使用FileProvider获取Uri</span></span><br><span class="line">    intent.setFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line">    Uri contentUri = FileProvider.getUriForFile(getActivity(), getActivity().getPackageName()+<span class="string">".fileprovider"</span>, tempFile);</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, contentUri);</span><br><span class="line">    Log.e(<span class="string">"getPicFromCamera"</span>, contentUri.toString());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    <span class="comment">//否则使用Uri.fromFile(file)方法获取Uri</span></span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(tempFile));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里引入了FileProvider，我们已经在配置文件中声明了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"androidx.core.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"com.example.smartbutler.fileprovider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:resource</span>=<span class="string">"@xml/provider_paths"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，FileProvider 是什么？这个我将在后面博客详细说明，<br>那么为什要引入呢？<br>如果我知道一个文件的uri，是不是就可以随意访问了呢？如果没有FileProvider拦着你，确实是这样，但现在更严格了，Android 7.0后新增了对文件跨进程访问的限制，这个限制会造成，如果使用file://uri的方式访问，则会出现android.os.FileUriExposedException的异常。</p><p>注意，配置文件中的 <code>&quot;@xml/provider_paths&quot;</code>,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"com.example.smartbutler"</span>  <span class="attr">name</span>=<span class="string">"images"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"root_path"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"."</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android项目" scheme="http://www.allenmistake.top/categories/Android%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="权限" scheme="http://www.allenmistake.top/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>次火锅儿噻</title>
    <link href="http://www.allenmistake.top/2019/10/09/chongqing/"/>
    <id>http://www.allenmistake.top/2019/10/09/chongqing/</id>
    <published>2019-10-09T04:09:16.000Z</published>
    <updated>2020-01-03T09:05:42.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重庆之行"><a href="#重庆之行" class="headerlink" title="重庆之行"></a>重庆之行</h2><p>不知道什么时候西安重庆之间开始有了动车，赶上国庆，就去一趟呗。</p><p>但是果然还是不能调大假期的时候去，当地人民接到通知，不要去几个热门景点和游客抢位置。。以致于第一次去洪崖洞的我望洋兴叹，不过终于在6号晚上得以见到传说中的洪崖洞夜景了。</p><h2 id="洪崖洞"><a href="#洪崖洞" class="headerlink" title="洪崖洞"></a>洪崖洞</h2><p>真的是很美的夜景，一个洪崖洞也把重庆这个城市的立体感展现的淋漓尽致——11楼出来是马路，1楼出来还是马路。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/洪崖洞.jpg" alt="洪崖洞" title>                </div>                <div class="image-caption">洪崖洞</div>            </figure><p>而且特别感谢 iPhone 店里上课的老师，教了一些拍照的小技巧，让我拍照水平有所提高</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/洪崖洞2.jpg" alt="洪崖洞进阶" title>                </div>                <div class="image-caption">洪崖洞进阶</div>            </figure><p>但是说归说，iPhone 本身的拍照水平真的不行，或者说 iPhone 尽可能地还原原本的光影色彩，如果想让艺术高于生活，少不了后期的加工</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/iphone.jpg" alt="iPhone无加工" title>                </div>                <div class="image-caption">iPhone无加工</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/B612.jpg" alt="B612" title>                </div>                <div class="image-caption">B612</div>            </figure><p>高下立判，不过其实这种模式也不错，单反不也都是这样吗，需要后期调整色彩。就是有点不够傻瓜（不懂单反，如果说错了多多包涵）</p><h2 id="8D立体城市"><a href="#8D立体城市" class="headerlink" title="8D立体城市"></a>8D立体城市</h2><p>在蜂窝网上评价中有这么一条，叫做“8D立体城市”，我觉得形容的很贴切，在道路高低起伏的重庆里，楼房，交通，桥，这三种元素将空间利用率达到了极致。著名景点李子坝轻轨站就是最好的证明</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/轻轨.jpg" alt="李子坝" title>                </div>                <div class="image-caption">李子坝</div>            </figure><h2 id="次火锅er"><a href="#次火锅er" class="headerlink" title="次火锅er~"></a>次火锅er~</h2><p>来了重庆，怎么能不吃火锅呢，有点遗憾的是我点的全都是微辣，不能完全领略重庆火锅的魅力，但对于我来说，这个辣度已经相当辣了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/10/09/chongqing/火锅.jpg" alt="重庆火锅" title>                </div>                <div class="image-caption">重庆火锅</div>            </figure><h2 id="2019年没有假期"><a href="#2019年没有假期" class="headerlink" title="2019年没有假期"></a>2019年没有假期</h2><p>至此，2019年所有假期都已经用完，再放假就是元旦了，现在要好好收收心，搞科研咯。</p><p>PS.发这篇文章真的无语，hexo又抽了，下午查问题查了半个多小时。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="http://www.allenmistake.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="碎碎念" scheme="http://www.allenmistake.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android中的轻量级存储————SharePreference</title>
    <link href="http://www.allenmistake.top/2019/09/28/sharepreference/"/>
    <id>http://www.allenmistake.top/2019/09/28/sharepreference/</id>
    <published>2019-09-28T08:07:18.000Z</published>
    <updated>2019-09-28T10:22:13.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SharePreference应用"><a href="#SharePreference应用" class="headerlink" title="SharePreference应用"></a>SharePreference应用</h2><p>在App中，需要暂时存储的，我们可以利用SharePreference，我们把存储的轻量级数据，例如一个字符串，一个数字，写入shared preferences。当我们需要数据，再从中读取</p><h2 id="何为-sharedPreference"><a href="#何为-sharedPreference" class="headerlink" title="何为 sharedPreference"></a>何为 sharedPreference</h2><p>shared preferences本质上就是文件系统中的文件，可使用SharedPreferences类读写它。<br>SharedPreferences实例用起来更像一个键值对仓库（类似于Bundle），但它可以通过<strong>持久化</strong>存储保存数据。（也就意味着应用关闭之后仍然有效）键值对中的键为字符串，而值是原子数据类型。进一步查看shared preferences文件可知，它们实际上是一种简单的 XML 文件，但SharedPreferences类已屏蔽了读写文件的实现细节。shared preferences文件保存在应用沙盒中，所以，不应用它保存类似密码这样的敏感信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/28/sharepreference/sp.png" alt="XML文件格式" title>                </div>                <div class="image-caption">XML文件格式</div>            </figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>请看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryPreferences</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREF_SEARCH_QUERY = <span class="string">"searchQuery"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStoredQuery</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PreferenceManager.getDefaultSharedPreferences(context)</span><br><span class="line">                .getString(PREF_SEARCH_QUERY, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setStoredQuery</span><span class="params">(Context context, String query)</span></span>&#123;</span><br><span class="line">        PreferenceManager.getDefaultSharedPreferences(context)</span><br><span class="line">                .edit()</span><br><span class="line">                .putString(PREF_SEARCH_QUERY, query)</span><br><span class="line">                .apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>QueryPreference 类中，我们定义了两个方法，分别用来存储信息和取出信息。由于我们存储的键值对只有一种，且维持一个，所以我们在类的一开始把 Key 固定。<br>值得注意的是，我们要传递上下文信息 Context ，只有找到自己 context对应的 SharedPrefernce 才可以找到与之对应的键值对。</p><p>需要补充的是，现在android原生库中的sharedPreference被官方标注为不推荐使用。具体原因其实是 扩展库中的 sharedPreference 支持更多的存储类型，可以看一下 Google 开发者在18年11月发布的一段<a href="https://www.youtube.com/watch?v=PS9jhuHECEQ" target="_blank" rel="noopener">新特性视频</a>其中介绍了关于扩展库中 sharedPreference 的特性。<br>我们选择 sharedPreference 时，引进扩展库 androidx 即可，函数逻辑基本一致</p><p>引进库代码：</p><p><code>javaimplementation &quot;androidx.preference:preference:1.1.0&quot;`</code></p><p>在build.gradle</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://www.allenmistake.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 线程下载 handle 使用分析</title>
    <link href="http://www.allenmistake.top/2019/09/21/handler/"/>
    <id>http://www.allenmistake.top/2019/09/21/handler/</id>
    <published>2019-09-21T07:40:46.000Z</published>
    <updated>2019-09-22T05:41:44.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从-AsyncTask-说起"><a href="#从-AsyncTask-说起" class="headerlink" title="从 AsyncTask 说起"></a>从 AsyncTask 说起</h2><p>在<a href="https://allenmistake.top/2019/09/17/httpurlconnection/" target="_blank" rel="noopener">Android网络库之HttpURLConnection与数据解析</a>我们提到了利用 AsyncTask 在后台运行耗时操作。</p><p>AsyncTask是执行后台线程的最简单方式，但它不适用于那些重复且长时间运行的任务。虽然耗时操作在后台运行，不会使系统崩溃，但是我们如果加载图片不能等它全都下载之后一起显示（内存占用也是一个问题）。</p><p>考虑到上面的问题，很多应用通常会选择仅在需要显示图片时才需要下载。</p><h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><p>Android系统中，线程使用的收件箱叫作消息队列（message queue）。使用消息队列的线程叫作消息循环（message loop）。消息循环会循环检查队列上是否有新消息。消息循环由线程和looper组成。Looper对象管理着线程的消息队列。主线程就是个消息循环，因此也拥有looper。主线程的所有工作都是由其looper完成的。looper不断从消息队列中抓取消息，然后完成消息指定的任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ThumbnailDownloader&lt;PhotoHolder&gt; mThumbnailDownloader;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setRetainInstance(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">new</span> FetchItemsTask().execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 HandlerThread</span></span><br><span class="line">    mThumbnailDownloader = <span class="keyword">new</span> ThumbnailDownloader&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化Looper</span></span><br><span class="line">    mThumbnailDownloader.start();</span><br><span class="line">    mThumbnailDownloader.getLooper();</span><br><span class="line">    Log.i(TAG, <span class="string">"Background thread started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">    mThumbnailDownloader.clearQueue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ThumbnailDownloader的 <code>getLooper()</code> 方法是在 <code>start()</code> 方法之后调用的。（稍后会学习更多有关Looper的知识）这能保证线程就绪，避免潜在竞争（尽管极少发生）。因为 <code>getLooper()</code> 方法能执行成功，说明 <code>onLooperPrepared()</code> 方法肯定早已完成。这样，queueThumbnail（）方法因Handler为空而调用失败的情况就能避免了。</li><li>在 <code>onDestroy()</code> 方法内调用 <code>quit()</code> 方法结束线程。这非常关键。如不终止 HandlerThread ，它会一直运行下去，成为僵尸。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull PhotoHolder photoHolder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    GalleryItem galleryItem = mGalleryItems.get(position);</span><br><span class="line">    Drawable placeholder = getResources().getDrawable(R.drawable.bill_up_close);</span><br><span class="line">    photoHolder.bindDrawable(placeholder);</span><br><span class="line">    <span class="comment">// 获取图片 url 传入，添加下载任务</span></span><br><span class="line">    mThumbnailDownloader.queueThumbnail(photoHolder, galleryItem.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handler、Looper、Message-结构分析"><a href="#Handler、Looper、Message-结构分析" class="headerlink" title="Handler、Looper、Message 结构分析"></a>Handler、Looper、Message 结构分析</h2><h3 id="剖析Message"><a href="#剖析Message" class="headerlink" title="剖析Message"></a>剖析Message</h3><p>Message需要自己定义三个变量，分别是</p><ul><li>What：用户定义的int型消息代码，用来描述消息</li><li>obj：用户指定，随消息发送的对象</li><li>target：处理消息的 Handler</li></ul><h3 id="剖析-Handler"><a href="#剖析-Handler" class="headerlink" title="剖析 Handler"></a>剖析 Handler</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/21/handler/handler1.png" alt="结构图" title>                </div>                <div class="image-caption">结构图</div>            </figure><p>作用：创建、发布、处理 Message</p><p>我们来说一下 Handler 使用时的流程，结合一下代码分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueThumbnail</span><span class="params">(T target, String url)</span></span>&#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"Got a URL: "</span>+url);</span><br><span class="line">    <span class="keyword">if</span>(url == <span class="keyword">null</span>)&#123;</span><br><span class="line">        mRequestMap.remove(target);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 使用一个标记下载请求的T类型作为key，</span></span><br><span class="line">        <span class="comment">// 我们可以存取和请求关联的URL下载链接</span></span><br><span class="line">        <span class="comment">// 这个标记对象是PhotoHolder， 下载结果就能很方便的发送给显示图片的UI元素</span></span><br><span class="line">        mRequestMap.put(target, url);</span><br><span class="line">        <span class="comment">// 将下载消息添加到后台线程的消息队列中</span></span><br><span class="line">        mRequestHandler.obtainMessage(MESSAGE_DOWNLOAD, target)</span><br><span class="line">            .sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们在obtainMessage(…)  方法获取消息，紧接着用让这个Message调用 sendToTarget() 方法将其发送给它的Handler，Handler 会将这个Message放置在 Looper 消息队列的尾部。</li><li>Looper 取得消息队列中的Message后，会将他发送给消息的目标Handler去处理。消息一般实在目标 Handler 的 Handler.handleMessage(…) 实现方法中进行处理的。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/21/handler/handler2.png" alt="Handler创建、发送Message" title>                </div>                <div class="image-caption">Handler创建、发送Message</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mRequestHandler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(@NonNull Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(msg.what == MESSAGE_DOWNLOAD)&#123;</span><br><span class="line">                T target = (T)msg.obj;</span><br><span class="line">                Log.i(TAG, <span class="string">"Got a request for URL: "</span> + mRequestMap.get(target));</span><br><span class="line">                <span class="comment">// 获取图片的耗时操作</span></span><br><span class="line">                handleRequest(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们是在 <code>onLooperPrepared()</code> 方法里实现 <code>Handler.handleMessage(...)</code> 方法的。HandlerThread.onLooperPrepared() 是在Looper首次检查消息队列之前调用，所以该方法是创建Handler实现的好地方。</p><p>在Handler.handleMessage(…)方法中，首先检查<strong>消息类型</strong>(what)，再获取<strong>obj</strong>值（T类型下载请求），然后将其传递给handleRequest(…)方法处理。（前面说过，队列中的下载消息取出并可以处理时，就会触发调用Handler.handleMessage(…)方法。handleRequest() 方法是下载执行的地方。在这里，确认URL有效后，就将它传递给FlickrFetchr新实例。确切地说，此处使用的是<a href="https://allenmistake.top/2019/09/17/httpurlconnection/" target="_blank" rel="noopener">Android网络库之HttpURLConnection与数据解析</a>中创建的FlickrFetchr.getUrlBytes(…)方法。</p><h3 id="传递-Handler"><a href="#传递-Handler" class="headerlink" title="传递 Handler"></a>传递 Handler</h3><p>我们使用 mRequestHandler，已经可以从主线程安排后台任务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/21/handler/handler3" alt="从主线程安排 ThumbnailDownloader 上的任务" title>                </div>                <div class="image-caption">从主线程安排 ThumbnailDownloader 上的任务</div>            </figure><p>反过来，也可以从后台线程使用与主线程关联的Handler，安排主线任务</p><p>![从ThumbnailDownloader线程上规划主线程任务]</p><p>主线程是一个拥有 handler 和 Looper 的消息循环。主线程上创建的 Handler 会自动与它的 Looper 相关联。主线程上创建的这个  Handler 也可以传递给另一线程。传递出去的 Handler 与创建它的线程 Looper 始终保持着联系。因此，已传出 Handler 负责处理的所有消息都将在主线程的消息队列中处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HandlerThread 文件</span></span><br><span class="line"><span class="comment">// 来自主线程的 Handler</span></span><br><span class="line"><span class="keyword">private</span> Handler mResponseHandler;</span><br><span class="line"><span class="keyword">private</span> ThumbnailDownloadListener&lt;T&gt; mThumbnailDownloadListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增监听器接口 响应下载请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThumbnailDownloadListener</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onThumbnailDownloaded</span><span class="params">(T target, Bitmap bitmap)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThumbnailDownloadListener</span><span class="params">(ThumbnailDownloadListener&lt;T&gt; listener)</span></span>&#123;</span><br><span class="line">    mThumbnailDownloadListener = listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThumbnailDownloader</span><span class="params">(Handler responseHandler)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(TAG);</span><br><span class="line">    mResponseHandler = responseHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程创建的Handler</span></span><br><span class="line">Handler responseHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">mThumbnailDownloader = <span class="keyword">new</span> ThumbnailDownloader&lt;&gt;(responseHandler);</span><br><span class="line">mThumbnailDownloader.setThumbnailDownloadListener(</span><br><span class="line">    <span class="keyword">new</span> ThumbnailDownloader.ThumbnailDownloadListener&lt;PhotoHolder&gt;() &#123;</span><br><span class="line">        <span class="comment">// 实现接口中的抽象方法，来更新UI</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onThumbnailDownloaded</span><span class="params">(PhotoHolder photoHolder, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">            Drawable drawable = <span class="keyword">new</span> BitmapDrawable(getResources(), bitmap);</span><br><span class="line">            photoHolder.bindDrawable(drawable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>那么就有一个疑问了，如果在这里面更新UI，那么在PhotoAdapter中的 <code>onBindViewHolder()</code> 中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mThumbnailDownloader.queueThumbnail(photoHolder, galleryItem.getUrl());</span><br></pre></td></tr></table></figure><p>是什么用途呢？</p><p>其实显而易见 <code>queueThumbnail()</code> 方法的作用是向消息队列中添加下载请求，而下载之后负责更新UI是利用在主线程创建的 mResponseHandler 处理的。</p><p>说回正题，现在，通过mResponseHandler，ThumbnailDownloader能够使用与主线程 Looper 绑定的 Handler。同时，还有ThumbnailDownloadListener 使用返回的 Bitmap 执行UI更新操作。具体来说，就是通过 onThumbnailDownloaded 实现，使用新下载的 Bitmap 来设置 PhotoHolder 的 Drawable。</p><p>我们在 handleRequest 方法中添加下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mResponseHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mRequestMap.get(target) != url || mHasQuit)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mRequestMap.remove(target);</span><br><span class="line">        mThumbnailDownloadListener.onThumbnailDownloaded(target, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Message设有回调方法属性后，取出队列的消息是不会发给target Handler的。相反，存储在回调方法中的 Runnable 的 <code>run()</code> 方法会直接执行。</p><p>那么上述代码有什么作用呢？</p><ul><li>首先，它再次检查 requestMap。这很有必要，因为 RecyclerView 会循环使用其视图。在ThumbnailDownloader下载完成 Bitmap 之后，RecyclerView可能循环使用了 PhotoHolder 并相应请求了一个不同的URL。该检查可保证每个PhotoHolder都能获取到正确的图片，即使中间发生了其他请求也无妨。</li><li>接下来，检查mHasQuit值。如果ThumbnailDownloader已经退出，运行任何回调方法可能都不太安全。</li><li>最后，从requestMap中删除配对的PhotoHolder-URL，然后将位图设置到目标PhotoHolder上。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，我们做一个流程总结，当然，很多细节我没有写在里面，例如mResponse的监听器接口、清理队列、处理完一个Handler之后在Map中删除相应的target，仅供参考。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/21/handler/handler5.png" alt="流程总结" title>                </div>                <div class="image-caption">流程总结</div>            </figure><p>之后会从源码的角度继续分析Android的Handler机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="线程" scheme="http://www.allenmistake.top/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>这应该是我的博客里面讲网络最详细的一篇</title>
    <link href="http://www.allenmistake.top/2019/09/18/net/"/>
    <id>http://www.allenmistake.top/2019/09/18/net/</id>
    <published>2019-09-18T12:42:31.000Z</published>
    <updated>2019-09-19T01:59:21.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一直想写一篇关于计算机网络的总结，这次算是实现了，肯定不会一次性写完， 我会不定期的更新， 感兴趣的朋友可以持续关注一下。</p><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><h3 id="七层模型（从下到上排序）"><a href="#七层模型（从下到上排序）" class="headerlink" title="七层模型（从下到上排序）"></a>七层模型（从下到上排序）</h3><ul><li><p><strong>物理层</strong></p><p>  建立、维护、断开物理连接</p></li><li><p><strong>数据链路层</strong>  </p><p>  建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</p></li><li><p><strong>网络层</strong></p><p>  进行逻辑地址寻址，实现不同网络之间的路径选择。<br>  我们熟悉的 IP 协议，还有 ARP、ICMP都是在这一层</p></li><li><p><strong>传输层</strong></p><p>  定义传输数据的协议端口号，以及流控和差错校验。<br>  最著名的就是TCP、UDP</p></li><li><p><strong>会话层</strong></p><p>  建立、管理、终止会话。</p></li><li><p><strong>表示层</strong></p><p>  数据的表示、安全、压缩</p></li><li><p><strong>应用层</strong></p><p>  网络服务的用户的接口。直接与用户相连。日常使用的HTTP、HTTPS都是在这一层。</p></li></ul><h3 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h3><p>我们重点了解现在的五层模型，在七层模型的基础上，将数据链路层和物理层合并为网络接口层，应用层、表示层、会话层合并为应用层。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/18/net/mod.png" alt="HTTP协议传输时报文内容结构变化" title>                </div>                <div class="image-caption">HTTP协议传输时报文内容结构变化</div>            </figure><p>下面我们专门说几个重点的层级、协议</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>这一层其实没什么可说的， 他们把上一层（网络层）数据报加头和尾，封装成帧， 其中包含源 MAC 地址 和目的 MAC 地址。<br>这里的差错控制方式基本没有，只有差错检验(CRC)， 那么数据链路层是怎么知道目的地址的 MAC 地址呢？<br>这就要说到网络层的 ARP 和 RARP 协议</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="ARP-和-RARP协议"><a href="#ARP-和-RARP协议" class="headerlink" title="ARP 和 RARP协议"></a>ARP 和 RARP协议</h3><p>ARP（地址解析）协议是一种解析协议，本来主机是完全不知道这个IP对应的是哪个主机的哪个接口，当主机要发送一个IP包的时候，会首先查一下自己的ARP高速缓存（就是一个IP-MAC地址对应表缓存）。</p><p>如果查询的IP-MAC值对不存在，那么主机就向网络发送一个ARP协议广播包，这个广播包里面就有待查询的IP地址，而直接收到这份广播的包的所有主机都会查询自己的IP地址。如果收到广播包的某一个主机发现自己符合条件，那么就准备好一个包含自己的MAC地址的ARP包传送给发送ARP广播的主机。</p><p>而广播主机拿到ARP包后会更新自己的ARP缓存（就是存放IP-MAC对应表的地方）。发送广播的主机就会用新的ARP缓存数据准备好数据链路层的的数据包发送工作。</p><p>RARP协议的工作与此相反，不做赘述。</p><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><p>注意，IP 是不可靠传输协议，他并没有提供数据传达以后的差错控制机制。</p><h3 id="TCP、UDP"><a href="#TCP、UDP" class="headerlink" title="TCP、UDP"></a>TCP、UDP</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/18/net/tcpudp.bmp" alt="TCP、UDP" title>                </div>                <div class="image-caption">TCP、UDP</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/18/net/协议.jpg" alt="TCP、UDP相应应用层协议" title>                </div>                <div class="image-caption">TCP、UDP相应应用层协议</div>            </figure><p>什么时候应该使用TCP？<br>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。</p><p>什么时候应该使用UDP？<br>当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。<br>例如：QQ电话、QQ视频</p><h2 id="TCP连接的建立与终止"><a href="#TCP连接的建立与终止" class="headerlink" title="TCP连接的建立与终止"></a>TCP连接的建立与终止</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ol><li>客户端 - &gt; 服务端 （SYN = 1， Seq = X）</li><li>服务端 - &gt; 客户端 （SYN = 1, ACK = X + 1, Seq = Y）</li><li>客户端 - &gt; 服务端 （ACK = Y + 1, Seq = Z）</li></ol><p><strong>为什么要三次握手？</strong><br>如果有消息在传输的过程中由于某些原因没有及时传到服务端，等到在传到服务端的时候，服务端已经不需要了，但是此时接收到过期消息的服务端仍然认为这是一个请求建立连接的报文，那么他就会向客户端发送一个确认连接（第二次握手），如果仅有两次握手，此时连接建立，而客户端并没有消息传入服务端，（本来就是服务端自作多情嘛），那么服务端就会一直变为等待消息传入状态，造成资源浪费。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ol><li>主动方 - &gt;  被动方（Fin = 1，ACK = Z Seq = X）</li><li>被动方 - &gt; 主动方 （ACK = X + 1, Seq = Z）</li><li>被动方 - &gt; 主动方 （Fin = 1， ACK = X, Seq = Y）</li><li>主动方 - &gt; 被动方 （ACK = Y, Seq = X）</li></ol><p>关于四次挥手，我本人是比较生疏的，所以这里我分别解释一下4次挥手的含义</p><ol><li>主动方表示：我没有数据要发给你了 进入FIN_WAIT_1状态</li><li>被动方表示：我同意了，稍等 主动方收到之后，进入FIN_WAIT_2状态（半连接，等待被动方忙完手头工作）</li><li>被动方表示：关闭连接吧 被动方正式进入LAST_ACK状态 主动方进入</li><li>主动方表示：好的 主动方进入 TIME_WAIT状态， 被动方接收之后关闭连接，主动方等2MSL之后没有收到回复，也关闭连接</li></ol><p>为什么要进行四次挥手呢？<br>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双<br>工模式，也就是你传给我的同时我也可以传给你。这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机<br>1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><h2 id="Http请求和响应"><a href="#Http请求和响应" class="headerlink" title="Http请求和响应"></a>Http请求和响应</h2><p>（未完待续）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.allenmistake.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机网络" scheme="http://www.allenmistake.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Android网络库之HttpURLConnection与数据解析</title>
    <link href="http://www.allenmistake.top/2019/09/17/httpurlconnection/"/>
    <id>http://www.allenmistake.top/2019/09/17/httpurlconnection/</id>
    <published>2019-09-17T10:13:06.000Z</published>
    <updated>2019-09-19T15:18:27.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网络连接基本"><a href="#网络连接基本" class="headerlink" title="网络连接基本"></a>网络连接基本</h2><p>对于 Android 中的网络问题， 我们要着重学习其中的工作原理，这篇文章主要来说一说 Android 自己的库中，是怎样利用 Http 协议请求数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getUrlBytes(String urlSpec) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(urlSpec);</span><br><span class="line">    HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        InputStream in = connection.getInputStream();</span><br><span class="line">        <span class="keyword">if</span>(connection.getResponseCode() != HttpURLConnection.HTTP_OK)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(connection.getResponseMessage() +</span><br><span class="line">                    <span class="string">":with "</span> +</span><br><span class="line">                    urlSpec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((bytesRead = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        connection.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getUrlBytes（String）方法能从指定URL获取原始数据并返回一个字节流数组。getUrlString<br>（String）方法则将getUrlBytes（String）方法返回的结果转换为String。</p><p> 在 getUrlBytes( String ) 方法中，首先<strong>根据传入的字符串参数</strong>，如 <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> （顺带提一句，http后面的s时一定要加的），<strong>创建一个 URL对象</strong>。然后调用 openConnection() 方法创建一个<strong>指向要访问URL的连接对象</strong>。URL.openConnection() 方法默认返回的是 URLConnection 对象， 但要链接的是http URL， 因此需将其强制类型转换为 HttpURLConnection 对象。这让我们得以调用他的 <code>getInputStream()</code> 、<code>getResponseCode()</code> 方法。</p><p>虽然 HttpURLConnection 对象提供了一个连接欸， 但只有调用 getInputStream() 方法时（如果是 POST 请求， 则调用 getOutputStream() 方法）， 它才会真正连接到指定的URL地址，才会给你反馈代码。</p><h2 id="AsyncTask-在后台线程上运行代码"><a href="#AsyncTask-在后台线程上运行代码" class="headerlink" title="AsyncTask 在后台线程上运行代码"></a>AsyncTask 在后台线程上运行代码</h2><p>首先在主程序中创建一个内部类来声明 AsyncTask 工具类，定义自己要在线程中做什么耗时操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FetchItemsTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String result = <span class="keyword">new</span> FlickrFetchr().getUrlString(<span class="string">"https://www.baidu.com"</span>); </span><br><span class="line">            Log.i(TAG,<span class="string">"Fetched contents of URL:"</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException ioe)&#123;</span><br><span class="line">            Log.e(TAG,<span class="string">"Failed to fetch URL:"</span>, ioe);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，我们在 fragnment 主程序中调用 让AsyncTask在后台运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setRetainInstance(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">new</span> FetchItemsTask().execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>execute()</code> 方法会启动 AsyncTask， 进而触发后台线程并调用 <code>doInBackground(...)</code>方法。</p><h2 id="Android中的线程"><a href="#Android中的线程" class="headerlink" title="Android中的线程"></a>Android中的线程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/17/httpurlconnection/线程.png" alt="Android中的线程" title>                </div>                <div class="image-caption">Android中的线程</div>            </figure><p>关于线程的详细说明，会在下一篇中展开介绍，JSON解析有待补充</p><h2 id="网络中-JSON-解析"><a href="#网络中-JSON-解析" class="headerlink" title="网络中 JSON 解析"></a>网络中 JSON 解析</h2><p>当浏览器向服务器请求数据时，成功之后服务器会返回数据，这个数据的格式多种多样，其中有XML，HTML，JSON，在这里面我们用 JSON 举个例子。请看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;GalleryItem&gt; <span class="title">fetchItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;GalleryItem&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        String url = Uri.parse(<span class="string">"https://api.flickr.com/services/rest/"</span>)</span><br><span class="line">                .buildUpon()</span><br><span class="line">                .appendQueryParameter(<span class="string">"method"</span>, <span class="string">"flickr.photos.getRecent"</span>)</span><br><span class="line">                .appendQueryParameter(<span class="string">"api_key"</span>, API_KEY)</span><br><span class="line">                .appendQueryParameter(<span class="string">"format"</span>, <span class="string">"json"</span>)</span><br><span class="line">                .appendQueryParameter(<span class="string">"nojsoncallback"</span>, <span class="string">"1"</span>)</span><br><span class="line">                .appendQueryParameter(<span class="string">"extras"</span>, <span class="string">"url_s"</span>)</span><br><span class="line">                .build().toString();</span><br><span class="line">        String jsonString = getUrlString(url);</span><br><span class="line">        Log.i(TAG, <span class="string">"Received JSON: "</span> + jsonString);</span><br><span class="line">        JSONObject jsonBody = <span class="keyword">new</span> JSONObject(jsonString);</span><br><span class="line">        parseItems(items, jsonBody);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException ioe)&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Failed to fetch items？？？"</span>, ioe);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException je) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Failed to parse"</span>, je);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从程序上来看，我们首先构建了请求URL，随后 <code>getURLString()</code> 来获取返回的数据，官方的API中含有getRecent方法， 我们首先指定请求的具体方法，然后输入ID来获取请求资格， 注意，有些网页默认返回 XML 格式数据，我们需要指定 format 为 json。</p><p>当然，我们现在获取的 JSON 是乱糟糟的一坨，我们需要从这里面找到我们真正需要的数据，请看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将读到的json分name解析</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseItems</span><span class="params">(List&lt;GalleryItem&gt; items, JSONObject jsonBody)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, JSONException</span>&#123;</span><br><span class="line">    <span class="comment">// 通过JSON解析，注意JSON获取的是对象树结构，详细结构参考下图</span></span><br><span class="line">    JSONObject photosJsonObject = jsonBody.getJSONObject(<span class="string">"photos"</span>);</span><br><span class="line">    JSONArray photoJsonArray = photosJsonObject.getJSONArray(<span class="string">"photo"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; photoJsonArray.length(); i++)&#123;</span><br><span class="line">        <span class="comment">// 获取JSONArray中每一个成员，加入List</span></span><br><span class="line">        JSONObject photoJsonObject = photoJsonArray.getJSONObject(i);</span><br><span class="line"></span><br><span class="line">        GalleryItem item = <span class="keyword">new</span> GalleryItem();</span><br><span class="line">        item.setId(photoJsonObject.getString(<span class="string">"id"</span>));</span><br><span class="line">        item.setCaption(photoJsonObject.getString(<span class="string">"title"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!photoJsonObject.has(<span class="string">"url_s"</span>))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        item.setUrl(photoJsonObject.getString(<span class="string">"url_s"</span>));</span><br><span class="line">        items.add(item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/09/17/httpurlconnection/json解析.png" alt="JSON数据解析过程" title>                </div>                <div class="image-caption">JSON数据解析过程</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络" scheme="http://www.allenmistake.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>多种多样的单例模式</title>
    <link href="http://www.allenmistake.top/2019/09/15/singleton/"/>
    <id>http://www.allenmistake.top/2019/09/15/singleton/</id>
    <published>2019-09-15T15:59:54.000Z</published>
    <updated>2019-10-27T13:49:21.964Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>特点：基于类加载机制， 避免了多线程的同步问题，在类加载时期就已经生成。所以必定只有唯一一个。同时会降低类加载速度，而且如果这个实例不会被使用，会造成内存浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式（线程不安全）"><a href="#懒汉模式（线程不安全）" class="headerlink" title="懒汉模式（线程不安全）"></a>懒汉模式（线程不安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">Singketon</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式（线程安全）"><a href="#懒汉模式（线程安全）" class="headerlink" title="懒汉模式（线程安全）"></a>懒汉模式（线程安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双重检查模式（DCL）"><a href="#双重检查模式（DCL）" class="headerlink" title="双重检查模式（DCL）"></a>双重检查模式（DCL）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>特点：首先我们要明确一点，类加载的时候，外部类中的静态内部类是不会被加载的，只有在被调用的时候才会被加载。<br>这也是静态内部类方法区别于饿汉模式的地方。只有在 <code>getInstance()</code> 方法被调用后，才会产生实例，且唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>整个项目需要一个共享访问点或共享数据</li><li>创建一个对象需要消耗的资源过多， 比如访问 I/O 或者数据库等资源。</li><li>工具类对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.allenmistake.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>九月的前奏</title>
    <link href="http://www.allenmistake.top/2019/09/02/monthlysummary/"/>
    <id>http://www.allenmistake.top/2019/09/02/monthlysummary/</id>
    <published>2019-09-02T03:04:41.000Z</published>
    <updated>2019-09-02T02:08:51.144Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我发现hexo博客部署真的有太多问题，最近又出现了很多之前没有出现过的小毛病，虽说不是致命问题，但也是很恶心。</p><p>所以考虑之后还是转到CSDN里面，尽管广告界面杂乱，但好在部署方便，这二者未来要好好权衡一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ListView的优化、与RecyclerView简单对比</title>
    <link href="http://www.allenmistake.top/2019/08/22/listview-vs-recyclerview/"/>
    <id>http://www.allenmistake.top/2019/08/22/listview-vs-recyclerview/</id>
    <published>2019-08-22T14:15:17.000Z</published>
    <updated>2019-08-23T03:19:20.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从逐渐被弱化的ListView说起"><a href="#从逐渐被弱化的ListView说起" class="headerlink" title="从逐渐被弱化的ListView说起"></a>从逐渐被弱化的ListView说起</h2><p>说到ListView，它曾经是Android UI开发中用的最多的组件之一，直到现在，很多应用还是用的ListView结构，但是现在逐渐被 androidx 中的 RecyclerView 所取代。</p><p>ListView的布局是自己实现的，</p><h2 id="使用ViewHolder提高运行效率"><a href="#使用ViewHolder提高运行效率" class="headerlink" title="使用ViewHolder提高运行效率"></a>使用ViewHolder提高运行效率</h2><p>ViewHolder 模式是提高 ListView 效率的一个很重要的方法。 ViewHolder 模式充分利用了 ListView 的视图缓存机制，避免了每次在调用 getView() 都通过 findViewById() 实例化控件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position，View convertView，ViewGroup parent)</span></span>&#123;</span><br><span class="line">    Fruit fruit = getItem(position);</span><br><span class="line">    View view;</span><br><span class="line">    ViewHolder viewHolder;</span><br><span class="line">    <span class="keyword">if</span>(convertView == <span class="keyword">null</span>&#123;</span><br><span class="line">        view = LayoutInflater.from(getContext()).inflate(resourceId，parent，<span class="keyword">false</span>);</span><br><span class="line">        viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">        viewHolder.fruitImage=(ImageViewview.findViewById(R.id.fruit_image);</span><br><span class="line">        viewHolder.fruitName=(TextViewview.findViewById(R.id.fruit_name);</span><br><span class="line">        view.setTag(viewHolder);</span><br><span class="line">    <span class="comment">//将 ViewHolder存储在View中</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        view = convertView;</span><br><span class="line">        <span class="comment">//通过Tag找到缓存的布局</span></span><br><span class="line">        viewHolder = (ViewHolder)view.getTag());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新获取ViewHolder viewHolder.fruitImage.setImageResource(fruit.getImageId(;</span></span><br><span class="line">    viewHolder.fruitName.setText(fruit.getName());</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="孰优孰劣"><a href="#孰优孰劣" class="headerlink" title="孰优孰劣"></a>孰优孰劣</h2><p>在谷歌建议使用recyclerView的现在，为什么我们还在这里讨论孰优孰劣呢？</p><p>那么我们就先看看两个组件的优缺点：</p><p>ListView：<br><strong>优点</strong>：</p><ul><li>轻量级，当 view 只提供显示功能的话，代码简单。<br><strong>缺点</strong>：</li><li>实现功能相对有限，如果对于子view有更多功能要求的话，代码复杂。</li><li>只能纵向滑动，实现横向滑动代码复杂。</li><li>性能较差，需要自己改善代码，避免内存泄露。</li></ul><p>RecyclerView<br><strong>优点</strong>：</p><ul><li>集成多个接口，功能强大。</li><li>由于交给LayoutManager，可实现各种滑动方向。</li><li>有完善的回收机制。<br><strong>缺点</strong>：</li><li>重量级，实现简单功能代码量较大。</li></ul><p>所以说，对于一些功能简单的应用程序来说，ListView已经足够用了。例如现在微信中的卡券，由于没有实现复杂的动画以及其他事件，用ListView是刚好合适的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Fragment间数据传递</title>
    <link href="http://www.allenmistake.top/2019/08/16/fragmentdata/"/>
    <id>http://www.allenmistake.top/2019/08/16/fragmentdata/</id>
    <published>2019-08-16T09:19:52.000Z</published>
    <updated>2019-08-16T13:13:44.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目中的逻辑结构图"><a href="#项目中的逻辑结构图" class="headerlink" title="项目中的逻辑结构图"></a>项目中的逻辑结构图</h2><p><img src="/2019/08/16/fragmentdata/对话.png" alt="CrimeFragment 和 DatePickerFragment间的对话"></p><p>主要思想：</p><ul><li>要传递crime 的日期给DatePickerFragment，需新建一个newInstance(Date)方法，然后将Date作为 argument 附加给 fragment。</li><li>要将新日期返回给CrimeFragment， 并更新模型层以及对应的视图，需将日期打包为extra并附加到Intent，然后调用CrimeFragment.onActivityResult(…)方法，并传入准备好的Intent参数</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/16/fragmentdata/事件流.png" alt="CrimeFragment 和 DatePickerFragment间的事件流" title>                </div>                <div class="image-caption">CrimeFragment 和 DatePickerFragment间的事件流</div>            </figure><h2 id="argument回顾"><a href="#argument回顾" class="headerlink" title="argument回顾"></a>argument回顾</h2><p>在之前Activity 和 Fragment 传值的过程中，我们使用了 Argument，下面我们回顾一下我们是如何使用它的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/16/fragmentdata/args.png" alt="Argument使用" title>                </div>                <div class="image-caption">Argument使用</div>            </figure><p>为满足以上要求，通常添加名为 newInstance() 的静态方法给 Fragment类。使用该方法，完成fragment实例及Bundle对象的创建，然后将argument 放入bundle中，最后附加给fragment。</p><p>托管activity需要fragment实例时，转而调用newInstance() 方法，而非直接调用其构造函数。并且，为满足fragment创建argument的要求，activity可给newInstance()传入任何需要的参数</p><h2 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h2><p>那么，fragment之间传值同样也需要借助argument</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DatePickerFragment 中的 newInstance 方法，返回一个DPF实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatePickerFragment <span class="title">newInstance</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">    args.putSerializable(ARG_DATE, date);</span><br><span class="line">    DatePickerFragment fragment = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">    fragment.setArguments(args);</span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，与之对应，在 CrimeFragment 中创建 dialog 语句也要改成调用 newInstance 的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CrimeFragment 中点击事件开启DatePickerFragment</span></span><br><span class="line">DatePickerFragment dialog = DatePickerFragment.newInstance(mCrime.getDate());</span><br></pre></td></tr></table></figure><p>另外，这里的Date不能直接被 DatePickerFragment 所识别，我们需要对 DatePickerFragment 所接收到的 Date 进行处理，当然这不是重点，这里不展开。</p><h2 id="返回更新数据"><a href="#返回更新数据" class="headerlink" title="返回更新数据"></a>返回更新数据</h2><p>首先，我们要弄清这两个fragment之间的关系。如果是activity的数据回传，我们调用startActivityForResult(…)方法，ActivityManager负责跟踪管理activity父子关系。回传数据后，子activity被销毁，但ActivityManager知道接收数据是哪个activity。</p><h3 id="设置目标fragment-关联"><a href="#设置目标fragment-关联" class="headerlink" title="设置目标fragment(关联)"></a>设置目标fragment(关联)</h3><p>可将CrimeFragment设置成DatePickerFragment的Target fragment。<br>这样，在CrimeFragment 和 DatePickerFragment 被销毁并重建后，操作系统会重新关联他们。调用以下方法可建立这种关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetFragment</span><span class="params">(Fragment fragment, <span class="keyword">int</span> requestCode)</span></span></span><br></pre></td></tr></table></figure><p>在CrimeFragment 中，创建请求代码常量，然后将CrimeFragment设为DatePickerFragment 实例的目标fragment<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_DATE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在onCreatView中设置按钮监听器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        FragmentManager manager = getFragmentManager();</span><br><span class="line">        DatePickerFragment dialog = DatePickerFragment.newInstance(mCrime.getDate());</span><br><span class="line">        dialog.setTargetFragment(CrimeFragment.<span class="keyword">this</span>, REQUEST_DATE);</span><br><span class="line">        dialog.show(manager, DIALOG_DATE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="传递数据给目标fragment-传值"><a href="#传递数据给目标fragment-传值" class="headerlink" title="传递数据给目标fragment(传值)"></a>传递数据给目标fragment(传值)</h3><p>处理有同一个activity托管的两个fragment之间的数据返回时，可借用Fragment.onActivityResult(…)方法。因此，直接调用目标fragment的Fragment.onActivityResult(…)方法，就能实现数据回传。需要以下信息：</p><ul><li>请求代码：与传入 setTargetFragment(…) 方法的代码相匹配，告诉目标 fragment 返回结果来自哪里</li><li>结果代码：决定下一步该采取什么行动</li><li>Intent：包含extra数据</li></ul><p>我们来看一下具体怎么做的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.example.criminalintent.date"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getTargetFragment() == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(EXTRA_DATE, date);</span><br><span class="line"></span><br><span class="line">    getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，我们将 DatePickerFragment 的确定按钮点击事件修改为调用sendResult(…)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">    .setView(v)</span><br><span class="line">    .setTitle(R.string.date_picker_title)</span><br><span class="line">    .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">            <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">            <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">            Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day).getTime();</span><br><span class="line">            sendResult(Activity.RESULT_OK, date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>最后，在CrimeFragment接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(resultCode != Activity.RESULT_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(requestCode == REQUEST_DATE)&#123;</span><br><span class="line">        Date date = (Date)data.getSerializableExtra(DatePickerFragment.EXTRA_DATE);</span><br><span class="line">        mCrime.setDate(date);</span><br><span class="line">        updateDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mDateButton.setText(mCrime.getDateStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈 ViewPager 使用方法与原理</title>
    <link href="http://www.allenmistake.top/2019/08/15/viewpager/"/>
    <id>http://www.allenmistake.top/2019/08/15/viewpager/</id>
    <published>2019-08-15T12:41:03.000Z</published>
    <updated>2019-08-20T07:00:48.068Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从功能说起"><a href="#从功能说起" class="headerlink" title="从功能说起"></a>从功能说起</h2><p>ViewPager 是什么？是一种布局结构，并且还是一个类。<br>当为UI添加ViewPager后，用户可左右滑动屏幕，切换查看不同列表项的明细页面。</p><h2 id="需要做哪些工作"><a href="#需要做哪些工作" class="headerlink" title="需要做哪些工作"></a>需要做哪些工作</h2><p>为了添加ViewPager具体功能实现，我们要做以下工作：</p><ul><li>创建 Activity 实例，这个 Activity 里来存放 ViewPager 视图</li><li>定义包含 ViewPager 的视图层级结构</li><li>在 Activity 类中关联使用 ViewPager 以及 Adapter</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/15/viewpager/结构.png" alt="项目中MVC层级结构" title>                </div>                <div class="image-caption">项目中MVC层级结构</div>            </figure><p>通过这个结构图我们可以看出，通过点击事件 CrimeListFragment 来启动 CrimePagerActivity ，并且CrimePagerActivity 中包含了一个 ViewPager</p><h2 id="PagerAdapter"><a href="#PagerAdapter" class="headerlink" title="PagerAdapter"></a>PagerAdapter</h2><p>ViewPager 需要 PagerAdapter 的支持， Google提供了PagerAdapter的子类FragmentStatePaferAdapter ，它能协助处理许多事情。如下面代码所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">mViewPager.setAdapter(<span class="keyword">new</span> FragmentStatePagerAdapter(fragmentManager) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Crime crime = mCrimes.get(position);</span><br><span class="line">        <span class="keyword">return</span> CrimeFragment.newInstance(crime.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCrimes.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>FragmentStatePagerAdapter 提供了两个有用的方法，我们必须进行方法覆盖</p><ul><li><code>getItem(int)</code> 获取并显示crime 数组中指定位置的Crime时，他会返回配置过得CrimeFragment来显示指定的Crime</li><li><code>getCount()</code> 返回数组列表中包含的列表项数目</li></ul><p>注意，创建FragmentStatePagerAdapter实例需要FragmentManager</p><h2 id="FragmentStatePagerAdapter-与FragmentPagerAdapter"><a href="#FragmentStatePagerAdapter-与FragmentPagerAdapter" class="headerlink" title="FragmentStatePagerAdapter 与FragmentPagerAdapter"></a>FragmentStatePagerAdapter 与FragmentPagerAdapter</h2><ul><li>区别：前者在滑动过后，调用 remove() 方法将 fragment 移除。而后者不会移除，只是销毁了视图，fragment 实例还保存在 FragmentManager 中。</li><li>应用：由此看来，后者会占用大量内存来换取加载速度，所以前者在大容量 fragment 的情况下，例如每个 fragment 都是一个高清图片且数量上百上千，那么适合用前者。如果数量少或者比较重视响应or加载速度，建议用后者，加载速度快。</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="为何不用RecyclerView"><a href="#为何不用RecyclerView" class="headerlink" title="为何不用RecyclerView"></a>为何不用RecyclerView</h3><p>上一篇博客提到，RecyclerView也可以提供横着翻的实例，为什么不用它呢？</p><p>由于无法使用现有的fragment， 因此在 CriminalIntent 应用中使用 RecyclerView 需处理大量内部实现工作。Adapter 需要我们及时地提供View。然而，决定 fragment 视图何时创建的是 FragmentManager 。因此， 当RecyclerView 要求Adapter提供fragment视图时，我们无法立即创建fragment并提供视图。<br>所以，核心的区别在于Adapter和PagerAdapter的区别。</p><h3 id="PagerAdapter-1"><a href="#PagerAdapter-1" class="headerlink" title="PagerAdapter"></a>PagerAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span></span></span><br></pre></td></tr></table></figure><p>PagerAdapter.instantiateItem告诉pager adapter创建指定位置的列表项视图， 然后将其添加给ViewGroup视图容器， 而destroyItem告诉pager adapter销毁已建视图。<br>视图创建完成之后，ViewPager会在某个时间点看到它。未确定该视图所属对象， ViewPager会调用isViewFromObject，这里的Obj是instantiateItem返回的对象。因此假设ViewPager调用instantiateItem(ViewGroup, 5)返回A对象，那么只要传入的View参数是第5个对象的视图，isViewFromObject(View, A)方法就应该返回true，否则返回false。</p><p>当然，以上这些其实都封装在了FragemntPagerAdapter和FragemntStatePagerAdapter 中，当我们使用的时候并不需要具体实现。</p><p>(2019-8-20更新)<br>注意：这里面 FragmentStatePagerAdapter 并不是绝对的退出视野就调用 destoryItem ,当我在Android 模拟器里观察内部调用机制时，我们发现pagerAdapter会保留三个视图，当前视图，上一个视图和下一个视图，猜测是方便加载。举个例子，当我们从第二个视图跳转到第一个视图时，并不会调用 <code>creatItem()</code>，因为 3 -&gt; 2 时已经预先创建了 1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView基础</title>
    <link href="http://www.allenmistake.top/2019/08/13/recyclerview/"/>
    <id>http://www.allenmistake.top/2019/08/13/recyclerview/</id>
    <published>2019-08-13T12:45:50.000Z</published>
    <updated>2019-08-16T08:21:58.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RecyclerView、ViewHolder和Adapter"><a href="#RecyclerView、ViewHolder和Adapter" class="headerlink" title="RecyclerView、ViewHolder和Adapter"></a>RecyclerView、ViewHolder和Adapter</h2><p>首先，我们要明确这三个类各自的任务和逻辑结构。</p><p>RecyclerView 任务仅限于回收和定位屏幕上的 View ，RecyclerView 自身不会创建视图， 他通过 Adapter 创建。</p><p>Adapter 是一个控制器对象， 从模型层获取数据， 然后提供给 RecyclerView 显示，是沟通的桥梁。 他负责：</p><ol><li>创建必要的 ViewHolder</li><li>绑定 ViewHolder 至模型层数据<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/13/recyclerview/adapter.png" alt="Adpater 与 RecyclerView 之间的桥梁" title>                </div>                <div class="image-caption">Adpater 与 RecyclerView 之间的桥梁</div>            </figure></li></ol><p>ViewHolder 负责容纳 View 视图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/08/13/recyclerview/桥梁.png" alt="ViewHolder 配合 RecyclerView 使用" title>                </div>                <div class="image-caption">ViewHolder 配合 RecyclerView 使用</div>            </figure></p><h2 id="使用-RecyclerView"><a href="#使用-RecyclerView" class="headerlink" title="使用 RecyclerView"></a>使用 RecyclerView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mCrimeRecyclerView = view.findViewById(R.id.crime_recycler_view);</span><br><span class="line">mCrimeRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</span><br></pre></td></tr></table></figure><p>当我们创建一个 RecyclerView 时， 我们首先要对他进行布局加载， 更要注意的是托管给 LayoutManager。没有 LayoutManager 的支持， 不仅 RecyclerView 无法正常工作， 还会导致应用崩溃。这是为什么呢？实际上， RecyclerView 不会亲自摆放屏幕上的列表项， 摆放的任务委托给了 LayoutManager。 LayoutManager 还负责定义屏幕上的滚动行为（竖着滚还是横着滚等等） </p><h2 id="ViewHolder-显示视图"><a href="#ViewHolder-显示视图" class="headerlink" title="ViewHolder 显示视图"></a>ViewHolder 显示视图</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrimeHolder</span><span class="params">(LayoutInflater inflater, ViewGroup parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inflater.inflate(R.layout.list_item_crime, parent, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 CrimeHolder 的构造方法中， 我们首先实例化list_item_crime布局，然后传给 super 方法， 也就是 ViewHolder 的构造方法。 基类ViewHolder 因而实际引用这个视图。</p><h2 id="Adapter架起桥梁（绑定ViewHolder）"><a href="#Adapter架起桥梁（绑定ViewHolder）" class="headerlink" title="Adapter架起桥梁（绑定ViewHolder）"></a>Adapter架起桥梁（绑定ViewHolder）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">CrimeHolder</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;Crime&gt; mCrimes;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CrimeAdapter</span><span class="params">(List&lt;Crime&gt; crimes)</span></span>&#123;</span><br><span class="line">            mCrimes = crimes;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mCrimes.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CrimeHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            LayoutInflater layoutInflater = LayoutInflater.from(getActivity());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CrimeHolder(layoutInflater, parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull CrimeHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            Crime crime = mCrimes.get(position);</span><br><span class="line">            <span class="comment">//令每个ViewHolder绑定数据，具体bind函数略</span></span><br><span class="line">            holder.bind(crime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>RecyclerView 需要新的ViewHolder 来显示列表时，会调用 onCcreateViewHolder 方法。在这个方法内部， 我们创建一个 LayoutInflater， 然后用他创建 CrimeHolder。</p><p>CrimeAdapter 必须覆盖 onBindViewHolder 方法。<br>桥梁的具体过程：</p><ul><li>首先，调用 Adapter 的 getItemCount() 方法， RecyclerView 询问数组里列表中包含多少个对象。</li><li>接着，RecyclerView  调用 Adapter 的 onCreateViewHolder(ViewGroup, int) 方法创建 ViewHolder 及其要显示的视图。</li><li>最后，RecyclerView 会传入 ViewHolder 及其位置， 调用 onBindViewHolder(ViewHolder, int)方法。Adapter 会找到目标位置的数据并将其绑定到 ViewHolder 的视图上。所谓绑定，就是使用模型数据填充视图。</li></ul><h2 id="最后，别忘了关联-Adapter-和-RecyclerView"><a href="#最后，别忘了关联-Adapter-和-RecyclerView" class="headerlink" title="最后，别忘了关联 Adapter 和 RecyclerView"></a>最后，别忘了关联 Adapter 和 RecyclerView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CrimeLab crimeLab = CrimeLab.get(getActivity());</span><br><span class="line">        List&lt;Crime&gt; crimes = crimeLab.getCrimes();</span><br><span class="line">        mAdapter = <span class="keyword">new</span> CrimeAdapter(crimes);</span><br><span class="line">        <span class="comment">//将具体的 RecyclerView 和 Adapter 关联到一起</span></span><br><span class="line">        mCrimeRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://www.allenmistake.top/categories/Android/"/>
    
      <category term="Android基础" scheme="http://www.allenmistake.top/categories/Android/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>7月——踏上新征程</title>
    <link href="http://www.allenmistake.top/2019/07/03/newtrip/"/>
    <id>http://www.allenmistake.top/2019/07/03/newtrip/</id>
    <published>2019-07-03T12:53:35.000Z</published>
    <updated>2019-07-03T12:28:41.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="六月工作总结"><a href="#六月工作总结" class="headerlink" title="六月工作总结"></a>六月工作总结</h2><p>六月做的最有意义的事情就是尝试了 Flutter 这个新技术，与此同时也通过一件事明白了一个道理，这件事情有时间我会详细讲。不过首先就 Flutter 来讲：</p><ul><li>学习一种语言如何使用是很简单的，像 Flutter，学习怎么布局和添加组件时容易的，但是Flutter的渲染机制是怎么样的，你只知道是60FPS，但是她是怎么做到60FPS的，要做到知其然又要知其所以然。</li><li>项目很重要，但自己的理解同样重要，做一个简单的小项目不如花点时间把内核思想理解了，把源码看一看，把机制熟悉熟悉。</li><li>可以扩展到其他任何学习，Java、JVM、数据结构与算法，不能死记硬背，拿我们最常见的快排来说，不能只是背一下代码，更重要的是知道他的排序过程，做到根据过程知道代码怎么写。</li></ul><h2 id="七月展望"><a href="#七月展望" class="headerlink" title="七月展望"></a>七月展望</h2><ul><li>数据结构与算法</li><li>Java基础知识</li><li>做小项目来理解原理部分</li><li>并发何网络编程这块最好结合视频观看，有实战操作会好很多</li></ul><h2 id="其他感悟"><a href="#其他感悟" class="headerlink" title="其他感悟"></a>其他感悟</h2><p>电脑前些日子又坏了，最近重装了一下系统，配置环境越来越熟练了，这种老物件还是有点感情在里面的，希望他能陪我走完研究生旅程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>dart中的异步初级+获取firebase数据</title>
    <link href="http://www.allenmistake.top/2019/06/27/flutterapp4/"/>
    <id>http://www.allenmistake.top/2019/06/27/flutterapp4/</id>
    <published>2019-06-27T13:14:19.000Z</published>
    <updated>2019-06-27T12:17:22.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Dart是一个<strong>单线程</strong>的语言，遇到有延迟的运算（比如IO操作、延时执行）时，线程中按顺序执行的运算就会阻塞，用户就会感觉到卡顿，于是通常用异步处理来解决这个问题。当遇到有需要延迟的运算（async）时，将其放入到延迟运算的队列（await）中去，把不需要延迟运算的部分先执行掉，最后再来处理延迟运算的部分。和 Java 中的多线程不同，dart 采用的基于事件的异步模型。简单说就是在某个单线程中存在一个事件循环和一个事件队列，事件循环不断的从事件队列中取出事件来执行，因此，耗时事件不会阻塞整个事件循环，这让它后面的事件也会有机会得到执行。讲到这里，你想起来什么了么。对！Android 中的多线程 Handler/Looper 也是采取这个模式！</p><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><p>async 和 await 在项目中的耗时操作有很大应用空间，例如登陆等待操作、网络请求操作。下面我们利用官方文档来具体说明 async 的用途和具体执行流程</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; printDailyNewsDigest() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> newsDigest = <span class="keyword">await</span> gatherNewsReports();</span><br><span class="line">  <span class="built_in">print</span>(newsDigest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  printDailyNewsDigest();</span><br><span class="line">  printWinningLotteryNumbers();</span><br><span class="line">  printWeatherForecast();</span><br><span class="line">  printBaseballScore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printWinningLotteryNumbers() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Winning lotto numbers: [23, 63, 87, 26, 2]'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printWeatherForecast() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Tomorrow's forecast: 70F, sunny."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printBaseballScore() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Baseball score: Red Sox 10, Yankees 0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> news = <span class="string">'&lt;gathered news goes here&gt;'</span>;</span><br><span class="line"><span class="keyword">const</span> oneSecond = <span class="built_in">Duration</span>(seconds: <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Imagine that this function is more complex and slow. :)</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; gatherNewsReports() =&gt;</span><br><span class="line">    Future.delayed(oneSecond, () =&gt; news);</span><br></pre></td></tr></table></figure><p>其中，gatherNewsReport 执行耗时操作，如果不将这个函数进行异步处理，代码执行将会受到阻塞。当使用了异步处理之后，执行顺序如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/27/flutterapp4/async-await.png" alt="异步程序执行顺序" title>                </div>                <div class="image-caption">异步程序执行顺序</div>            </figure><p>可以看到，程序的执行顺序如下</p><ol><li>程序开始执行</li><li>main 函数同步执行 <code>printDailyNewsDigest()</code> 这个异步函数</li><li><code>printDailyNewsDigest()</code> 利用 await 关键词调用<code>gatherNewsReports()</code>耗时操作，并开始执行.</li><li><code>gatherNewsReports()</code> 函数返回一个未完成的 future (一个 <code>Future&lt;String&gt;</code> 实例).</li><li>因为 <code>printDailyNewsDigest()</code> 是一个异步函数并且正在 await 一个返回值, 他<strong>暂停执行</strong>并给调用它的main函数返回一个未完成的 future (在这个例子中, 是一个 <code>Future&lt;void&gt;</code> 实例)</li><li>剩余的 print 函数被执行，由于他们是同步的，每个函数都可以在下一个函数调用之前被完全执行. </li><li>当 <code>main()</code> 函数结束, 异步函数被重新执行. 首先, gatherNewsReports() 返回一个已经完成确定的future值(<code>Future&lt;String&gt;</code>). 随后 <code>printDailyNewsDigest()</code> 函数继续执行打印 news.</li><li>当 <code>printDailyNewsDigest()</code> 函数执行完毕, 给 main 函数返回的 future(<code>Future&lt;void&gt;</code>)也完成了, app 退出.</li></ol><p>关于异步的讨论，我们在这里先告一段落，之后会更详细的了解，现在只需要知道执行的顺序。下面我们来说一说 firebase。</p><h2 id="firebase"><a href="#firebase" class="headerlink" title="firebase"></a>firebase</h2><p>Firebase 让移动端应用具有访问后端服务的能力，包括鉴权、存储、数据库以及无服务器托管的服务。国内的话应该类似于 Bmob 系统，不过感觉 firebase 网络体验要差一些，毕竟谷歌的东西。</p><p>第一次配置firebase，首先要注册一个firebase账号，如果有的话直接登录就可以。接下来步骤依次是</p><ol><li>pubspec.yaml，添加 cloud_firestore 依赖包并保存（如果出现问题打开 <code>android/app/build.gradle</code>，然后找到 minSdkVersion 16 这一行，把这一行改为 minSdkVersion 21，并保存文件。）</li><li>在你的 Firebase console 中，点击 Add project，新建一个 Firebase 项目；</li><li>在 Flutter 项目目录中，打开文件 <code>android/app/src/main/AndroidManifest.xml</code>；在 manifest 中，找到 package 属性中的值，它代表的是 Android 的包名（类似于 com.yourcompany.yourproject 这样的）复制这个值；这个值填入 package name；</li><li>点击 Register App；在 Firebase 中按照里面的步骤下载 google-services.json 文件；回到 Flutter 应用目录，将 google-services.json（就是你刚刚下载的文件）放入到 android/app 目录中；</li><li>在 IDE 或者编辑器中，打开 android/app/build.gradle 文件，然后将下列这一行粘贴到文本中：</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.google.gms.google-services'</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>打开 android/build.gradle 文件，然后在里面的 buildscript 标签下，新增一个依赖：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      classpath <span class="string">'com.google.gms:google-services:3.2.1'</span>   <span class="comment">// new</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 cloud firestore 中添加自己的数据集</p></li></ol><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildBody(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> StreamBuilder&lt;QuerySnapshot&gt;(</span><br><span class="line">    stream: Firestore.instance.collection(<span class="string">'user'</span>).snapshots(),</span><br><span class="line">    builder: (context, snapshot) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!snapshot.hasData) </span><br><span class="line">        <span class="keyword">return</span> LinearProgressIndicator();</span><br><span class="line">      <span class="keyword">return</span> _buildList(context, snapshot.data.documents);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在这之前别忘了导入包。然后我们利用 <code>Firestore.instance.collection(&#39;user&#39;).snapshots()</code> 语句得到对应的数据集，即声明中的Collection，将这些文件传给snapshot</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取firebase数据</span></span><br><span class="line">DocumentSnapshot ds;</span><br><span class="line"><span class="built_in">List</span>&lt;DocumentSnapshot&gt; l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userMap = <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">l = snapshot.map((data) =&gt; ds = data).toList();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;l.length;i++)&#123;</span><br><span class="line">  record = Record.fromSnapshot(l[i]);</span><br><span class="line">  userMap.putIfAbsent(record.name, () =&gt; record.pw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们定义了DocumentSnapshot类型变量，随后核心代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = snapshot.map((data) =&gt; ds = data).toList();</span><br></pre></td></tr></table></figure><p>(data)相当于一个迭代器(这个语法查了半天才知道)，随后我们将snapshot中存储的DocumentSnapshot 转换为 List 类型，方便我们读取。<br>在此之前，我们要定义一个接受数据的类型，在我的项目里定义了一个 Record 类型，来存储 firestore 中的数据类型 userName 和 passWord，代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> pw;</span><br><span class="line">  <span class="keyword">final</span> DocumentReference reference;</span><br><span class="line">  Record.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="keyword">dynamic</span>&gt; map, &#123;<span class="keyword">this</span>.reference&#125;)</span><br><span class="line">      : <span class="keyword">assert</span>(map[<span class="string">'userName'</span>] != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">assert</span>(map[<span class="string">'passWord'</span>] != <span class="keyword">null</span>),</span><br><span class="line">        name = map[<span class="string">'userName'</span>],</span><br><span class="line">        pw = map[<span class="string">'passWord'</span>];</span><br><span class="line">  Record.fromSnapshot(DocumentSnapshot snapshot)</span><br><span class="line">      : <span class="keyword">this</span>.fromMap(snapshot.data, reference: snapshot.reference);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">"Record&lt;<span class="subst">$name</span>:<span class="subst">$pw</span>&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，为了方便在程序中使用，我们建立了一个 Map ，首先将我们需要的数据（在这个项目中是用户名和密码）加入 Map ，来使得数据之间通过映射关系可以相互查找，</p><p>码那么多字好累啊，加油干！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
      <category term="开源项目" scheme="http://www.allenmistake.top/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>自己动手Flutter——动画初步</title>
    <link href="http://www.allenmistake.top/2019/06/23/flutterapp3/"/>
    <id>http://www.allenmistake.top/2019/06/23/flutterapp3/</id>
    <published>2019-06-23T08:54:44.000Z</published>
    <updated>2019-06-23T09:25:29.604Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动画基本原理"><a href="#动画基本原理" class="headerlink" title="动画基本原理"></a>动画基本原理</h2><p>我们首先在 State 类里声明 Animation 类型和 AnimationControler 类型，<br>Animation 是负责产生变化值的控件，而 Controler 是 负责动画的生成的。<br>注意，如果需要用的动画控件，类声明必须要跟着 <code>with SingleTickerProviderStateMixin</code>如果在不同时刻有着不同的动画效果，就涉及多个 controler 此时就要声明 <code>with TickerProviderStateMixin</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line">AnimationController controller;</span><br><span class="line">Animation&lt;<span class="built_in">double</span>&gt; animationAI;</span><br></pre></td></tr></table></figure><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>如果想要具体定义动画是怎样进行的，一定要重写 <code>initState()</code> 和 <code>dispose()</code>。如下方代码所示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  <span class="comment">//设置 control 的持续时间</span></span><br><span class="line">  controller = <span class="keyword">new</span> AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">//以下是产生动画的核心代码，设置了开始状态和结束状态</span></span><br><span class="line">  <span class="comment">//这个值和animation应用的控件属性有关，下面会细说</span></span><br><span class="line">  animation = <span class="keyword">new</span> Tween(begin: <span class="number">-1.0</span>, end: <span class="number">-0.25</span>).animate(</span><br><span class="line">      CurvedAnimation(parent: controller, curve: Curves.fastOutSlowIn))</span><br><span class="line">    ..addStatusListener((status) &#123;</span><br><span class="line">        <span class="comment">//..addStateListener 可以监听动画是否完成</span></span><br><span class="line">      <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">        _pressCard(myCard);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">        controller.forward();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  animationAI = <span class="keyword">new</span> Tween(begin: <span class="number">1.0</span>, end: <span class="number">0.25</span>).animate(</span><br><span class="line">      CurvedAnimation(parent: controller, curve: Curves.fastOutSlowIn));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> dispose() &#123;</span><br><span class="line">  controller.dispose();</span><br><span class="line">  <span class="keyword">super</span>.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在 build 函数外面定义了动画之后，我们就可以在控件中应用他们了</p><h2 id="在控件中应用动画"><a href="#在控件中应用动画" class="headerlink" title="在控件中应用动画"></a>在控件中应用动画</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">AnimatedBuilder(</span><br><span class="line">    animation: controller,</span><br><span class="line">    builder: (BuildContext context, Widget child) &#123;</span><br><span class="line">        <span class="keyword">return</span> Transform(</span><br><span class="line">            transform: Matrix4.translationValues(</span><br><span class="line">                animationAI.value * width, <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">            child: <span class="keyword">new</span> Center(</span><br><span class="line">                child: Container(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">16.0</span>),</span><br><span class="line">                    width: <span class="number">100.0</span>,</span><br><span class="line">                    height: <span class="number">100.0</span>,</span><br><span class="line">                    child: Image(</span><br><span class="line">                        image: ExactAssetImage(<span class="string">"<span class="subst">$aiPicPath</span>"</span>),</span><br><span class="line">                        width: <span class="number">40</span>,</span><br><span class="line">                        height: <span class="number">40</span>,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>在要使用动画的控件位置，首先要声明一个 AnimationBuilder ，并且首先定义它的 animation属性，将这个控件的动画发生与 control 绑定在一起，最后再builder 返回一个动画类型，我的 App 里返回的是一个 Transform 类似于平移的一个动画，核心代码是 <code>transform: Matrix4.translationValues(animationAI.value * width, 0.0, 0.0),</code> 此段代码效果则是产生平移效果。效果如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/23/flutterapp3/transform.gif" alt="平移动画效果" title>                </div>                <div class="image-caption">平移动画效果</div>            </figure><h3 id="重置、开启动画"><a href="#重置、开启动画" class="headerlink" title="重置、开启动画"></a>重置、开启动画</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">controller.reset();</span><br><span class="line">controller.forward();</span><br></pre></td></tr></table></figure><p>我们将以上两行代码添加到 onPressed 属性中，这样每次点击按钮的时候都会重置并且播放动画。</p><h2 id="setState-和-addStatusListener"><a href="#setState-和-addStatusListener" class="headerlink" title="setState 和 addStatusListener"></a>setState 和 addStatusListener</h2><p>在 Flutter 中，带有 State 字样的基本都会更新UI，onPressed 中的 setState 函数可以让其中改变的参数马上更新到 UI ，其中的函数一经修改，setState 会立即寻找页面中会调用到该参数的位置，迅速刷新。</p><p>addStateListener 同样也是这个含义，他监听动画的状态，以便在动画停止时（或其他状态）用户可以定义参数变化，来改变UI，在这里的应用就是，当动画播放完之后，再调用结果通知 dialog，如果不这样做的话，动画和 dialog 同时触发，没有效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
      <category term="开源项目" scheme="http://www.allenmistake.top/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Flutter</title>
    <link href="http://www.allenmistake.top/2019/06/21/FlutterStudy/"/>
    <id>http://www.allenmistake.top/2019/06/21/FlutterStudy/</id>
    <published>2019-06-21T14:19:47.000Z</published>
    <updated>2019-06-23T04:05:39.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文大部分内容翻译自 Github 中 <a href="https://github.com/Solido/awesome-flutter" target="_blank" rel="noopener">Awesome Flutter</a> 项目，该项目集合了当下学习 Flutter 的优秀文章及开源项目，然而该项目对于所陈列的项目只有简单的分类，并没有做简要的说明。</p><p>当然如果看不了英文可以去看这篇翻译的文章，<a href="https://github.com/xitu/awesome-flutter" target="_blank" rel="noopener">Awesome Flutter中文版</a> 是由国内Coder翻译的，翻译质量不错，但仍缺少对文章内容的概括。</p><p>这篇文章的目的是想做一个简单的梳理，并对文章内容进行简化，整理成适合初学者。</p><h2 id="手把手教你动手Flutter"><a href="#手把手教你动手Flutter" class="headerlink" title="手把手教你动手Flutter"></a>手把手教你动手Flutter</h2><p>如果你觉得自己对属于自己的 Flutter App 一筹莫展时，你可以看看其他人是怎么开发的App，一下这些 App 功能简单，但是对于初学者，手打出来是很有帮助的，建议大家在编译器好好敲一敲，体会一下：</p><ul><li><a href="https://code.tutsplus.com/tutorials/developing-an-android-app-with-flutter--cms-28270" target="_blank" rel="noopener">开发一个安卓应用</a> —— 配置和开发第一个应用，作者是 Ashraff Hathibelagal。注意：采用的是IntelliJ IDEA，个别设置可能和 AS 不同，不过不影响程序的编写。这里并没有给出 Flutter 官方的教程，不知道为什么，可以通过第二篇跳转到官方给出的 Flutter 超级入门教学。<br>难度：★</li><li><a href="https://codelabs.developers.google.com/codelabs/flutter/#0" target="_blank" rel="noopener">Animated Chat</a> —— 创建漂亮的 UI，来自谷歌代码实验室（Google Code Labs）。<br>如果说第一个侧重于如何使用编译器编写运行Flutter App，那么这个则是将内容具体到对于布局和控件的使用。<br>难度：★</li><li><a href="https://codelabs.developers.google.com/codelabs/flutter-firebase/#0" target="_blank" rel="noopener">Firebase Chat</a> —— Firebase integration，来自谷歌代码实验室。<br>如果你想快速了解 Firebase 这个 Flutter 工具，那么这篇文章是你的入门之选，只需要你对<strong>面向对象语言</strong>有所掌握即可。</li><li>难度：★</li><li><a href="https://sergiandreplace.com//tags/flutter/" target="_blank" rel="noopener">Planets-Flutter</a>：从设计到开发 —— 详细的 planets design 教程。<br>这是一个手把手教你做出好看应用的博客，设计到基础动画，页面跳转等知识，缺点是全英文，而且停更了<br>难度：★~★★</li></ul><h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><ul><li><a href="https://flutter.institute/" target="_blank" rel="noopener">Flutter Institute</a><br>既含有手把手教你写 App 的教程，并且更新一些开发中会遇到的问题。还算不错<br>难度：★~★★★</li><li><a href="https://flutterbyexample.com/" target="_blank" rel="noopener">Flutter by Example</a><br>很推荐看的博客，里面涵盖了很多常用的控件工具库，例如网络库，动画库，登陆界面等等。强烈推荐！<br>难度：★★</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><a href="https://github.com/flutter/flutter/tree/master/examples/flutter_gallery" target="_blank" rel="noopener">官方 Gallery</a> —— 来自 Flutter 团队的展示 Material Design 风格的 Widget 和一些其他功能展示的示例 APP。<br>对于一些新功能，基础控件，参考官方的写法可能是最简单直白的，缺点是官网没有讲解部分，但是很全！<br>实用度：★★★★</li><li><a href="https://github.com/nisrulz/flutter-examples" target="_blank" rel="noopener">Flutter 示例</a>（708 ★）—— 为 Flutter 开发者提供的一个简单基础的独立应用，作者是 <a href="https://github.com/nisrulz" target="_blank" rel="noopener">Nishant Srivastava</a>。<br>类似于官方给出的，这两个结合观看基本上就可以设计出美观的 Flutter App 了<br>实用度：★★★★</li></ul><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>这些 UI 设计是我挑出来比较实用的设计，其实都是很实用的，只不过对于我来说应用场景比较小，于是就落榜了。</p><ul><li><a href="https://github.com/goderbauer/contact_picker" target="_blank" rel="noopener">Contact Picker</a> —— 从通讯录里选取一个联系人，作者是 <a href="https://github.com/goderbauer" target="_blank" rel="noopener">Michael Goderbauer</a></li><li><a href="https://github.com/letsar/flutter_staggered_grid_view" target="_blank" rel="noopener">StaggeredGridView</a>（115 ★）—— 具有不同尺寸磁贴（tile）的 GridView，作者是 <a href="https://github.com/letsar" target="_blank" rel="noopener">Romain Rastel</a>。<br>实用度：★★★★</li><li><a href="https://github.com/letsar/flutter_sticky_header" target="_blank" rel="noopener">Sticky Header</a> (27 ★) - 长条式固定headers by <a href="https://github.com/letsar" target="_blank" rel="noopener">Romain Rastel</a>.<br>实用度：★★★</li><li><a href="https://github.com/slightfoot/flutter_sticky_headers" target="_blank" rel="noopener">Sticky Headers</a> (73 ★) - Configurable sticky headers by <a href="http://www.devangels.london/" target="_blank" rel="noopener">Simon Lightfoot</a>.<br>可以设置内容的固定headers。<br>实用度：★★★</li><li><a href="https://github.com/xqwzts/flutter_radial_menu" target="_blank" rel="noopener">径向菜单</a>（76 ★）—— 带动画的径向菜单，作者是 <a href="https://github.com/xqwzts" target="_blank" rel="noopener">Victor Choueiri</a>。</li><li><a href="https://github.com/Ivaskuu/tinder_cards" target="_blank" rel="noopener">Tinder 卡片</a>（58 ★）—— Tinder like 卡片滑动效果，作者是 <a href="https://github.com/Ivaskuu" target="_blank" rel="noopener">Ivascu Adrian</a>。<br>实用度：★★★</li><li><a href="https://github.com/GeekyAnts/flutter-login-home-animation" target="_blank" rel="noopener">Login Animation</a> (119 ★) - 从登录平滑过渡到主页的动画 <a href="https://github.com/geekruchika" target="_blank" rel="noopener">Ruchika Gupta</a>.<br>实用度：★★★★★</li><li><a href="https://github.com/Norbert515/flutter_list_drag_and_drop" target="_blank" rel="noopener">List Drag&amp;Drop</a> (55 ★) - 表单内容拖拽by <a href="https://github.com/Norbert515" target="_blank" rel="noopener">Norbert515</a>.<br>实用度：★★★★</li><li><a href="https://github.com/pinkfish/flutter_calendar" target="_blank" rel="noopener">Calendar Widget</a> (8 ★) - 按照时间顺序记录事件的 widget by <a href="https://github.com/pinkfish" target="_blank" rel="noopener">David Bennett</a>.<br>实用度：★★</li><li><a href="https://github.com/hnvn/flutter_shimmer" target="_blank" rel="noopener">Shimmer</a> (55 ★) - Shimmer effect while content is loading by <a href="https://github.com/hnvn" target="_blank" rel="noopener">HungHD</a>.<br>给 widget 加波浪阴影特效<br>实用度：★★★</li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul><li><a href="https://github.com/flutter/plugins/tree/master/packages/image_picker" target="_blank" rel="noopener">Image Picker</a> —— 图片选择器，作者是 <a href="http://www.collinjackson.com" target="_blank" rel="noopener">Collin Jackson</a>。<br>很实用的库，用来选择照片库中的一个图片，或是自己拍一张。<br>实用度：★★★★★</li><li><a href="https://github.com/serenader2014/flutter_carousel_slider" target="_blank" rel="noopener">Carousel Slider</a>（42 ★）—— 旋转滑动小部件，支持无限滚动和自定义子部件，作者是 <a href="https://github.com/serenader2014" target="_blank" rel="noopener">serenader</a>。<br>图片无限滑动<br>实用度：★★★★</li><li><a href="https://github.com/renancaraujo/photo_view" target="_blank" rel="noopener">Photo View</a> (25 ★) - Scalable image view with loading placeholder by <a href="https://github.com/renancaraujo" target="_blank" rel="noopener">Renan C. Araújo</a>.<br>图片放缩、截图管理、照片Galaxy集合<br>实用度：★★★</li></ul><h3 id="导航、路由"><a href="#导航、路由" class="headerlink" title="导航、路由"></a>导航、路由</h3><ul><li><a href="https://github.com/goposse/fluro" target="_blank" rel="noopener">Fluro</a>（292 ★）—— 具有导航、通配符、查询、过渡动画的最亮、最时尚、最酷的 Flutter 路由器，作者是 <a href="http://goposse.com" target="_blank" rel="noopener">Posse</a>。</li><li><a href="https://pub.dartlang.org/packages/circle_indicator" target="_blank" rel="noopener">Circle Indicator</a>（12 ★）—— PageViewer 的圆形指示器，作者是 <a href="https://github.com/long1eu" target="_blank" rel="noopener">Lung Razvan</a>。</li><li><a href="https://github.com/flutter/plugins/tree/master/packages/quick_actions" target="_blank" rel="noopener">Quick Actions</a> —— 与应用程序的主屏幕快速操作进行交互。</li><li><a href="https://github.com/jzoom/flutter_swiper" target="_blank" rel="noopener">Swiper</a> (12 ★) - Horizontal, Vertical, Partial swipe with indicator by <a href="https://github.com/jzoom" target="_blank" rel="noopener">Xueliang Ren</a>.</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li><a href="https://github.com/flutter/plugins/tree/master/packages/local_auth" target="_blank" rel="noopener">本地身份验证</a> —— Ios 和 Android 上的 Touch ID、锁屏密码和指纹验证</li><li><a href="https://github.com/AppleEducate/flutter_login" target="_blank" rel="noopener">Flutter 登录</a>（96 ★）—— FaceID, TouchID, 还有指纹扫描，作者是 <a href="http://appleeducate.com" target="_blank" rel="noopener">Rody Davis</a>。</li><li><a href="https://github.com/flutter/plugins/tree/master/packages/google_sign_in" target="_blank" rel="noopener">Google Sign-In</a> —— Google 身份验证。</li><li><a href="https://github.com/flutter/plugins/tree/master/packages/firebase_auth" target="_blank" rel="noopener">Firebase Auth</a> —— Firebase 身份验证。</li><li><a href="https://github.com/roughike/flutter_facebook_login" target="_blank" rel="noopener">Facebook Login</a> (62 ★) - Authenticate with native Android &amp; iOS Facebook login SDKs by <a href="https://github.com/roughike" target="_blank" rel="noopener">Iiro Krankka</a>.</li><li><a href="https://github.com/hitherejoe/FlutterOAuth" target="_blank" rel="noopener">Flutter OAuth</a>（44 ★）—— Buffer、Strava、Unsplash 和 Github 身份验证，作者是 <a href="http://www.hitherejoe.com" target="_blank" rel="noopener">Joe Birch</a>。</li><li><a href="https://hackernoon.com/instagram-authentication-with-flutter-df6424d2d56c" target="_blank" rel="noopener">Instagram</a> —— Instagram 身份验证，作者是 <a href="http://developer-journey.com/" target="_blank" rel="noopener">Wilfried Mbouenda Mbogne</a>。</li></ul><h3 id="文字和富文本"><a href="#文字和富文本" class="headerlink" title="文字和富文本"></a>文字和富文本</h3><ul><li><a href="https://github.com/benhurott/flutter-masked-text" target="_blank" rel="noopener">Masked Text</a> (6 ★) - Masked text with custom and monetary formatting by <a href="https://github.com/benhurott" target="_blank" rel="noopener">Ben-hur Santos Ott</a>.<br>给文本输入加上自定义mask，比如信息遮盖 * 、或者自动添加 - 。等</li></ul><h3 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h3><ul><li><a href="https://github.com/rxlabz/flutterial" target="_blank" rel="noopener">Flutterial</a>（46 ★）—— Flutter Material 主题的探索者，作者是 <a href="https://twitter.com/rxlabz" target="_blank" rel="noopener">Erick Ghaumez</a>。</li><li><a href="http://stackoverflow.com/questions/43550853/how-do-i-do-the-frosted-glass-effect-in-flutter" target="_blank" rel="noopener">Frosted Glass</a> —— 渲染器效果，作者是 <a href="http://www.collinjackson.com" target="_blank" rel="noopener">Collin Jackson</a>。</li><li><a href="https://pub.dartlang.org/packages/font_awesome_flutter" target="_blank" rel="noopener">Font Awesome</a> —— Font Awesome 图标包，作者是 <a href="https://github.com/brianegan" target="_blank" rel="noopener">Brian Egan</a>。</li><li><a href="http://fluttericon.com/" target="_blank" rel="noopener">FlutterIcon</a> —— 图标字体生成器。</li><li><a href="https://github.com/bregydoc/pigment" target="_blank" rel="noopener">Pigment</a>（27 ★）—— 简单但是很实用的在 Flutter 里面使用颜色的包。</li></ul><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><ul><li><a href="https://github.com/rxlabz/audioplayer" target="_blank" rel="noopener">音频插件</a>（95 ★）—— Beta 版，作者是 <a href="https://twitter.com/rxlabz" target="_blank" rel="noopener">Erick Ghaumez</a>。</li><li><a href="https://github.com/ZaraclaJ/audio_recorder" target="_blank" rel="noopener">录音机</a>（24 ★）—— 录制音频并存储在本地，作者是 <a href="https://twitter.com/jordanalcrz" target="_blank" rel="noopener">Jordan Alcaraz</a>。</li><li><a href="https://github.com/2find/stereo" target="_blank" rel="noopener">Stereo</a>（22 ★）—— 在 iOS 和 Android 上面播放音乐，作者是 <a href="https://github.com/2find" target="_blank" rel="noopener">2Find</a>。</li><li><a href="https://github.com/cloudwebrtc/flutter-webrtc" target="_blank" rel="noopener">WebRTC</a> (80 ★) - WebRTC plugin for iOS/Android by <a href="https://github.com/cloudwebrtc" target="_blank" rel="noopener">CloudWebRtc</a>.</li><li><a href="https://github.com/brianegan/chewie" target="_blank" rel="noopener">Chewie</a> (70 ★) - Provides low-level access to video playback by <a href="https://github.com/brianegan" target="_blank" rel="noopener">Brian Egan</a>.</li></ul><h3 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h3><ul><li><a href="https://github.com/rxlabz/speech_recognition" target="_blank" rel="noopener">Speech Recognition</a>（41 ★）—— 语音转文字，作者是 <a href="https://twitter.com/rxlabz" target="_blank" rel="noopener">Erick Ghaumez</a>。</li><li><a href="https://marcinszalek.pl/flutter/ok-google-flutter/" target="_blank" rel="noopener">OK Google</a> —— 整合了 Google 语音助手，作者是 <a href="https://marcinszalek.pl/" target="_blank" rel="noopener">Marcin Szalek</a>。</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul><li><a href="https://github.com/flutter/plugins/tree/master/packages/firebase_storage" target="_blank" rel="noopener">Firebase Storage</a> —— 用 Firebase 作为数据存储设备。</li><li><a href="https://github.com/mogol/flutter_secure_storage" target="_blank" rel="noopener">Secure Storage</a> (23 ★) - Keychain and Keystore storage by <a href="https://github.com/mogol" target="_blank" rel="noopener">German Saprykin</a>.</li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul><li><a href="https://github.com/FlutterRocks/movie-details-ui" target="_blank" rel="noopener">Movie Details</a>（93 ★）—— 电影详情页面，作者是 <a href="https://github.com/roughike" target="_blank" rel="noopener">Iiro Krankka</a>。</li><li><a href="https://github.com/CodemateLtd/FlutterMates" target="_blank" rel="noopener">Flutter Mates</a>（160 ★）—— 如何从 randomuser.me API 加载个人信息列表，并通过一个漂亮的页面展示个人信息详情，作者是 <a href="https://github.com/roughike" target="_blank" rel="noopener">Iiro Krankka</a>。</li><li><a href="https://github.com/alessandroaime/Weather" target="_blank" rel="noopener">Weather</a>（50 ★）—— 学习如何使用 Canvas 和动画去制作天气应用，作者是 <a href="https://github.com/alessandroaime" target="_blank" rel="noopener">Alessandro Aime</a>。</li><li><a href="https://github.com/brianegan/flutter_architecture_samples" target="_blank" rel="noopener">TodoMVC</a>（644 ★）—— 准备使用不同框架的备忘录应用：Vanilla, Redux, built_redux，作者是 <a href="https://github.com/brianegan" target="_blank" rel="noopener">Brian Egan</a>。</li><li><a href="https://github.com/braulio94/menu_flutter" target="_blank" rel="noopener">Restaurant Menu</a>（219 ★）—— 饭店菜单，作者是 <a href="https://github.com/braulio94" target="_blank" rel="noopener">Braulio Cassule</a>。</li><li><a href="https://github.com/tomialagbe/flutter_ui_challenges" target="_blank" rel="noopener">UI 挑战</a>（222 ★）—— 个人信息应用、旅行应用、美食应用，作者是 <a href="https://github.com/tomialagbe" target="_blank" rel="noopener">Tomi Alagbe</a>。</li><li><a href="https://github.com/matthinc/flutter_cupertino_settings" target="_blank" rel="noopener">Cupertino Settings</a>（19 ★）—— iOS 设置，作者是 <a href="https://github.com/matthinc" target="_blank" rel="noopener">Matthias Rupp</a>。</li><li><a href="https://github.com/thosakwe/flutter_music_player" target="_blank" rel="noopener">Music Player</a>（59 ★）—— 音乐播放器部件，作者是 <a href="https://thosakwe.com/" target="_blank" rel="noopener">Tobe O</a>。</li><li><a href="https://github.com/Ivaskuu/dashboard" target="_blank" rel="noopener">Dashboard</a>（142 ★）—— 仪表板和商品列表，作者是 <a href="https://github.com/Ivaskuu" target="_blank" rel="noopener">Ivascu Adrian</a>。</li><li><a href="https://github.com/littlemarc2011/FlutterTodo" target="_blank" rel="noopener">Todo</a> (94 ★) - Todo template from Dribble by <a href="https://www.marc-little.com/" target="_blank" rel="noopener">Marc L</a>.</li><li><a href="https://github.com/geekruchika/FlutterCardSwipe" target="_blank" rel="noopener">Card Swipe Animation</a> (40 ★) - Swipe cards template by <a href="https://github.com/geekruchika" target="_blank" rel="noopener">Ruchika Gupta</a>.</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><a href="https://github.com/flutter/plugins/tree/master/packages" target="_blank" rel="noopener">Flutter 插件</a> —— Flutter 团队的官方插件</li><li><a href="https://github.com/tekartik/sqflite" target="_blank" rel="noopener">Sqflite</a>（221 ★）—— SQLite 的 Flutter 插件，作者是 <a href="https://www.linkedin.com/in/alextekartik/" target="_blank" rel="noopener">Alexandre Roux</a>。</li><li><a href="https://github.com/dart-flitter/flutter_webview_plugin" target="_blank" rel="noopener">WebView</a>（152 ★）—— 作者是 <a href="https://twitter.com/HadrienLejard" target="_blank" rel="noopener">Hadrien Lejard</a>。</li><li><a href="https://pub.dartlang.org/flutter/plugins" target="_blank" rel="noopener">Pub Plugins</a> —— Dart Pub Repository 的筛选插件。</li><li><a href="https://github.com/Lyokone/flutterlocation" target="_blank" rel="noopener">Flutter Location</a>（79 ★）—— 处理位置，处理回调以获得连续的位置，作者是 <a href="https://github.com/Lyokone" target="_blank" rel="noopener">Lyokone</a>。</li><li><a href="https://github.com/villela/flutter_qrcode_reader" target="_blank" rel="noopener">QR Code Reader</a>（32 ★）—— 二维码扫描插件，作者是 <a href="https://github.com/villela" target="_blank" rel="noopener">Matheus Villela</a>。</li><li><a href="https://pub.dartlang.org/packages/battery" target="_blank" rel="noopener">Battery</a> —— 获取电池相关的各种信息。</li><li><a href="https://github.com/acaliaro/flutterZebraEmdk" target="_blank" rel="noopener">Zebra EMDK</a>（3 ★）—— 使用 Zebra EMDK 来获取 Barcode Scanner API。</li><li><a href="https://pub.dartlang.org/packages/proximity_plugin" target="_blank" rel="noopener">Proximity Sensor Plugin</a> —— 一个可以访问你设备上的距离传感器（proximity sensor）的插件，作者是 <a href="https://github.com/Samaritan1011001" target="_blank" rel="noopener">Manoj NB</a>。</li><li><a href="https://github.com/loup-v/geolocation" target="_blank" rel="noopener">Geolocation</a>（72 ★）—— 功能齐全的地理位置插件：当前位置，位置更新，地理编码，地点等等，作者是 <a href="http://intheloup.io" target="_blank" rel="noopener">Loup</a>。</li><li><a href="https://github.com/MaikuB/flutter_local_notifications" target="_blank" rel="noopener">Local Notifications</a>（62 ★）—— 展示本地通知的插件，作者是 <a href="https://github.com/MaikuB" target="_blank" rel="noopener">Michael Bui</a>。</li><li><a href="https://github.com/AppleEducate/app_review" target="_blank" rel="noopener">App Rating</a>（20 ★）—— 为 App Store 和 Google Play 评分和写评论，作者是 <a href="http://appleeducate.com" target="_blank" rel="noopener">Rody Davis</a>。</li><li><a href="https://github.com/AppleEducate/get_version" target="_blank" rel="noopener">Get Version</a>（13 ★）—— 获取版本名、版本号、App ID 和带有操作系统版本的平台信息，作者是 <a href="http://appleeducate.com" target="_blank" rel="noopener">Rody Davis</a>。</li><li><a href="https://github.com/hnvn/flutter_downloader" target="_blank" rel="noopener">Downloader</a> (23 ★) - Create and manage download tasks by <a href="https://github.com/hnvn" target="_blank" rel="noopener">HungHD</a>.</li><li><a href="https://github.com/pinkfish/flutter_places_dialog" target="_blank" rel="noopener">Place Dialog</a> (9 ★) - Places picker dialog returning the places to the app by <a href="https://github.com/pinkfish" target="_blank" rel="noopener">David Bennett</a>.</li><li><a href="https://github.com/renefloor/flutter_cached_network_image" target="_blank" rel="noopener">Cached Network Image</a> (61 ★) - Show images from the internet and keep them in the cache directory by <a href="https://github.com/renefloor" target="_blank" rel="noopener">Rene Floor</a>.</li><li><a href="https://github.com/builttoroam/flutter_plugins/tree/develop/device_calendar" target="_blank" rel="noopener">Device Calendar</a> - Plugin for modifying calendars on the user’s device by <a href="http://builttoroam.com" target="_blank" rel="noopener">Built to Roam</a>.</li></ul><h3 id="蓝牙-NFC-Beacon"><a href="#蓝牙-NFC-Beacon" class="headerlink" title="蓝牙 / NFC / Beacon"></a>蓝牙 / NFC / Beacon</h3><ul><li><a href="https://github.com/Polidea/FlutterBleLib" target="_blank" rel="noopener">Flutter Ble</a>（45 ★）—— 蓝牙，作者是 <a href="http://www.polidea.com" target="_blank" rel="noopener">Polidea</a></li><li><a href="https://github.com/pauldemarco/flutter_blue" target="_blank" rel="noopener">Flutter Blue</a>（142 ★）—— 蓝牙，作者是 <a href="https://github.com/pauldemarco" target="_blank" rel="noopener">Paul DeMarco</a>。</li><li><a href="https://github.com/guyulmaz/flutter-nfc-app" target="_blank" rel="noopener">NFC</a> (12 ★) - Connect IsoDep iso 14443-4 cards for android by <a href="https://github.com/guyulmaz" target="_blank" rel="noopener">Göksel Uyulmaz</a>.</li><li><a href="https://github.com/loup-v/beacons" target="_blank" rel="noopener">Beacons</a> (4 ★) - Flutter beacons plugin by <a href="http://intheloup.io" target="_blank" rel="noopener">Loup</a>.</li></ul><h2 id="开源-APP"><a href="#开源-APP" class="headerlink" title="开源 APP"></a>开源 APP</h2><p>当学会了一些基础之后，可以去看看别人编写的 App 来提高自己对于 App 设计模式以及层级结构的理解，没有结构和层次的 App 是很糟糕的。</p><ul><li><a href="https://github.com/flutter/friendlychat-flutter" target="_blank" rel="noopener">FriendlyChat</a>（106 ★）—— 一群谷歌员工开发的离线或者是基于 Firebase 的聊天应用。</li><li><a href="https://github.com/efortuna/memechat" target="_blank" rel="noopener">Meme Chat</a>（244 ★）——  Flutter 上的聊天应用，用到了 Firebase、谷歌登陆和设备相机集成，作者是谷歌员工。</li><li><a href="https://github.com/dart-flitter/flitter" target="_blank" rel="noopener">Flitter</a>（83 ★）—— Glitter 客户端，作者是 <a href="https://twitter.com/HadrienLejard" target="_blank" rel="noopener">Hadrien Lejard</a> 和 <a href="https://twitter.com/kevin_segaud" target="_blank" rel="noopener">Kevin Segaud</a>。里面用到了 Redux 和 Jaguar。</li><li><a href="https://github.com/fablue/lime-flutter" target="_blank" rel="noopener">Lime</a> ——（129 ★）Lime 是 Sebastian Sellmair 开发的社交网络应用。</li><li><a href="https://github.com/sergiandreplace/flutter_planets_tutorial" target="_blank" rel="noopener">Planets-Flutter</a>（149 ★）—— 显示了丰富 UI 的行星探索应用，作者是 <a href="http://sergiandreplace.com" target="_blank" rel="noopener">Sergi Martínez</a>。</li><li><a href="https://github.com/theankurkedia/NewsBuzz" target="_blank" rel="noopener">NewsBuzz</a>（175 ★）—— 从 News API 获取数据并使用 Firebase 做后台的新闻阅读器，作者是 <a href="https://github.com/theankurkedia" target="_blank" rel="noopener">Ankur Kedia</a>。</li><li><a href="https://github.com/konifar/droidkaigi2018-flutter" target="_blank" rel="noopener">DroidKaigi2018-flutter</a>（226 ★）—— 东京 DroidKaigi 2018 的非官方会议应用，作者是 <a href="https://github.com/konifar" target="_blank" rel="noopener">konifar</a>。</li><li><a href="https://github.com/iampawan/Flutter-Music-Player" target="_blank" rel="noopener">Music Player</a>（178 ★）—— <a href="https://about.me/imthepk" target="_blank" rel="noopener">Pawan Kumar</a> 开发的全功能音乐播放器。</li><li><a href="https://github.com/roughike/inKino" target="_blank" rel="noopener">InKino</a>（820 ★）—— 完整的电影应用程序，使用 Flutter_Redux 框架进行状态管理，具有很好的过渡动画，以及一套很全面的小部件还有单元测试，作者是 <a href="https://github.com/roughike" target="_blank" rel="noopener">Iiro Krankka</a>。</li><li><a href="https://github.com/burhanrashid52/WhatTodo" target="_blank" rel="noopener">WhatTodo</a> (105 ★) - Todoist like UI by <a href="https://about.me/burhanrashid52" target="_blank" rel="noopener">Burhanuddin Rashid</a>.</li><li><a href="https://github.com/mdanics/fluttergram" target="_blank" rel="noopener">FlutterGram</a> (74 ★) - Complete Instagram based on Firestore &amp; Google Functions by <a href="https://github.com/mdanics" target="_blank" rel="noopener">MDanics</a>.</li><li><a href="https://github.com/Norbert515/BookSearch" target="_blank" rel="noopener">BookSearch</a> (97 ★) - Digital BookShelf for your reading progress by <a href="https://github.com/Norbert515" target="_blank" rel="noopener">Norbert515</a>.</li><li><a href="https://github.com/aaronoe/FlutterCinematic" target="_blank" rel="noopener">Cinematic</a> (145 ★) - UI for Movie DB Public API by <a href="https://github.com/aaronoe" target="_blank" rel="noopener">Aaron Oertel</a>.</li><li><a href="https://github.com/benoitletondor/Beer-Me-Up" target="_blank" rel="noopener">Beer-Me-Up</a> (75 ★) - Beer tracking nicely designed by <a href="https://github.com/benoitletondor" target="_blank" rel="noopener">Benoit Letondor</a>.</li></ul><p>以上这些开源代码质量都还是比较高的，大家可以有针对性地看其中的一两个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>自己动手Flutter——项目三步走</title>
    <link href="http://www.allenmistake.top/2019/06/18/flutterapp2/"/>
    <id>http://www.allenmistake.top/2019/06/18/flutterapp2/</id>
    <published>2019-06-18T14:07:04.000Z</published>
    <updated>2019-06-21T13:24:35.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目的三步走策略"><a href="#项目的三步走策略" class="headerlink" title="项目的三步走策略"></a>项目的三步走策略</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/18/flutterapp2/stage.png" alt="三步走" title>                </div>                <div class="image-caption">三步走</div>            </figure><p>暂时是这个思路，预计如果时间充裕的话，一个月之内到第二阶段是没有问题的，至于联机方面，心里比较没底。</p><p>还有一个问题是今天投了西瓜的移动端开发，在大厂里面实习感觉会尽可能的提升自己敲代码的能力。</p><h2 id="最近的问题及解决方案"><a href="#最近的问题及解决方案" class="headerlink" title="最近的问题及解决方案"></a>最近的问题及解决方案</h2><h3 id="onPressed"><a href="#onPressed" class="headerlink" title="onPressed"></a>onPressed</h3><p>如果点击事件涉及到当前页面的UI更新，onPressed: (){<br>}函数里面一定要定义<code>setState()</code>函数，在这个函数中进行 UI 相关参数修改，不然系统不会即时刷新 UI</p><p>关于这点，初始 App 源码说的比较精髓：</p><p> This call to setState tells the Flutter framework that something has changed in this State, which causes it to rerun the build method below so that the display can reflect the updated values. If we changed _counter(更新 UI 所需参数) without calling setState(), then the build method would not be called again, and so nothing would appear to happen.</p><h3 id="页面间传值"><a href="#页面间传值" class="headerlink" title="页面间传值"></a>页面间传值</h3><p>不得不说，页面间传值这个问题困扰了我一天的时间，在网上查相关资料查得焦头烂额，其实现在来看还是蛮简单的：</p><p>传入参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push&lt;<span class="built_in">List</span>&gt;(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (BuildContext context) =&gt;</span><br><span class="line">            <span class="keyword">new</span> SetPage(widget.card1, widget.card2, widget.card3),</span><br><span class="line">    ),</span><br><span class="line">).then((<span class="built_in">List</span> result) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result[<span class="number">0</span>] != <span class="string">''</span>) widget.card1.cardName = result[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (result[<span class="number">1</span>] != <span class="string">''</span>) widget.card2.cardName = result[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (result[<span class="number">2</span>] != <span class="string">''</span>) widget.card3.cardName = result[<span class="number">2</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看出，传入参数还是比较简单的，只要给新 new Page 加一个构造函数，然后生成新页面的时候把参数传过去就行；难点在于参数返回，核心代码在于 Navigator 中的 push 操作，首先要在 push 后面加上 &lt;返回的数据类型&gt; 这么一个泛型结构，随后在 push 后面 接上 .then 函数，这个函数的参数就是你要接受的参数括号里面是接受的类型和值，花括号里面接受的是后续相关处理操作。</p><h3 id="Widget界面的溢出"><a href="#Widget界面的溢出" class="headerlink" title="Widget界面的溢出"></a>Widget界面的溢出</h3><p>在网上找了半天关于溢出的相关问题，溢出的问题通常都是由 Row 或是 Column 设置不当导致，最终大家都倾向于将 Row、Column 中的 children 放入 Expanded 中，保持安全边界，这会使得被 Expanded 保护的 widget 以Row、Column方式撑满整个屏幕，并且这个边界是自适应的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
      <category term="开源项目" scheme="http://www.allenmistake.top/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>自己动手Flutter——View初步</title>
    <link href="http://www.allenmistake.top/2019/06/16/flutterapp1/"/>
    <id>http://www.allenmistake.top/2019/06/16/flutterapp1/</id>
    <published>2019-06-16T14:35:21.000Z</published>
    <updated>2019-06-23T13:16:13.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有着上次对 Flutter 的认识，于是我马不停蹄的着手开发了一个基于 Flutter 的 App，一开始真的是很难，Flutter 对于我来说简直就是未知的领域。</p><h2 id="所做的工作"><a href="#所做的工作" class="headerlink" title="所做的工作"></a>所做的工作</h2><h3 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/flutterapp1/main.png" alt="主界面" title>                </div>                <div class="image-caption">主界面</div>            </figure><p>主界面含有一个 Drawer 实现设置页面(SetPage)和关于界面(AboutPage)的跳转</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/flutterapp1/side.png" alt="drawer" title>                </div>                <div class="image-caption">drawer</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/flutterapp1/about.png" alt="关于作者" title>                </div>                <div class="image-caption">关于作者</div>            </figure><h3 id="图片的引入"><a href="#图片的引入" class="headerlink" title="图片的引入"></a>图片的引入</h3><p>pubspec.yaml这个文件中 assets 部分进行声明，再在类中调用即可。<br>注意，调用本地图片用 ExactAssetImage 函数。</p><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><p>页面路由 <code>Navigator</code> 的使用</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>第一天开发认识了关于 Text 的属性，对于 Row 和 Column 的 children 布局稍有掌握（毕竟这俩用的情形还是很多的）</p><h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><p>参考了无数篇关于 widget 的使用，感觉这一块的知识太过于零散，层次很难分清楚，比如什么时候该用 Center、什么时候该用 Container ，没有概念，导致开发时候 View 极其混乱。</p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>引入新的依赖之后，App 在运行编译的时候总是卡在 resolving depencenies ，如果卡了很长时间并且报 Error running Gradle:，那很大一部分可能是你被墙挡住了，解决办法我不多说。</p><h3 id="图片的加载"><a href="#图片的加载" class="headerlink" title="图片的加载"></a>图片的加载</h3><p>我现在也不明白图片加载嵌套那个是什么机制，只是知道使用一个 <code>DecoratedBox</code> 嵌套 ，其中有个属性是 <code>BoxDecoration</code> ，</p><h2 id="接下来要做的"><a href="#接下来要做的" class="headerlink" title="接下来要做的"></a>接下来要做的</h2><ul><li>三张卡片的逻辑做出来，不要再是“1，2，3”这样的 text widget，要是图片加文字。</li><li>设置界面中加入模式调整，并学会在两个页面中间传值。</li><li>点击相应的卡片，将点击的结果传递给同页面的 Container</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
      <category term="开源项目" scheme="http://www.allenmistake.top/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>开始一场Flutter之旅</title>
    <link href="http://www.allenmistake.top/2019/06/14/startflutter/"/>
    <id>http://www.allenmistake.top/2019/06/14/startflutter/</id>
    <published>2019-06-14T03:20:39.000Z</published>
    <updated>2019-06-21T13:24:39.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="是时候搞一点新东西了"><a href="#是时候搞一点新东西了" class="headerlink" title="是时候搞一点新东西了"></a>是时候搞一点新东西了</h2><p>其实我在去年就对 Flutter 有所了解，当时的 Flutter 已经可以和 react native 相互竞争了，但是但是 flutter 生态化没有完全建立起来，根本和 RN 比不了，虽然在 Github 有了几十万 star 但是也只是作为 Android 和 iOS 之间跨平台的一种方案。</p><p>然而在2019年5月，谷歌在其官方博客宣布，Flutter 已支持移动、Web、桌面和嵌入式设备，这意味着它正式成为了支持多平台的轻量级 UI 框架。</p><p>所以，是时候搞一点新东西了。</p><h2 id="Flutter-优势"><a href="#Flutter-优势" class="headerlink" title="Flutter 优势"></a>Flutter 优势</h2><p>我简单说一下 Flutter 的优势，首先就是跨平台特性；其次，其采用 Dart 语言，这个语言内部机制决定了 Flutter 有一个很优秀的功能——热重载，也就是说改动代码后不需要重新运行应用（Init…resolve…），<strong>代码的改动可以直接作用于正在运行的程序</strong>；最后一点就是渲染，他采用 GPU 渲染应用，体验上我完全不输 RN 原生应用。</p><h2 id="Flutter-配置"><a href="#Flutter-配置" class="headerlink" title="Flutter 配置"></a>Flutter 配置</h2><p>可以参照官方文档进行配置:<br><a href="https://flutter-io.cn/docs" target="_blank" rel="noopener">https://flutter-io.cn/docs</a></p><p>我踩到的坑：<br>国内用户提示加的那两个环境变量（两个网站）<strong>一定要加在系统变量中</strong>，不要加在用户变量，会由于权限问题导致没有效果，导致新建 Flutter 出现卡死情况（网站上不去、解析不了当然卡死）</p><h2 id="构建自己的第一个-flutter-App（假的）"><a href="#构建自己的第一个-flutter-App（假的）" class="headerlink" title="构建自己的第一个 flutter App（假的）"></a>构建自己的第一个 flutter App（假的）</h2><p>项目地址：<a href="https://github.com/AllenMistake/flutter_app" target="_blank" rel="noopener">https://github.com/AllenMistake/flutter_app</a></p><p>之所以是假的，是因为完全参考官方给出的示例代码，毕竟，我刚刚上手，API都不懂，怎么码代码嘛，还是要一步一步来，不要一口吃个胖子。</p><p>我在这里分析几个源码中我认为比较重点的几个点：</p><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br></pre></td></tr></table></figure><p>=&gt;在dart中表示单行函数或方法，算是提高代码简洁度的一个语法糖吧。</p><h3 id="widget结构分析"><a href="#widget结构分析" class="headerlink" title="widget结构分析"></a>widget结构分析</h3><p>首先我们看一下最初的源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">            title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">            home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">                appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">                ),</span><br><span class="line">                body: <span class="keyword">const</span> Center(</span><br><span class="line">                    child: <span class="keyword">const</span> Text(<span class="string">'Hello World'</span>),</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scaffold 是 Material library 中提供的一个 widget，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。widget 树可以很复杂。</p><p>一个 widget 的主要工作是<strong>提供一个 build() 方法</strong>(总是要重写，类似于activity中的 onCreate)来描述如何根据其他较低级别的 widgets 来显示自己。</p><p>本示例中的 body 的 widget 树中包含了一个 Center widget，Center widget 又包含一个 Text 子 widget，Center widget 可以将其子 widget 树对其到屏幕中心。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>添加依赖在 pubspec.yaml 中，然后点击右上角出现的Packages get，当然别忘了在主程序中引入包。</p><h3 id="添加一个-Stateful-widget"><a href="#添加一个-Stateful-widget" class="headerlink" title="添加一个 Stateful widget"></a>添加一个 Stateful widget</h3><p>Stateless widgets 是不可变的，这意味着它们的属性不能改变——所有的值都是 final。</p><p>Stateful widgets 持有的状态可能在 widget 生命周期中发生变化，实现一个 stateful widget 至少需要两个类：1）一个 <a href="https://docs.flutter.io/flutter/widgets/StatefulWidget-class.html" target="_blank" rel="noopener">StatefulWidget</a> 类；2）一个 <a href="https://docs.flutter.io/flutter/widgets/State-class.html" target="_blank" rel="noopener">State</a> 类，StatefulWidget 类本身是不变的，但是 State 类在 widget 生命周期中始终存在。</p><h2 id="万物皆是-widget"><a href="#万物皆是-widget" class="headerlink" title="万物皆是 widget"></a>万物皆是 widget</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">      title: <span class="keyword">new</span> Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>这个代码中 ListTile 和 Text 都是 widget 他们各自的属性用括号括起来，记住，每个属性写完之后要加逗号，这个很容易忘。</p><h2 id="二阶段：加入Icon和跳转页面"><a href="#二阶段：加入Icon和跳转页面" class="headerlink" title="二阶段：加入Icon和跳转页面"></a>二阶段：加入Icon和跳转页面</h2><p>我们看一下最终结构关系图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/14/startflutter/construction.png" alt="第二阶段结构图" title>                </div>                <div class="image-caption">第二阶段结构图</div>            </figure><p>来看看第二阶段学习了哪些内容吧</p><h3 id="在-stateful-widget-上添加交互"><a href="#在-stateful-widget-上添加交互" class="headerlink" title="在 stateful widget 上添加交互"></a>在 stateful widget 上添加交互</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">      title: <span class="keyword">new</span> Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">      trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">        alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">        color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">      ),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (alreadySaved) &#123;</span><br><span class="line">            _saved.remove(pair);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _saved.add(pair);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 <code>onTap</code> 属性中，我们添加了点击事件的逻辑。我们在 _buildRow 中让心形 ❤️图标变得可以点击。如果单词条目已经添加到收藏夹中， 再次点击它将其从收藏夹中删除。当心形 ❤️图标被点击时，函数调用 setState() 通知框架状态已经改变。</p><p><strong>提示</strong>: 在 Flutter 的响应式风格的框架中，调用 setState() 会为 State 对象触发 build() 方法，从而导致对 UI 的更新</p><h3 id="导航到第二个页面；"><a href="#导航到第二个页面；" class="headerlink" title="导航到第二个页面；"></a>导航到第二个页面；</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">    Navigator.of(context).push(</span><br><span class="line">      <span class="keyword">new</span> MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">        builder: (BuildContext context) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">Iterable</span>&lt;ListTile&gt; tiles = _saved.map(</span><br><span class="line">            (WordPair pair) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">                title: <span class="keyword">new</span> Text(</span><br><span class="line">                  pair.asPascalCase,</span><br><span class="line">                  style: _biggerFont,</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; divided = ListTile.divideTiles(</span><br><span class="line">            context: context,</span><br><span class="line">            tiles: tiles,</span><br><span class="line">          ).toList();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">              title: <span class="keyword">const</span> Text(<span class="string">'Saved Suggestion'</span>),</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> ListView(children: divided),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>添加一个显示收藏夹内容的新页面（在 Flutter 中称为路由［route］）。</p><p>在 Flutter 中，Navigator (导航器)管理应用程序的路由栈。将路由推入（push）到导航器的栈中，将会显示更新为该路由页面。 从导航器的栈中弹出（pop）路由，将显示返回到前一个路由。</p><p>我们在 RandomWordsState 的 build 方法中为 AppBar 添加一个列表图标。当用户点击列表图标时，包含收藏夹的新路由页面入栈显示。</p><p>添加 <code>Navigator.push</code> 调用，这会使路由入栈（以后路由入栈均指推入到导航管理器的栈）</p><p>在新的 route（路由）页面中显示收藏的内容。Navigator（导航器）会在应用栏中自动添加一个”返回”按钮，无需调用Navigator.pop，点击后退按钮就会返回到主页路由。</p><p>接下来，添加 MaterialPageRoute 及其 builder。 现在，添加生成 ListTile 行的代码，ListTile 的 <code>divideTiles()</code> 方法在每个 ListTile 之间添加 1 像素的分割线。 该 <code>divided</code> 变量持有最终的列表项，并通过 <code>toList()</code> 方法非常方便的转换成列表显示。</p><p>builder 返回一个 Scaffold，其中包含名为”Saved Suggestions”的新路由的应用栏。新路由的body 由包含 ListTiles 行的 ListView 组成；每行之间通过一个分隔线分隔。</p><p>最终，我们可以通过 Flutter Inspector 查看 Widget Tree 具体结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/14/startflutter/inspector.png" alt="Widget Tree" title>                </div>                <div class="image-caption">Widget Tree</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="跨平台" scheme="http://www.allenmistake.top/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Flutter" scheme="http://www.allenmistake.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>经典定时同步算法与训练序列设计</title>
    <link href="http://www.allenmistake.top/2019/06/10/classictiming/"/>
    <id>http://www.allenmistake.top/2019/06/10/classictiming/</id>
    <published>2019-06-10T01:58:27.000Z</published>
    <updated>2019-06-10T07:03:39.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="S-amp-C算法"><a href="#S-amp-C算法" class="headerlink" title="S&amp;C算法"></a>S&amp;C算法</h2><p>S&amp;C 算法是 Schimidl&amp;Cox 同步算法的简称，是一种基于训练序列的同步估计算法，它是由 Schimidl 和 Cox 提出的。它是最经典的一种基于训练序列的同步估计算法，后续的 Minn 算法和 Park 算法都在它基础上做改进的。 S&amp;C 算法的训练序列的结构图如图 3-2 所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/classictiming/sc.png" alt="S&C训练序列结构图" title>                </div>                <div class="image-caption">S&C训练序列结构图</div>            </figure><p>如图 3-2 所示，训练序列 1 由两个长度为 N/ 2 训练序列 A 组成，这两个 A 是完全一样的序列；训练序列 2 由长度为 N 的训练序列 B 组成。训练序列 1 通常是用来完成符号定时估计和小数倍载波偏移估计。训练序列 1 的 N 个子载波的频域特性表现为，在偶数子载波上放置一个长度为 N/ 2 的1PN 序列，在奇数子载波上全部置零，然后进行 N 点的 IFFT 变换，就能够创造出前后 N/2 个点值一样的训练序列 1。具体实现的时候，可以使用 N/2 个点的 PN 序列，进行 IFFT 之后，得到序列 A，把 A 重复放置一次就能得到训练序列 1。训练序列 2 通常是和训练序列 1一起来完成整数倍载波偏移估计的。训练序列 2 的 N 个子载波的频域特性表现为，在奇数子载波上放置一个长度为 N/ 2 的其他序列，在偶数子载波上放置一个长度为 N/ 2 的2PN 序列，然后进行 N 点的 IFFT 变换，就可以得到训练序列 2，其中，2PN 序列与1PN 序列的有一个差分关系，如下式所示，</p><p>$v(k)=\frac{P N_{2}(k)}{P N_{1}(k)} \qquad k=1,2, \cdots N / 2$</p><p>从训练序列 1 的第一个采样值开始，将前后对应的数据共轭相乘相加，可以得到相关函数，如下式所示：</p><p>$P(d)=\sum_{n=0}^{N / 2-1} r^{*}(d+n) r(d+N / 2+n)$</p><p>式中 d 表示估计到的滑动窗的起始位置，理想位置就是第一个采样点。峰值会受到 CP 的干扰，进而出现一个平台，我们一般把它称为<strong>平台效应</strong>。下式表示滑动窗内的信号能量：</p><p>$R(d)=\sum_{n=0}^{N / 2-1}|r(d+n+N / 2)|^{2}$</p><p>归一化后的定时测度函数可定义为</p><p>$M(d)=\frac{|P(d)|^{2}}{R^{2}(d)}$</p><p>使得 $M(d)$ 取得最大值的 d 就是估计出的符号起始位置，一般把这个位置记为 $\hat{d}$ ，如下式所示：</p><p>$\hat{d}=\arg \max (M(d))$</p><h2 id="Minn-算法"><a href="#Minn-算法" class="headerlink" title="Minn 算法"></a>Minn 算法</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/classictiming/minn.png" alt="Minn算法训练序列结构图" title>                </div>                <div class="image-caption">Minn算法训练序列结构图</div>            </figure><p>从图 3-4 中可以看到，Minn 算法由 4 个训练符号构成，第一个和第二个训练符号都是 A，第三个和第四个训练符号都是 -A，其中，A 和 -A 互为相反数，A 是由伪随机 PN 序列进行 IFFT 之后得到的。 Minn 算法的运算过程和 S&amp;C 算法的运算过程基本一致，只是由于训练序列结构的改变，导致了相关函数和能量函数也一起发生了变化，具体变化如下式所示：</p><p>$P(d)=\sum_{k=0}^{1} \sum_{m=0}^{N / 4-1} r^{*}\left(d+\frac{N \cdot k}{2}+m\right) \cdot r\left(d+\frac{N \cdot k}{2}+m+\frac{N}{4}\right)$</p><p>$R(d)=\sum_{k=0}^{1} \sum_{m=0}^{N / 4-1}\left|r\left(d+\frac{N \cdot k}{2}+m+\frac{N}{4}\right)\right|^{2}$</p><p>$M(d)=\frac{|P(d)|^{2}}{R^{2}(d)}$</p><h2 id="Park-算法"><a href="#Park-算法" class="headerlink" title="Park 算法"></a>Park 算法</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/classictiming/park.png" alt="Park算法训练序列结构图" title>                </div>                <div class="image-caption">Park算法训练序列结构图</div>            </figure><p>从图 3-5 中可以看出一个 Park 算法的训练序列由四个训练符号构成的。其中 A 是由长度为 N/4 的伪随机 PN 序列经过 IFFT 得到的，B 是 A 的逆向排列，A*是A 的共轭，B*是 B 的共轭。 Park 算法的相关函数，能量函数和定时测度函数定义为：</p><p>$P(d)=\sum_{k=0}^{N / 2-1} r(d+k) \cdot r(d-k-1)$</p><p>$R(d)=\sum_{k=0}^{N / 2-1}|r(d+k)|^{2}$</p><p>$M(d)=\frac{|P(d)|^{2}}{R^{2}(d)}$</p><p>Park 算法的训练序列虽然前后也是对称的，但是并没有利用前后对称这一特性，而是利用了训练序列中心共轭对称这个更难得的性质。从中间两个值向两边依次进行相关运算，才能够达到唯一的相关峰值，排除 CP 的干扰。而且使得归一化后的符号定时测度函数 $M(\hat{d})$ 达到最大的 $\hat{d}$ 对应的并不是 FFT 窗开始的位置，而是训练序列的中点。Park 算法的相关函数的运算过程如图 3-6 所示，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/10/classictiming/process.png" alt="Park相关函数运算过程" title>                </div>                <div class="image-caption">Park相关函数运算过程</div>            </figure><h2 id="三种算法效果"><a href="#三种算法效果" class="headerlink" title="三种算法效果"></a>三种算法效果</h2><p>以上这三种方法在AWGN信道下表现良好<br>对于 S&amp;C 算法，S&amp;C 算法在各种信道下，在找出理想的 FFT 窗附近都存在着一个“平台”。<br>对于 Minn 算法和 Park 算法，在 ETU 信道（一种多径干扰模型）下，随着多径衰落、时延和频偏的增加，定时测度函数峰值被削弱，且幅度变化较大，也有可能出现“双峰”的情况，造成定时同步判断的错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="通信" scheme="http://www.allenmistake.top/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="定时同步" scheme="http://www.allenmistake.top/tags/%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-高效15法则</title>
    <link href="http://www.allenmistake.top/2019/06/08/bookGaoXiao/"/>
    <id>http://www.allenmistake.top/2019/06/08/bookGaoXiao/</id>
    <published>2019-06-08T11:11:31.000Z</published>
    <updated>2019-06-08T14:09:37.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/08/bookGaoXiao/gaoxiao.jpg" alt="高效15法则" title>                </div>                <div class="image-caption">高效15法则</div>            </figure><h2 id="放下To-do-List吧"><a href="#放下To-do-List吧" class="headerlink" title="放下To do List吧"></a>放下To do List吧</h2><p>用日程表代替任务清单</p><ul><li><p>安排一大块时间</p></li><li><p>重要的事情安排在早的时候</p></li><li><p>设计出理想的一周</p></li><li><p>每天 90 分钟 —— 2 小时缓冲时间</p></li></ul><h2 id="战胜拖延症"><a href="#战胜拖延症" class="headerlink" title="战胜拖延症"></a>战胜拖延症</h2><ul><li>未来的我是最大的敌人</li><li>想一想为什么要做，做这件事情带来的乐趣 or 痛苦</li><li>可靠的伙伴</li><li>奖励和惩罚</li><li>行动，向理想中的自己进发</li><li>足够好的目标（也许不完美）</li></ul><h2 id="随手记"><a href="#随手记" class="headerlink" title="随手记"></a>随手记</h2><ul><li>准备一个小本本，不要错过任何一个想法</li><li>用手机笔记，而不是笔记本电脑</li></ul><h2 id="拒绝"><a href="#拒绝" class="headerlink" title="拒绝"></a>拒绝</h2><ul><li>每天只有 1440 分钟，利用好</li><li>每个 Yes 意味着对另一件事情说 No</li></ul><h2 id="帕雷托（八二法则）"><a href="#帕雷托（八二法则）" class="headerlink" title="帕雷托（八二法则）"></a>帕雷托（八二法则）</h2><ul><li>80% 的结果是由 20% 的行动产生</li><li>思维模式 -&gt; 分辨出带给你超额回报的少数事情</li><li>判断你哪 20% 的时间会生成 80% 的价值</li></ul><h2 id="教你省时"><a href="#教你省时" class="headerlink" title="教你省时"></a>教你省时</h2><ol><li>放弃 —— 什么事情可以不做</li><li>分派 —— 那些可以分派出去</li><li>重新设计 —— 那些需要我换种节省时间的方式继续做</li></ol><h2 id="主题日"><a href="#主题日" class="headerlink" title="主题日"></a>主题日</h2><p>主题日的设置可以提高效率，主题日中的主题占据很大部分时间</p><ol><li>专注日 （周二——周四）</li><li>缓冲日 （周一、周日）</li><li>自由日 （周五、周六） 恢复精力</li></ol><h2 id="科学方法"><a href="#科学方法" class="headerlink" title="科学方法"></a>科学方法</h2><p>凡是只做一次，如果一件事只需做 5 分钟，立刻去做</p><h2 id="改变清晨，改变人生"><a href="#改变清晨，改变人生" class="headerlink" title="改变清晨，改变人生"></a>改变清晨，改变人生</h2><ul><li>6 点甚至更早起床（个人觉得 7 点差不多）</li><li>饮用大量水可补充水分</li><li>健康早餐 + 运动</li><li>少吃碳水化合物（糖类和淀粉，现实当中土豆、零食）</li></ul><h2 id="精力就是一切"><a href="#精力就是一切" class="headerlink" title="精力就是一切"></a>精力就是一切</h2><ul><li>番茄工作法   25 分钟的工作，5 分钟的休息 保持精力</li><li>足够的睡眠</li><li>多吃天然食物（少吃零食、路边摊小吃）</li><li>多喝水，每天保持运动</li></ul><h2 id="E-3C"><a href="#E-3C" class="headerlink" title="E-3C"></a>E-3C</h2><ul><li>精力 Energy        精力就是效率，效率才是关键，而不是时间</li><li>捕捉 Capture        捕捉生活中的灵感与想法</li><li>日历 Calendar        日程表</li><li>专注 Concentrate  保持专注，25 分钟的专注时光</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="读书" scheme="http://www.allenmistake.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="效率" scheme="http://www.allenmistake.top/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>归来仍是少年</title>
    <link href="http://www.allenmistake.top/2019/06/02/monthlysummary6/"/>
    <id>http://www.allenmistake.top/2019/06/02/monthlysummary6/</id>
    <published>2019-06-02T14:30:24.000Z</published>
    <updated>2020-01-03T09:06:01.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5月份工作"><a href="#5月份工作" class="headerlink" title="5月份工作"></a>5月份工作</h2><p>5月是一个过渡月份，由4月的忙碌重心逐渐向学习方面转移。可惜自己抵抗力实在太差，劳动节放假出去大吃大喝了一通之后，就喜得支气管炎，持续了大概两周，导致之前展望的工作也没有完成的太理想。</p><p>不过还好，基本把Java的并发和GC机制看完了。</p><h2 id="6月份计划"><a href="#6月份计划" class="headerlink" title="6月份计划"></a>6月份计划</h2><p>接下来可以把重心放到算法上面来，其次可以关注一下设计模式</p><p>算法方面：</p><ul><li>Leetcode 刷 10 道题，仍然以DP、回溯为主，最好设计一些哈希表操作，前面的经典题目可以再回顾一下。</li><li>《左程云》这本书还是值得看一下的，只不过有些问题点到为止，建议有些经典题目去 Leetcode 上面找大神，看看他们的解法</li></ul><p>设计模式：</p><ul><li>《大话设计模式》这本书我感觉写的不是很好，不知道为什么有那么多人推荐，不过结合着大PDF看肯定还是有收获的，还要结合源码看，这方面我觉得可以先对各种设计模式有一个整体的认知，然后再去读源码，这样理解逐步加深，有个过程。</li></ul><h2 id="其他感悟"><a href="#其他感悟" class="headerlink" title="其他感悟"></a>其他感悟</h2><p>六一儿童节刚刚过去，其实跟自己也没啥关系了，只是看着朋友圈发现每个人的人生轨迹真的是不一样，高中的同学很多都去留学了，他们的视野比我更开阔，发展的前景也更好，而我却只能和一些2本 3本挤破头去争互联网公司的 996 。其实想想自己家乡也有几个很一般的研究所，但是进去直接就是养老，感觉毫无意义，难道我25岁就要走进办公室政治，混工龄？</p><p>我不想这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM学习之HotSpot虚拟机中的垃圾收集器</title>
    <link href="http://www.allenmistake.top/2019/05/27/JVM4/"/>
    <id>http://www.allenmistake.top/2019/05/27/JVM4/</id>
    <published>2019-05-27T14:53:31.000Z</published>
    <updated>2019-07-18T08:18:54.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。<br>下面是Hotspot 虚拟机包含的所有收集器：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/27/JVM4/垃圾收集器.png" alt="HotSpot 虚拟机的垃圾收集器" title>                </div>                <div class="image-caption">HotSpot 虚拟机的垃圾收集器</div>            </figure><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><p>!(Seral.jpg)</p><ul><li>特点：是最基本、发展历史最悠久的收集器。这是一个单线程收集器。但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是<strong>它在进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束</strong>。</li><li>应用年代：新生代</li><li>采用算法：复制算法</li><li>应用：是虚拟机运行在Client模式下的默认新生代收集器。</li><li>优势：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程效率。</li><li>缺点：Stop the world！</li></ul><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>!(ParNew.jpg)</p><ul><li>特点：ParNew收集器其实就是Serial收集器的多线程版本</li><li>应用年代：新生代</li><li>采用算法：复制算法</li><li>应用：CPU较多</li><li>优势：<strong>除了Serial收集器外，目前只有它能与CMS收集器配合工作</strong>。</li><li>缺点：在单CPU环境，表现甚至不如Serial</li></ul><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>!(Para.jpg)</p><ul><li>特点：Parallel Scavenge收集器的目标是达到一个可控制的吞吐量。（吞吐量 = 运行用户代码时间 + 垃圾收集时间）。他的关注点是<strong>尽可能地缩短垃圾收集时用户线程的停顿时间</strong>。还可以根据当前系统的运行情况收集性能监测信息，动态调整这些参数以提供最合适的停顿时间或者最大吞吐量。</li><li>应用年代：新生代</li><li>采用算法：复制算法</li><li>优势：同特点</li></ul><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><ul><li>特点：Serial 的老年版本</li><li>应用年代：老年代</li><li>采用算法：标记-整理</li><li>应用：与Parallel Scavenge收集器搭配使用；作为CMS收集器的后备预案，在并发收集发生Conurrent Mode Failure 使用。</li><li>优势：</li></ul><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><ul><li>特点：Parallel Old是Parallel Scavenge收集器的老年代版本</li><li>应用年代：老年代</li><li>采用算法：标记-整理</li><li>应用：注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel</li></ul><h3 id="CMS（重点）"><a href="#CMS（重点）" class="headerlink" title="CMS（重点）"></a>CMS（重点）</h3><ul><li>特点：是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。他的关注点在于<strong>尽可能地缩短垃圾收集时用户线程的停顿时间</strong>。</li><li>应用年代：老年代</li><li>采用算法：<strong>标记-清除</strong></li><li>应用场景：大部分集中在互联网站或者B/S系统的服务端上的 Java 应用</li><li>优势：停顿时间短</li></ul><p>它的运作过程相对来说较为复杂，分为 4 个步骤<br>初始标记、并发标记、重新标记、并发清除</p><p>!(cms.jpg)</p><p>其中，初始标记，重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只标记一下GC Roots能直接关联到的对象，速度很快。并发标记阶段就是进行GC Roots Tracing的过程。<br>重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记几率，这个阶段的停顿时间一般会比初始标记阶段稍长，但远比并发标记时间短。<br>整个过程耗时最长的阶段是并发标记，并发清除过程，但这两个过程可以和用户线程一起工作。</p><p><strong>缺点</strong>：</p><ul><li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。</li><li>CMS收集器无法处理浮动垃圾，可能出现“Conurrent Mode Failure”失败而导致另一次 Full GC的产生。由于 CMS 并发清理阶段用户线程还在运行着，伴随程序运行自然就还会产生新的垃圾，这一部分垃圾出现在标记过程之后，CMS无法在档次收集中处理掉它们，只好留待下一次GC时再清理掉。这部分垃圾就称为“浮动垃圾”。因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时程序运作使用。在JDK1.5的默认设置下，CMS 收集器当老年代使用了 68% 的空间后就会被激活。如果预留空间无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案Serial Old。</li><li>CMS是一款基于“标记-清除”算法实现的收集器，所以会有大量空间碎片问题。</li></ul><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/27/JVM4/heap.png" alt="Hotspot堆结构" title>                </div>                <div class="image-caption">Hotspot堆结构</div>            </figure><p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/27/JVM4/G1heap.png" alt="G1堆分配" title>                </div>                <div class="image-caption">G1堆分配</div>            </figure><p>通过引入 Region 的概念，从而<strong>将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收</strong>。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并<strong>维护一个优先列表</strong>，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点：</p><ul><li>空间整合：整体来看是基于“<strong>标记 - 整理</strong>”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.allenmistake.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：95&amp;96：不同的二叉搜索树</title>
    <link href="http://www.allenmistake.top/2019/05/21/leetcode96/"/>
    <id>http://www.allenmistake.top/2019/05/21/leetcode96/</id>
    <published>2019-05-21T13:20:14.000Z</published>
    <updated>2019-05-21T13:24:34.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="96-题目"><a href="#96-题目" class="headerlink" title="96-题目"></a>96-题目</h2><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: 5</span><br><span class="line">解释:</span><br><span class="line">给定 n = 3, 一共有 5 种不同结构的二叉搜索树:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h2 id="96-分析"><a href="#96-分析" class="headerlink" title="96-分析"></a>96-分析</h2><p>这个问题可以用动态规划的方式解决。我将在下面解释直觉和公式。</p><p>给定序列1…n，为了从序列中构造二叉搜索树(BST)，我们可以列举序列中的每个数字 i ，并将该数字用作根，自然，其左侧的子序列1…(i-1)将位于根的左分支，类似地，右子序列(i+1)…n位于根的右分支。然后我们可以递归地从子序列构造子树。通过以上方法，我们可以确保我们构建的BST都是独特的，因为它们有独特的根。</p><p>问题是要计算唯一的二叉树数量。为此，我们需要定义两个功能:</p><ul><li><p>$G(n)$:长度为n的序列的唯一BST数。</p></li><li><p>$F(i，n)，1 &lt;= i &lt;= n$:唯一BST的数目，其中 i 是BST的根，序列范围从1到n。</p></li></ul><p>可以看出，G(n)是我们需要计算来解决这个问题的实际函数。G(n)可以从F(i，n)中导出，最后递归地引用G(n)。<br>首先，给定上面的定义，我们可以看到唯一的BST G(n)的总数，是使用每个数字I作为根的BST F(i)的总和。<br>即<br>$$G(n) = F(1, n) + F(2, n) + … + F(n, n)      (1)$$<br>特别是在下面的情况下，从长度为1(只有根)或0(空树)的序列中，只有一个组合可以构造一个BST。<br>即<br>$$G(0)=1，G(1)=1$$<br>给定序列1…n，我们从序列中选择一个数字 i 作为根，那么具有指定根F(i)的唯一BST的数量是其左右子树的BST数量的笛卡尔乘积。例如，F(3，7):以数字3为根的唯一BST树的数目。要从以3为根的整个序列[1，2，3，4，5，6，7]中构建一个唯一的边界点，也就是说，我们需要从它的左子序列[1，2]中构建一个唯一的边界点，从右子序列[4，5，6，7]中构建另一个边界点，然后将它们组合在一起(即笛卡尔乘积)。棘手的是，我们可以将[1，2]序列之后的唯一BST的数量当作G(2)，将[4，5，6，7]序列外的唯一BST的数量视为G(4)。因此，F(3，7) = G(2) <em> G(4)。即<br>$$F(i，n)= G(i-1)</em> G(n-i)  1 &lt;= i &lt;= n          (2)$$<br>结合以上两个公式，我们得到了G(n)的递推公式。即<br>$$G(n)= G(0)<em> G(n-1)+G(1)</em> G(n-2)+…+G(n-1)* G(0)$$<br>就计算而言，我们需要从较低的数字开始，因为G(n)的值取决于G(0) … G(n-1)的值。</p><p>保存中间结果，在这道题中，中间结果所代表变量是 $G(n)$ 。</p><h2 id="96-代码"><a href="#96-代码" class="headerlink" title="96-代码"></a>96-代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] G = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    G[<span class="number">0</span>] = G[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; ++j) &#123;</span><br><span class="line">            G[i] += G[j-<span class="number">1</span>] * G[i-j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> G[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="95-题目"><a href="#95-题目" class="headerlink" title="95-题目"></a>95-题目</h2><p>给定一个整数 n，生成所有由 1 … n 为节点所组成的二叉搜索树。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">解释:</span><br><span class="line">以上的输出对应以下 5 种不同结构的二叉搜索树：</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h2 id="95-代码"><a href="#95-代码" class="headerlink" title="95-代码"></a>95-代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> genTrees(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">genTrees</span> <span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">    <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> TreeNode(start));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;TreeNode&gt; left,right;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= end;i++)&#123;</span><br><span class="line">        left = genTrees(start, i-<span class="number">1</span>);</span><br><span class="line">        right = genTrees(i+<span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">for</span>(TreeNode lnode: left)&#123;</span><br><span class="line">            <span class="keyword">for</span>(TreeNode rnode: right)&#123;</span><br><span class="line">                TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                root.left = lnode;</span><br><span class="line">                root.right = rnode;</span><br><span class="line">                list.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树" scheme="http://www.allenmistake.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：买卖股票的最佳时期系列</title>
    <link href="http://www.allenmistake.top/2019/05/19/leetcodeStock/"/>
    <id>http://www.allenmistake.top/2019/05/19/leetcodeStock/</id>
    <published>2019-05-19T12:27:20.000Z</published>
    <updated>2019-05-20T14:27:40.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="牛刀小试——买卖一次"><a href="#牛刀小试——买卖一次" class="headerlink" title="牛刀小试——买卖一次"></a>牛刀小试——买卖一次</h2><p>买卖股票是 Leetcode 上一系列问题，基本都是用动态规划和贪心算法思想计算出来的。我们看第一个入门级的：</p><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line">解释: 在第 <span class="number">2</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">5</span> 天（股票价格 = <span class="number">6</span>）的时候卖出，最大利润 = <span class="number">6</span>-<span class="number">1</span> = <span class="number">5</span> 。</span><br><span class="line">     注意利润不能是 <span class="number">7</span>-<span class="number">1</span> = <span class="number">6</span>, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 <span class="number">0</span>。</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们完全可以用暴力法解决问题，但是有没有一种更好的方法呢？答案是肯定的，我们完全可以一次遍历，只需要两个变量，一个变量存储目前遇到的最小值，一个变量储存目前遇到的最大利润。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; min)</span><br><span class="line">                min = prices[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(prices[i] - min &gt; max)</span><br><span class="line">                max = prices[i] - min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="山雨欲来——多次买卖"><a href="#山雨欲来——多次买卖" class="headerlink" title="山雨欲来——多次买卖"></a>山雨欲来——多次买卖</h2><p>这次再上一个问题的基础上，改动为了可以多次买卖。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>我们可以把利润 <code>profit</code> 设为一个累积量，只要下一次的比上一次的大，就把差值累计给 <code>profit</code> ，如果下一次的比上一次的小，更新 <code>min</code>（可以理解为：当n &lt; n-1时，在 n-1 时刻将股票抛售， 在 n 时刻买）<br>、</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;prices.length; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; prices[i-<span class="number">1</span>])</span><br><span class="line">                min = prices[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                profit = profit + prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="风起云涌——只能买两次"><a href="#风起云涌——只能买两次" class="headerlink" title="风起云涌——只能买两次"></a>风起云涌——只能买两次</h2><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,3,5,0,0,3,1,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。</span><br><span class="line">     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   </span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   </span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这道题有一个常人很容易陷入的误区，一开始我觉得这道题挺简单的，后来发现自己想的有问题,<br>我一开始的做法是，维护两个最大值，<code>max1</code>,<code>max2</code>，像上面那道题一样，只要下一次的比上一次的大，就把差值累计给 <code>profit</code> ，并和<code>max1</code>、<code>max2</code>对比，如果比其中任何一个大，替换掉那一个，如果下一次的比上一次的小，更新 <code>min</code>，重新计算 <code>profit</code>，但是这样有个问题，加入数组是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>我的方法是,<br>1-&gt;4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max1 = <span class="number">3</span>, max2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>2-&gt;7更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max1 = <span class="number">5</span>,max2 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>2-&gt;9</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max1 = <span class="number">7</span>,max1 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>所以我的最终答案是12，然而，最优方法是1-&gt;7,2-&gt;9此时，最大利润是13.</p><p>那么，我们究竟如何取舍呢？</p><h4 id="方法一——四变量"><a href="#方法一——四变量" class="headerlink" title="方法一——四变量"></a>方法一——四变量</h4><p>其实在第二道题的基础上稍微修改一下思路就好，但不是很容易想到，首先我们要建立一个变量来存储第二次买股票时所花费的费用，这个变量存在的目的意义是为了计算第二次卖出股票时的利润<br>$$buyTwoProfit = prices[i] - buyTwoCost$$<br>而这个buyTwoCost至关重要，我们如何确定他的更新呢？其实仔细想想就知道；</p><ul><li>首先，第二次买入一定是股票下降的时候</li><li>第二次买入一定是赚，<strong>确保赚的比之前的第二次买入多才会更新</strong></li></ul><p>$$buyTwoCost = prices[i] - buyOneProfit$$</p><p>对应代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buyTwoCost = Math.min(buyTwoCost, prices[i] - buyOneProfit);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/19/leetcodeStock/买卖两次股票.png" alt="四变量过程" title>                </div>                <div class="image-caption">四变量过程</div>            </figure><h4 id="方法二——分界线"><a href="#方法二——分界线" class="headerlink" title="方法二——分界线"></a>方法二——分界线</h4><p>我们可以换个角度想</p><p>最多允许两次不相交的交易，也就意味着这两次交易间存在某一分界线，考虑到可只交易一次，也可交易零次，故分界线的变化范围为第一天至最后一天，只需考虑分界线两边各自的最大利润，最后选出利润和最大的即可。这种方法抽象之后则为首先将[1,n] 拆分为[1,i] 和[i+1,n], 参考卖股票系列的第一题计算各自区间内的最大利润即可。[1,i] 区间的最大利润很好算，但是如何计算[i+1,n] 区间的最大利润值呢？难道需要重复n 次才能得到？注意到区间的右侧n 是个不变值，我们从[1, i] 计算最大利润是更新波谷的值，那么我们可否逆序计算最大利润呢？这时候就需要更新记录波峰的值了</p><h3 id="方法一代码"><a href="#方法一代码" class="headerlink" title="方法一代码"></a>方法一代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> buyOneCost = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> buyOneProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buyTwoCost = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> buyTwoProfit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i ++) &#123;</span><br><span class="line">            buyOneProfit = Math.max(buyOneProfit, prices[i] - buyOneCost);</span><br><span class="line">            buyOneCost = Math.min(buyOneCost, prices[i]);</span><br><span class="line">            buyTwoProfit = Math.max(buyTwoProfit, prices[i] - buyTwoCost);</span><br><span class="line">            buyTwoCost = Math.min(buyTwoCost, prices[i] - buyOneProfit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(buyOneProfit, buyTwoProfit);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方法二代码"><a href="#方法二代码" class="headerlink" title="方法二代码"></a>方法二代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// get profit in the front of prices</span></span><br><span class="line">    <span class="keyword">int</span>[] profitFront = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    profitFront[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, valley = prices[<span class="number">0</span>]; i &lt; prices.length; i++) &#123;</span><br><span class="line">        profitFront[i] = Math.max(profitFront[i - <span class="number">1</span>], prices[i] - valley);</span><br><span class="line">        valley = Math.min(valley, prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get profit in the back of prices, (i, n)</span></span><br><span class="line">    <span class="keyword">int</span>[] profitBack = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    profitBack[prices.length - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = prices.length - <span class="number">2</span>, peak = prices[prices.length - <span class="number">1</span>]; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        profitBack[i] = Math.max(profitBack[i + <span class="number">1</span>], peak - p</span><br><span class="line">        rices[i]);</span><br><span class="line">        peak = Math.max(peak, prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// add the profit front and back</span></span><br><span class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        profit = Math.max(profit, profitFront[i] + profitBack[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="惊涛骇浪——k次交易"><a href="#惊涛骇浪——k次交易" class="headerlink" title="惊涛骇浪——k次交易"></a>惊涛骇浪——k次交易</h2><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,4,1], k = 2</span><br><span class="line">输出: 2</span><br><span class="line">解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,6,5,0,3], k = 2</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。</span><br><span class="line">     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>我们仍然使用动态规划来完成。我们维护两种量，一个是当前到达第i天可以最多进行 j 次交易，最好的利润是多少（global[i][j] ），另一个是当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少（local[i][j] ）。下面我们来看递推式，全局的比较简单，global[i][j]=max(local[i][j],global[i-1][j]) ，也就是去当前局部最好的，和过往全局最好的中大的那个（因为最后一次交易如果包含当前天一定在局部最好的里面，否则一定在过往全局最优的里面）。全局（到达第i天进行j次交易的最大收益）= max{局部（在第i天交易后，恰好满足j次交易），全局（到达第i-1天时已经满足j次交易）}对于局部变量的维护，递推式是<br>$$local[i][j] = max(global[i-1][j-1] + \text{max}(diff,0),local[i-1][j] + diff)$$</p><p>也就是看两个量</p><ul><li>第一个是全局到 i-1 天进行 j-1 次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要 j-1 次交易，最后一次交易取当前天）</li><li>第二个量则是取 local 第 i-1 天j次交易，然后加上今天的差值（这里因为local[i-1][j] 比如包含第i-1天卖出的交易，所以现在变成第i天卖出，并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。</li></ul><p>局部（在第i天交易后，总共交易了j次）= max{情况2，情况1}<br>情况1：在第i-1天时，恰好已经交易了j次（local[i-1][j] ），那么如果i-1天到i天再交易一次：即在第i-1天买入，第i天卖出（diff），则这不并不会增加交易次数！【例如我在第一天买入，第二天卖出；然后第二天又买入，第三天再卖出的行为和第一天买入，第三天卖出的效果是一样的，其实只进行了一次交易！因为有连续性】<br>情况2：第i-1天后，共交易了 j-1 次（global[i-1][j-1] ），因此为了满足“第 i天过后共进行了 j次交易，且第i天必须进行交易”的条件：我们可以选择:</p><ul><li>在第i-1天买入，然后再第i天卖出（diff）</li><li>在第i天买入，然后同样在第i天卖出（收益为0）。</li></ul><p>上面的算法中对于天数需要一次扫描，而每次要对交易次数进行递推式求解，所以时间复杂度是$O(n*k)$，如果是最多进行两次交易，那么复杂度还是$O(n)$。空间上只需要维护当天数据皆可以，所以是$O(k)$，当 k=2，则是$O(1)$。<br>补充：这道题还有一个陷阱，就是当k大于 n（天数）/2 时，其实就退化成第二个问题了</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> days = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (days/<span class="number">2</span> &lt;= k) &#123;</span><br><span class="line">        <span class="keyword">return</span> maxProfit2(prices);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// local[i][j] 表示前i天，至多进行j次交易，第i天必须sell的最大获益</span></span><br><span class="line">    <span class="keyword">int</span>[][] local = <span class="keyword">new</span> <span class="keyword">int</span>[days][k + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// global[i][j] 表示前i天，至多进行j次交易，第i天可以不sell的最大获益</span></span><br><span class="line">    <span class="keyword">int</span>[][] global = <span class="keyword">new</span> <span class="keyword">int</span>[days][k + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; days; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            local[i][j] = Math.max(global[i - <span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">                        + Math.max(diff, <span class="number">0</span>),local[i - <span class="number">1</span>][j] + diff);</span><br><span class="line">            global[i][j] = Math.max(global[i - <span class="number">1</span>][j], local[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> global[days - <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            maxProfit += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结JVM之类加载与双亲委派模型</title>
    <link href="http://www.allenmistake.top/2019/05/19/JVM3/"/>
    <id>http://www.allenmistake.top/2019/05/19/JVM3/</id>
    <published>2019-05-19T04:10:16.000Z</published>
    <updated>2019-07-18T09:18:47.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><strong>加载</strong>，<strong>验证</strong>，<strong>准备</strong>，<strong>解析</strong>，<strong>初始化</strong>，<strong>使用</strong>和<strong>卸载</strong>。其中验证，准备，解析3个部分统称为连接。<br>这7个阶段发生顺序如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/19/JVM3/classlife.png" alt="类加载步骤" title>                </div>                <div class="image-caption">类加载步骤</div>            </figure><p>其中加载，验证，准备，解析及初始化是属于类加载机制中的步骤。注意此处的加载不等同于类加载。</p><h3 id="触发类加载的条件"><a href="#触发类加载的条件" class="headerlink" title="触发类加载的条件"></a>触发类加载的条件</h3><ol><li>遇到<code>new</code>,<code>getstatic</code>,<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时，如果类没有进行过初始化，则需要先触发初始化。生成这4条指令的最常见的Java代码场景是：<ul><li>使用<strong>new</strong>关键字实例化对象的时候</li><li>读取或设置一个类的<strong>静态字段</strong>的时候（被final修饰，已在编译期把结果放入常量池的静态字段除外）</li><li><strong>调用</strong>一个类的<strong>静态方法</strong>的时候</li></ul></li><li>使用java.lang.reflect包的方法对类进行反射调用的时候。</li><li>当初始化一个类的时候，发现其父类还没有进行过初始化，则需要先出发父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</li><li>当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle 实例最后的解析结果REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则需要先出发初始化。</li></ol><h3 id="类加载的具体过程"><a href="#类加载的具体过程" class="headerlink" title="类加载的具体过程"></a>类加载的具体过程</h3><p><strong>加载:</strong></p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转换为方法区内的运行时数据结构</li><li>在内存中<strong>生成一个代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的访问入口。</li></ol><p><strong>验证：</strong><br>是连接阶段的第一步，目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。注意，这个校验比静态编译器将源码转换成字节码时的校验更为严格！<br>包含四个阶段的校验动作</p><ol><li>文件格式验证<br>验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。</li><li>元数据验证<br>对类的元数据信息进行<strong>语义校验</strong>，是否不存在不符合Java语言规范的元数据信息</li><li>字节码验证<br>最复杂的一个阶段，主要目的是通过数据流和控制流分析，<strong>确定程序语义是合法的，符合逻辑的</strong>。对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。</li><li>符号引用验证<br>最后一个阶段的校验发生在虚拟机将符号引用转换为直接引用的时候，这个转换动作将在连接的第三个阶段——解析阶段中发生。符号验证的目的是确保解析动作能正常进行。</li></ol><p><strong>准备：</strong><br>准备阶段是正式为<strong>类变量分配内存并设置类变量初始值</strong>的阶段。这些变量所使用的内存都将在方法区中分配。只包括类变量。初始值“通常情况”下是数据类型的零值。<br>“特殊情况”下，如果类字段的字段属性表中存在ConstantValue 属性，那么在准备阶段变量的值就会被初始化为 ConstantValue 属性所指定的值。</p><p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong><br>虚拟机将常量池内的符号引用替换为直接引用的过程。<br>“动态解析”的含义就是必须等到程序实际运行到这条指令的时候，解析动作才能进行。相对的，其余可触发解析的指令都是“静态”的，可以在刚刚完成加载阶段，还没有开始执行代码时就进行解析。</p><p><strong>初始化：</strong><br>类加载过程中的最后一步。<br>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。<br><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的。<br><code>&lt;clinit&gt;()</code>与类的构造函数不同，它不需要显示地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕。<br>简单地说，初始化就是对<strong>类变量进行赋值及执行静态代码块</strong>。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>前面提到的加载部分的功能是将类的class文件读入内存，并为之创建一个java.lang.Class对象。这部分功能就是由类加载器来实现的。</p><h3 id="类加载分类"><a href="#类加载分类" class="headerlink" title="类加载分类"></a>类加载分类</h3><p>类加载器类似于原始部落结构，存在权力等级制度。类加载器具有等级制度，但并非是继承关系（毕竟老大是用c++写的。。）以组合的方式来复用父加载器的功能，这也符合组合优先原则。</p><ul><li><strong>启动类加载器</strong>（Bootstrap ClassLoader）：由C++语言实现（针对HotSpot）,负责将存放在\lib目录或-Xbootclasspath参数指定的路径中的类库加载到内存中，即负责加载Java的（Object、System、String等）。</li><li><strong>平台类加载器</strong>（Platform ClassLoader）：用以加载一些扩展的系统类。如 XML、加密、压缩相关功能类：</li><li><strong>应用程序类加载器</strong>（Application ClassLoader）：负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器，通过<br>ClassLoader.getSystemClassLoader()方法直接获取。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。<br>以上3种类加载器基本上负责了所有Java类的加载。下面我们来具体了解上述几个类加载器实现类加载过程时相互配合协作的流程。</li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>双亲委派模型的工作流程是：<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成</strong>，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/19/JVM3/双亲委派模型.png" alt="双亲委派模型" title>                </div>                <div class="image-caption">双亲委派模型</div>            </figure><p>低层次的当前类加载器，不能覆盖更高层次类加载器已经加载的类。如果低层次的类加载器想加载一个位置，要非常礼貌的向上<strong>逐级</strong>询问：“请问，这个类已经加载了吗？”被询问的高层次类加载器会自问两个问题：第一，我是否已经加载过此类？第二，如果没有，是否可以加载此类？只有当所有高层次类加载器在两个问题上的回答均为“否”时，才能让当前类加载器加载这个未知类。如图所示，左侧绿色箭头向上主机询问是否能加载此类，如果都加载不了，则通知发起加载请求的当前类加载器，准予加载。在右侧三个小标签里，列举了此层类加载器主要加载的代表性类库，事实上不止于此。</p><p>这样的好处是不同层次的类加载器具有不同优先级，比如所有Java对象的超级父类java.lang.Object，位于rt.jar，无论哪个类加载器加载该类，最终都是由启动类加载器进行加载，保证安全。即使用户自己编写一个java.lang.Object类并放入程序中，虽能正常编译，但不会被加载运行，保证不会出现混乱。</p><h3 id="双亲委派模型的代码实现"><a href="#双亲委派模型的代码实现" class="headerlink" title="双亲委派模型的代码实现"></a>双亲委派模型的代码实现</h3><p>ClassLoader中loadClass方法实现了双亲委派模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">//检查该类是否已经加载过</span></span><br><span class="line">        Class c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果该类没有加载，则进入该分支</span></span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//当父类的加载器不为空，则通过父类的loadClass来加载该类</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//当父类的加载器为空，则调用启动类加载器来加载该类</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">//非空父类的类加载器无法找到相应的类，则抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//当父类加载器无法加载时，则调用findClass方法来加载该类</span></span><br><span class="line">            <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">            c = findClass(name); <span class="comment">//用户可通过覆写该方法，来自定义类加载器</span></span><br><span class="line">            <span class="comment">//用于统计类加载器相关的信息</span></span><br><span class="line">            sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">            sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">            sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        <span class="comment">//对类进行link操作</span></span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程大致如下：</p><ol><li>首先，检查一下指定名称的类是否已经加载过，如果加载过了，就不需要再加载，直接返回。</li><li>如果此类没有加载过，那么，再判断一下是否有父加载器；如果有父加载器，则由父加载器加载（即调用parent.loadClass(name, false);）.或者是调用bootstrap类加载器来加载。</li><li>如果父加载器及bootstrap类加载器都没有找到指定的类，那么调用当前类加载器的findClass方法来完成类加载。关于自定义类加载器，本篇文章就不介绍了，主要是重写findClass方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.allenmistake.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结JVM之内存模型</title>
    <link href="http://www.allenmistake.top/2019/05/18/JVM2/"/>
    <id>http://www.allenmistake.top/2019/05/18/JVM2/</id>
    <published>2019-05-18T02:30:34.000Z</published>
    <updated>2019-05-20T13:49:48.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对象创建、内存布局和访问定位"><a href="#对象创建、内存布局和访问定位" class="headerlink" title="对象创建、内存布局和访问定位"></a>对象创建、内存布局和访问定位</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><ol><li>虚拟机遇到一个new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用；</li><li>检查这个符号引用代表的类是否已经被加载，解析和初始化过。如果没有，那必须先执行响应的类加载过程；</li><li>在类加载检查功通过后，为新生对象分配内存。对象所需的内存大小在类加载完成后便可完全确定。</li></ol><h2 id="从源文件到字节码"><a href="#从源文件到字节码" class="headerlink" title="从源文件到字节码"></a>从源文件到字节码</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/18/JVM2/过程.png" alt="源码转化成字节码的过程" title>                </div>                <div class="image-caption">源码转化成字节码的过程</div>            </figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>词法解析是通过空格分割出单词、操作符、控制符符等信息，将其形成 token 信息流， 传递给语法解析器；在语法解析时，把词法解析得到的 token 信息流按照  Java 语法规则组装成一颗语法树，如图虚线框所示；在语义分析阶段，需要检查关键字的使用是否合理、类型是否匹配、作用域是否正确等；当语义分析完成之后，即可生成字节码。</p><p>字节码必须通过类加载过程加载到 JVM 环境，才可以执行。执行有三种模式：第一，解释执行；第二，JIT编译执行；第三，JIT 编译与解释混合执行（主流JVM默认执行模式）。混合执行模式的优势在于解释器<strong>在启动时先解释执行</strong>，省去编译时间。随着时间推进，JVM 通过热点代码统计分析，识别高频的方法调用、循环体、公共模块等，<strong>基于强大的 JIT 动态编译技术，将热点代码转换成机器码，直接交给 CPU 执行</strong>。<br>JIT 的作用是将 Java 字节码动态的编译成可以直接发送给处理器指令执行的机器码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.allenmistake.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：120：三角形最小路径和</title>
    <link href="http://www.allenmistake.top/2019/05/14/leetcode120/"/>
    <id>http://www.allenmistake.top/2019/05/14/leetcode120/</id>
    <published>2019-05-14T15:36:23.000Z</published>
    <updated>2019-05-15T11:39:33.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p>例如，给定三角形：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   [<span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"> [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</span><br><span class="line">[<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p><p>说明：</p><p>如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>三角形具有树状结构，我们首先想到的是遍历算法，例如DFS。然而，如果你仔细观察，你会发现<strong>相邻的节点总是共享一个“分支”</strong>。换句话说，<strong>有重叠的子问题</strong>。此外，假设x和y是k的“子”，一旦从x和y到底部的最小路径已知，从k开始的最小路径可以在O(1)中确定，这是<strong>最佳子结构</strong>。下一次的结果会利用到上一次的结果。因此，就时间复杂性而言，动态规划将是这个问题的最佳解决方案。</p><h3 id="自上而下-vs-自下而上"><a href="#自上而下-vs-自下而上" class="headerlink" title="自上而下 vs 自下而上"></a>自上而下 vs 自下而上</h3><p>对于“自上而下”的动态规划，从最顶端的节点开始，我们递归地找到每个节点的最小路径和。计算路径和时，我们将其存储在数组中(记忆)；下次我们需要计算同一节点的路径和时，只需从数组中检索它。但是，您需要一个至少与输入三角形本身大小相同的缓存来存储 <strong>pathsum</strong> (占用 $O(N^2)$ 空间)。或许我们可以做一些剪枝优化，有可能释放一些在特定点之后永远不会使用的内存，但是在递归解决方案中不能直接看到正在处理的节点的顺序，因此决定丢弃缓存的哪一部分可能是一项困难的工作。</p><p>另一方面，自下而上的动态规划非常简单————我们从底层的节点开始；这些节点的最小路径和是节点本身的值。从那里开始，<strong>第 k 行第 i 节点处的最小路径总和将是其两个子节点的路径总和加上自身值中的较小者</strong>，即:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A[k][i] = Math.min( A[k+<span class="number">1</span>][i], A[k+<span class="number">1</span>][i+<span class="number">1</span>]) + triangle[k][i];</span><br></pre></td></tr></table></figure><p>或者更好的是，因为在计算 minpath[k] 之后，行 minpath[k+1] 将是无用的，所以我们可以简单地将 minpath 设置为一维数组，并随着迭代不断更新自身:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A[j] = Math.min(A[j], A[j+<span class="number">1</span>]) + triangle.get(i).get(j);</span><br></pre></td></tr></table></figure><h2 id="动态规划小结"><a href="#动态规划小结" class="headerlink" title="动态规划小结"></a>动态规划小结</h2><p>最近也做了不少关于动态规划的题目，之后还会不断进行补充，我觉得现在是一个不错的时机来对动态规划问题思路做一个总结：</p><p>拿到一道算法题，如何快速确定他可以用动态规划做呢？</p><p>首先，这道题需要求最优解，也就是说答案一般是唯一的，但是这个唯一是相对的，比如之前的机器人路径，明明最后有那么多条路径可以到终点，为什么也用动态规划呢？关于这个问题，我们要发散思维，虽然路径不是唯一的，但是可达路径数是唯一的。我们最终求的结果（返回值）也是路径数。所以我们采用动态规划，当然，还有下面一个重要原因。</p><p>在计算过程中，$n+1$ <strong>步的计算可以用到第</strong> $n$ <strong>步的结果</strong> ，我们可以建立一个存储结构来存放中间产生的结果，来给第 n+1 步提供便利，而不需要从第一步重新计算，这也是动态规划不同于回溯的地方。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.size()+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = triangle.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; triangle.get(i).size(); j++)&#123;</span><br><span class="line">            A[j] = Math.min(A[j], A[j+<span class="number">1</span>]) + triangle.get(i).get(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多动态规划问题"><a href="#更多动态规划问题" class="headerlink" title="更多动态规划问题"></a>更多动态规划问题</h2><p>更多动态规划问题关注标签：<a href="https://allenmistake.github.io/tags/动态规划/" target="_blank" rel="noopener">动态规划</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>从 JDK7 与 JDK8 对比详细分析 HashMap 的原理与优化</title>
    <link href="http://www.allenmistake.top/2019/05/13/hashmap/"/>
    <id>http://www.allenmistake.top/2019/05/13/hashmap/</id>
    <published>2019-05-13T13:05:26.000Z</published>
    <updated>2019-05-14T07:00:42.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从本文你可以学习到：</p><ol><li>什么时候会使用 HashMap ？他有什么特点？</li><li>你知道 HashMap 的工作原理吗？</li><li>你知道 get 和 put 的原理吗？<code>equals()</code> 和 <code>hashCode()</code> 的都有什么作用？</li><li>你知道 hash 的实现吗？为什么要这样实现？</li><li>如果 HashMap 的大小超过了负载因子 (load factor) 定义的容量，怎么办？</li><li>为什么 HashMap 的容量是 2 的 n 次幂的形式？</li></ol><p>在说明这些问题的同时， 我从 JDK7 —— JDK8 的 HashMap 的变化来说明开发人员对这个数据结构的优化，重点放在了 <code>put() 函数</code> 和 <code>resize() 函数</code>，还结合了《码出高效》这本书指出了 HashMap 在并发情况下表现出来的问题。</p><p>注意：源码可能与 JDK 中实际代码略有不同， 这里面 JDK7 版以《码出高效》为准，JDK8 版本以网络版本为准，意在说明某个函数功能， 便于理解。</p><h2 id="两个重要参数说起"><a href="#两个重要参数说起" class="headerlink" title="两个重要参数说起"></a>两个重要参数说起</h2><p>在HashMap中有两个很重要的参数，容量(Capacity)和负载因子 (Load factor) 。</p><p>Capacity 就是 bucket 的大小，Load factor就是 bucket 填满程度的最大比例。如果对迭代性能要求很高的话，不要把 capacity 设置过大，也不要把 load factor 设置过小。当 bucket 中的 entries 的数目大于 capacity *load factor 时，就需要调整 bucket 的大小为当前的2倍。</p><h2 id="put函数的实现"><a href="#put函数的实现" class="headerlink" title="put函数的实现"></a>put函数的实现</h2><p>put函数大致的思路为：</p><ol><li>对key的 <code>hashCode()</code> 做 hash ，然后再计算 index ;</li><li>如果没碰撞直接放到 bucket 里；</li><li>如果碰撞了，以链表的形式存在 buckets 后；</li><li>如果碰撞导致链表过长 (大于等于 <code>TREEIFY_THRESHOLD</code>  )，就把链表转换成红黑树；</li><li>如果节点已经存在就替换 old value (保证 key 的唯一性)；</li><li>如果 bucket 满了 (超过 <code>load factor * current capacity</code>)，就要 resize。</li></ol><p>具体代码的实现如下：</p><h3 id="JDK7-的-put"><a href="#JDK7-的-put" class="headerlink" title="JDK7 的 put"></a>JDK7 的 put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//此循环通过 hashCode 返回值找到对应的数组下标位置</span></span><br><span class="line">    <span class="comment">//如果 equals 结果为真，则覆盖原值， 如果都为 false ，则添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">//如果key的 hash 是相同的，那么在进行如下判断</span></span><br><span class="line">        <span class="comment">//key 是同一个对象或者 equals 返回为真， 则覆盖原来的Value值</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果元素的个数达到 threshold 的扩容阈值且数组下标位置已经存在元素，则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((size++ &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex]))&#123;</span><br><span class="line">        <span class="comment">//扩容 2 倍， size 是实际存放元素的个数，而 length 是数组的容量大小(capacity)</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素时，应该插入在头部，而不是尾部</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash. K key, V value, <span class="keyword">int</span> bucketIndex)</span></span>&#123;</span><br><span class="line">    <span class="comment">//不管原来的数组对应的下标是否为 null ，都作为 Entry 的 BucketIndex 的 next值</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];      （***）</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于并发的问题</strong>：<br>如上源码， 在 <code>createEntry()</code> 方法中，新添加的元素直接放在 slot 槽（ slot 哈希槽，table[i] 这个位置）使新添加的元素在下一次提取后可以更快的被访问到。 如果两个线程同时执行 (***) 处时， 那么一个线程的赋值就会被另一个覆盖掉， 这是对象丢失的原因之一。 我们构造一个 HashMap 集合，把所有元素放置在同一个哈希桶内， 达到扩容条件后，观察一下 <code>resize()</code> 方法是如何进行数据迁移的。示例代码和图可参考《码出高效》P204。</p><h3 id="JDK8-的-put"><a href="#JDK8-的-put" class="headerlink" title="JDK8 的 put"></a>JDK8 的 put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对 key 的 hashCode() 做 hash</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// tab 为空则创建</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 计算 index，并对 null 做处理，这里观察到 index 的计算 i = (n - 1) &amp; hash</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">// 这个位置有节点，且与新节点相同，进行覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 这个位置有节点，且节点类型为 TreeNode</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 该链为链表</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//桶内还是一个链表，则插入链尾（尾插）</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// 检测是否该从链表变成树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 写入</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 超过 load factor*current capacity，resize</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，JDK 7 是先对 size++ 进行检查， 如果超过阈值， 则扩容，最后把节点放入 table。<br>而 JDK 8 相反，先把节点放入， 放入后的 size 若超出， 则扩容。</p><h2 id="hash-与-hashCode"><a href="#hash-与-hashCode" class="headerlink" title="hash 与 hashCode()"></a>hash 与 hashCode()</h2><p>在 get 和 put 的过程中，计算下标时，先对 hashCode 进行 hash 操作，然后再通过 hash 值进一步计算下标，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/13/hashmap/hash.bmp" alt="hash计算下标" title>                </div>                <div class="image-caption">hash计算下标</div>            </figure></p><p>关于 hash 函数 与 hashCode 的关系，这里，为了避免碰撞，JDK7 进行了四次扰动，JDK8 简化了这个操作，只是高低位做了异或，但核心思想都是增强 hash 中各位的相关性，减少碰撞。</p><h3 id="JDK7-中的-hash"><a href="#JDK7-中的-hash" class="headerlink" title="JDK7 中的 hash"></a>JDK7 中的 hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="comment">//如果 key 是字符串类型，就使用 stringHash32 来生成 hash 值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一次散列</span></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    <span class="comment">//二次散列</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK8-中的-hash"><a href="#JDK8-中的-hash" class="headerlink" title="JDK8 中的 hash"></a>JDK8 中的 hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩容（超级重要！）"><a href="#扩容（超级重要！）" class="headerlink" title="扩容（超级重要！）"></a>扩容（超级重要！）</h2><h3 id="JDK7-的扩容分析"><a href="#JDK7-的扩容分析" class="headerlink" title="JDK7 的扩容分析"></a>JDK7 的扩容分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个扩容后的新数组</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    <span class="comment">//将当前数组中的键值对存入新数组</span></span><br><span class="line">    <span class="comment">//JDK8 移除 hashSeed 计算， 因为计算时会用到 Random.nextInt(), 存在性能问题</span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    <span class="comment">//用新数组替换旧数组</span></span><br><span class="line">    table = newTable;</span><br><span class="line">    <span class="comment">//注意，MAX 时 1&lt;&lt;30， 如果 1&lt;&lt;31 则成 Integer 的最小值：-2147483648</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//外部传入参数时，指定新表大小为：2*oldTable.length</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="comment">//遍历现有数组中的每一个单链表的头 entry</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            <span class="comment">//如果此 slot 上存在元素，则进行遍历， 直到 e==null，退出循环</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="comment">//当前元素总是直接放在数组下标的 slot 上，而不是放在链表最后</span></span><br><span class="line">                <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据新的数组长度，重新计算此 entry 所在下标i</span></span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                <span class="comment">//把原来 slot 上的元素作为元素的下一个</span></span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                <span class="comment">//新迁移过来的节点直接放置在 slot 位置上</span></span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                <span class="comment">//继续向下遍历</span></span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>关于并发的问题</strong>：<br>如果 resize 完成， 执行了 table = newTable ，则后续的元素就可以在新表上进行插入操作。如果多个线程同时执行了 resize ，每个线程又都会 new Entry[newCapcity] 这是线程内的局部数组对象，线程之间是不可见的。迁移完成后，resize 的线程会赋值给 table 线程共享变量，从而覆盖其他线程的操作，因此在“新表”中进行插入操作的对象会被无情抛弃。总结一下， HashMap 在高并发场景中， 新增对象丢失原因是：</p><ul><li>并发赋值时被覆盖。</li><li>已遍历区间新增元素会丢失。</li><li>“新表被覆盖”。</li><li>迁移丢失。在迁移过程中， 有并发时， next 被提前置成 null。</li></ul><h3 id="JDK8-的扩容分析"><a href="#JDK8-的扩容分析" class="headerlink" title="JDK8 的扩容分析"></a>JDK8 的扩容分析</h3><p>例如我们从 16 扩展为 32 时，具体的变化如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/13/hashmap/resize1.bmp" alt="resize引起的hash" title>                </div>                <div class="image-caption">resize引起的hash</div>            </figure><br>因此元素在重新计算 hash 之后，因为 n 变为 2 倍，那么 n-1 的 mask 范围在高位多 1bit (红色)，因此新的 index就会发生这样的变化：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/13/hashmap/resize2.bmp" alt="index" title>                </div>                <div class="image-caption">index</div>            </figure><br>因此，我们在扩充 HashMap 的时候，不需要重新计算 hash ，只需要看看原来的 hash 值新增的那个 bit 是 1 还是 0 就好了，是0的话索引没变，是 1 的话索引变成 “原索引 + oldCap”。可以看看下图为 16 扩充为 32 的 resize 示意图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/13/hashmap/resize3.bmp" alt="resize" title>                </div>                <div class="image-caption">resize</div>            </figure><br>这个设计确实非常的巧妙，既省去了重新计算 hash 值的时间，而且同时，<strong>由于新增的 1bit 是 0 还是 1 可以认为是随机的，因此 resize 的过程，均匀的把之前的冲突的节点分散到新的 bucket 了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//oldTab 为当前表的哈希桶</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//当前哈希桶的容量 length</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length</span><br><span class="line">    <span class="comment">//当前的阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">//初始化新的容量和阈值为 0</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果当前容量大于 0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没超过最大值，就扩充为原来的 2 倍 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//如果旧的容量大于等于默认初始容量 16, 那么新的阈值也等于旧的阈值的两倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;<span class="comment">//那么新表的容量就等于旧的阈值</span></span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//此时新表的容量为默认的容量 16</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<span class="comment">//新的阈值为默认容量 16 * 默认加载因子 0.75f = 12</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//如果新的阈值是 0，对应的是当前表是空的，但是有阈值的情况</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;<span class="comment">//根据新表容量和加载因子求出新的阈值</span></span><br><span class="line">        <span class="comment">//进行越界修复</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新阈值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">//根据新的容量构建新的哈希桶</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">//更新哈希桶引用</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//如果以前的哈希桶中有元素</span></span><br><span class="line">    <span class="comment">//下面开始将当前哈希桶中的所有节点转移到新的哈希桶中</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//把每个 bucket 都移动到新的 buckets 中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            <span class="comment">//取出当前的节点 e</span></span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">//如果当前桶中有元素,则将链表赋值给 e</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//将原哈希桶置空以便 GC</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//如果当前链表中就一个元素，（没有发生哈希碰撞）</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">//直接将这个元素放置在新的哈希桶里。</span></span><br><span class="line">                    <span class="comment">//注意这里取下标是用哈希值与桶的长度-1。由于桶的长度是2的n次方，这么做其实是等于一个模运算。但是效率更高</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">//如果发生过哈希碰撞 ,而且是节点数超过8个，转化成了红黑树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">//如果发生过哈希碰撞，节点数小于 8 个。则要根据链表上每个节点的哈希值，依次放入新哈希桶对应下标位置。</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//因为扩容是容量翻倍，所以原链表上的每个节点，现在可能存放在原来的下标，即 low 位， 或者扩容后的下标，即 high 位。 high 位 = low 位 + 原哈希桶容量</span></span><br><span class="line">                    <span class="comment">//低位链表的头结点、尾节点</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//高位链表的头节点、尾节点</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;<span class="comment">//临时节点 存放 e 的下一个节点</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//这里又是一个利用位运算 代替常规运算的高效点：利用哈希值与旧的容量，可以得到哈希值去模后，是大于等于 oldCap 还是小于 oldCap，等于 0 代表小于 oldCap，应该存放在低位，否则存放在高位</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//给头尾节点指针赋值</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;<span class="comment">//高位也是相同的逻辑</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;<span class="comment">//循环直到链表结束</span></span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//将低位链表存放在原 index 处，</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将高位链表存放在新 index 处</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此段代码来源：<a href="https://blog.csdn.net/zxt0601/article/details/77413921" target="_blank" rel="noopener">CSDN博客</a>，采取了一些删改，注释太多太影响阅读。。</p><h2 id="JDK-7-与-JDK-8-中关于-HashMap的对比"><a href="#JDK-7-与-JDK-8-中关于-HashMap的对比" class="headerlink" title="JDK 7 与 JDK 8 中关于 HashMap的对比"></a>JDK 7 与 JDK 8 中关于 HashMap的对比</h2><ol><li>JDK 8 为红黑树 + 链表 + 数组的形式，当桶内元素大于 8 时，便会<strong>树化</strong>；</li><li>hash 值的计算方式不同 (jdk 8 简化)；</li><li>1.7 table 在创建 hashmap 时分配空间，而 1.8 在 put 的时候分配，如果 table 为空，则为 table 分配空间；</li><li>在发生冲突，插入链中时，<strong>7 是头插法，8 是尾插法</strong>；</li><li>在 resize 操作中，7 需要重新进行 index 的计算，而 <strong>8 不需要，通过判断相应的位是 0 还是 1，要么依旧是原 index，要么是 oldCap + 原 index</strong>。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们现在可以回答开始的几个问题，加深对 HashMap 的理解：</p><ol><li>什么时候会使用 HashMap？他有什么特点？<br> 是基于 Map 接口的实现，存储键值对时，它可以接收 null 的键值，是非同步的，HashMap 存储着 Entry(hash, key, value, next) 对象。</li><li>你知道 HashMap 的工作原理吗？<br> 通过 hash 的方法，通过 put 和 get 存储和获取对象。存储对象时，我们将 K / V 传给 put 方法时，它调用 hashCode 计算 hash 从而得到 bucket 位置，进一步存储，HashMap 会根据当前 bucket 的占用情况自动调整容量 (超过 Load Facotr 则 resize 为原来的 2 倍)。获取对象时，我们将 K 传给 get ，它调用 <code>hashCodeO()</code> 计算 hash 从而得到 bucket 位置，并进一步调用 <code>equals()</code> 方法确定键值对。如果发生碰撞的时候，Hashmap 通过链表将产生碰撞冲突的元素组织起来，在 Java 8 中，如果一个 bucket 中碰撞冲突的元素超过某个限制 (默认是 8 )，则使用红黑树来替换链表，从而提高速度。</li><li>你知道 get 和 put 的原理吗？equals() 和 hashCode() 的都有什么作用？<br> 通过对 key 的 <code>hashCode()</code> 进行 hashing，并计算下标 ( (n-1) &amp; hash )，从而获得 buckets 的位置。如果产生碰撞，则利用 <code>key.equals()</code> 方法去链表或树中去查找对应的节点</li><li>你知道hash的实现吗？为什么要这样实现？<br> 在 Java 1.8 的实现中，是通过 <code>hashCode()</code> 的高 16 位异或低 16 位实现的：<code>(h =k.hashCode()) ^ (h &gt;&gt;&gt; 16)</code> ，主要是从速度、功效、质量来考虑的，这么做可以在 bucket 的 n 比较小的时候，也能保证考虑到高低 bit 都参与到 hash 的计算中，同时不会有太大的开销。</li><li>如果 HashMap 的大小超过了负载因子 ( load factor ) 定义的容量，怎么办？<br> 如果超过了负载因子 (默认0.75)，则会重新 resize 一个原来长度两倍的 HashMap，并且重新调用 hash 方法。</li><li>为什么 capcity 是 2 的幂？<br> 因为 算 index 时用的是<code>(n-1) &amp; hash</code>，这样就能保证 <code>n-1</code> 是全为 1 的二进制数，如果不全为 1 的话，存在某一位为 0，那么 0，1与 0 与的结果都是 0，这样便有可能将两个 hash 不同的值最终装入同一个桶中，造成冲突。所以必须是 2 的幂。</li></ol><h2 id="更多数据结构"><a href="#更多数据结构" class="headerlink" title="更多数据结构"></a>更多数据结构</h2><p>请访问<a href="https://allenmistake.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">我的博客-数据结构分类</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据结构" scheme="http://www.allenmistake.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="哈希" scheme="http://www.allenmistake.top/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>红黑树的那些事</title>
    <link href="http://www.allenmistake.top/2019/05/12/rbtree/"/>
    <id>http://www.allenmistake.top/2019/05/12/rbtree/</id>
    <published>2019-05-12T02:26:53.000Z</published>
    <updated>2019-05-13T02:52:11.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章基本来自《码出高效》这本书， 由我自己总结归纳一些基础性的知识。<br>部分图和源代码来自于<a href="https://www.cnblogs.com/CarpenterLee/p/5503882.html" target="_blank" rel="noopener">CarpenterLee博客</a></p><h2 id="从最简单的树说起"><a href="#从最简单的树说起" class="headerlink" title="从最简单的树说起"></a>从最简单的树说起</h2><p>1.树（Tree）</p><pre><code>相对来说，树是一个很基础的概念， 不需要去多谈。需要掌握两个概念：深度：从根节点出发，到某节点边的条数。高度：从某结点出发，到叶子节点为止， 最长简单路径上边的条数。</code></pre><p>2.平衡二叉树</p><pre><code>高度差为 1 的二叉树。其性质如下：（1）树的左右高度差不能超过 1（2）任何往下递归的左子树和右子树， 必须符合第一条性质。（3）没有任何节点的空树或只有根节点的树也是平衡二叉树。</code></pre><p>3.二叉查找树（又名二叉搜索树，Binary Search Tree）</p><pre><code>性质：对于任意节点，它的左子树上所有节点的值都小于他， 而他的右子树上的所有节点的值都大于他。遍历节点的三种方式：前序遍历、中序遍历、后序遍历。**他们三者规律如下**（1）在任何递归子树中， 左节点一定在右节点之前遍历。（2）前序、中序、后序，仅指根节点在遍历时的位置顺序。</code></pre><h2 id="AVL-树与树形旋转"><a href="#AVL-树与树形旋转" class="headerlink" title="AVL 树与树形旋转"></a>AVL 树与树形旋转</h2><p>AVL是一种平衡二叉查找树， 增加或删除节点后通过树形旋转重新达到平衡。</p><p><strong>右旋</strong>：以某个节点为中心， 将他沉入当前<strong>右</strong>子节点的位置， 而让他当前的<strong>左</strong>子节点作为新树的根节点，也称为顺时针旋转；<br><strong>左旋</strong>：以某个节点为中心， 将他沉入当前<strong>左</strong>子节点的位置， 而让他当前的<strong>右</strong>子节点作为新树的根节点，也称为逆时针旋转；</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/12/rbtree/左旋.png" alt="左旋图示" title>                </div>                <div class="image-caption">左旋图示</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/12/rbtree/右旋.png" alt="右旋图示" title>                </div>                <div class="image-caption">右旋图示</div>            </figure><h3 id="左旋源代码"><a href="#左旋源代码" class="headerlink" title="左旋源代码"></a>左旋源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rotate Right</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; l = p.left;</span><br><span class="line">        p.left = l.right;</span><br><span class="line">        <span class="keyword">if</span> (l.right != <span class="keyword">null</span>) l.right.parent = p;</span><br><span class="line">        l.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">            root = l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</span><br><span class="line">            p.parent.right = l;</span><br><span class="line">        <span class="keyword">else</span> p.parent.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树和 AVL 树类似，但不准求所有的递归子树高度差不超过 1，而是保证**从根节点到叶尾的最长路径不超过最短路径的两倍，所以他的最坏运行时间也是$O(\text{log}n)$<br>它的五个约束条件：<br>1.节点只能是红色或者黑色<br>2.根节点必须是黑色<br>3.所有 NIL$^1$ 节点都是黑色<br>4.一条路径上不能出现相邻的两个红色节点<br>5.在任何递归子树内，根节点到叶子节点的所有路径上包含相同数目的黑色节点</p><p>【说明1】NIL 指在叶子节点不存在的两个虚拟节点，默认是黑色的。</p><h2 id="红黑树-VS-AVL树"><a href="#红黑树-VS-AVL树" class="headerlink" title="红黑树 VS AVL树"></a>红黑树 VS AVL树</h2><p>再插入时， 红黑树和AVL树都能在至多两次旋转内恢复平衡。在删除时由于红黑树只追求大致上的平衡， 因此红黑树能在至多<strong>三次</strong>旋转内恢复和平；而 AVL 树追求绝对平衡， 至多旋转<strong>$O(\text{log}n)$</strong>次。</p><p>因此，面对频繁的插入和删除，红黑树较为合适；面对低频修改、大量查询时，AVL相对合适。</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap 是按照 <strong>Key</strong> 的排序结果来组织内部结构的 Map 类集合， 它改变了 Map 类散乱无序的形象。 虽然 TreeMap 没有 ConcurrentHashMap 和 HashMap 普及（毕竟插入和删除的效率远没有后两者高），但是在 Key 有排序要求的场景下， 使用 TreeMap 可以事半功倍。</p><p>在 TrreMap 的接口继承树， 有两个接口：SortedMap 和 NavigableMap。SortedMap 接口表示它的 Key 是<strong>有序不可重复</strong>的， 支持获取头尾 Key-Value 元素， 或者根据 Key 指定范围获取子集合。插入的 Key <strong>必须</strong>实现 Comparable 或提供额外的比较器 Comparator ，所以 <strong>Key 不能是 null</strong> ，但是 Value 可以；<br>NavigableMap 接口继承了 SortedMap ，根据指定的搜索条件返回最匹配的 Key-Value 元素。 不同于 HashMap ，TreeMap 并非一定要覆写 <code>hashCode()</code> 和 <code>equals()</code> 方法来达到Key去重的目的。</p><p>关于 TreeMap 和 HashMap 的例子请看《码处高效》P191-P192 ，这里不多做赘述。</p><h3 id="类名与属性"><a href="#类名与属性" class="headerlink" title="类名与属性"></a>类名与属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>,<span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//排序时用的比较器，put源码解析时会用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; Comparator;</span><br><span class="line">    <span class="comment">//根节点，put源码时会提到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line">    <span class="comment">//定义成为字面含义的常量。下方fixAfterInsertion()解析时会用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TreeMap 的内部类， 存储红黑树节点的载体类 ，在整个TreeMap 中高频出现</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left; <span class="comment">//指向左子树的引用</span></span><br><span class="line">        Entry&lt;K,V&gt; right; <span class="comment">//指向右子树的引用</span></span><br><span class="line">        Entry&lt;K,V&gt; parent; <span class="comment">//指向父节点的引用</span></span><br><span class="line">        <span class="comment">//节点颜色信息是红黑树的精髓所在，默认是黑色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap 通过 <code>put()</code> 和 <code>deleteEntry()</code> 实现红黑树的增加和删除节点操作，下面的源码分析以插入主流程为例。<br>再插入新节点之前，要明确三个前提条件：</p><ol><li>需要调整的新节点总是红色的。</li><li>如果插入新节点的父节点是黑的，无需调整，因为依然能符合红黑树的5个约束条件。</li><li>如果插入新节点的父节点是红色的，因为红黑树规定不能出现相邻的两个红色节点，所以进入循环判断，或重新着色，或左右旋转，最终达到红黑树的五个约束条件，退出条件如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(x != <span class="keyword">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED)</span><br></pre></td></tr></table></figure><h3 id="put-源码"><a href="#put-源码" class="headerlink" title="put 源码"></a>put 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// t 表示当前节点，记住这个很重要！ 先把 TreeMap 的根节点root引用赋值给当前节点</span></span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="comment">// 如果当前节点为 null ，即是空树，新增的 KV 形成的节点就是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//看似多此一举， 实际上预检了Key是否可以比较</span></span><br><span class="line">        compare(key, key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 KV 构造出的新的 Entry 对象， 其中第三个参数是 parent，根节点没有父节点</span></span><br><span class="line">        root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录比较结果</span></span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="comment">// 构造方法中置入的外部比较器</span></span><br><span class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator ;</span><br><span class="line">    <span class="comment">// 重要步骤：根据二叉树的性质， 找到新节点插入合适的位置</span></span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 循环的目标：根据参数 Key 与当前节点的 Key 不断进行对比</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 当前节点赋值给父节点， 故从根节点开始遍历比较</span></span><br><span class="line">            parent = t;</span><br><span class="line">            <span class="comment">// 比较输入参数 Key 和当前节点 Key 的大小</span></span><br><span class="line">            cmp = cpr.compare(key, t. key);</span><br><span class="line">             <span class="comment">// 参数的 Key 更小，向左面走，把当前接待你引用移动到他的左子节点上</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t. left;</span><br><span class="line">            <span class="comment">// 新插入的key大的话，则以当前节点的右孩子节点为新的比较节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t. right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">          <span class="comment">// 如果当前节点的key和新插入的key相等的话，则覆盖map的value，返回</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        <span class="comment">// 如果没有相等的 Key， 一直会遍历到 NIL 节点为止</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在没有指定比较器的情况下， 调用自然排序的 Comparable 比较</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里要求key不能为空，并且必须实现Comparable接口</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">        <span class="comment">// 和上面一样，喜欢查找新节点要插入的位置</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t. key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t. left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t. right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到新节点的父节点后，创建节点对象</span></span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent);</span><br><span class="line">    <span class="comment">// 如果新节点key的值小于父节点key的值，则插在父节点的左侧</span></span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        parent. left = e;</span><br><span class="line">    <span class="comment">// 如果新节点key的值大于父节点key的值，则插在父节点的右侧</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent. right = e;</span><br><span class="line">    <span class="comment">// 插入新的节点后，为了保持红黑树平衡，对红黑树进行调整（重新着色、旋转操作）</span></span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    <span class="comment">// map元素个数+1</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点：fixAfterInsertion-源码"><a href="#重点：fixAfterInsertion-源码" class="headerlink" title="重点：fixAfterInsertion() 源码"></a>重点：fixAfterInsertion() 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 新增节点后对红黑树的调整方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 虽然内部类 Entry 的属性 color 默认为黑色， 但新节点一律先赋值为红色</span></span><br><span class="line">    x. color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新节点是根节点或者其父节点（简称父亲）为黑色，</span></span><br><span class="line">    <span class="comment">// 插入红色节点并不会破坏红黑树的性质，无需调整。</span></span><br><span class="line">    <span class="comment">// x 值的改变已被特别标记为(*)，改变的过程是在不断地向上游遍历（或内部调整）</span></span><br><span class="line">    <span class="comment">// 直到父亲为黑色， 或者到达根节点</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x != root &amp;&amp; x. parent.color == RED) &#123;</span><br><span class="line">        <span class="comment">// 如果新插入节点x的父节点是祖父节点的左孩子</span></span><br><span class="line">        <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf (parentOf(x)))) &#123;</span><br><span class="line">            <span class="comment">// 取得新插入节点x的叔叔节点</span></span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf (parentOf(x)));</span><br><span class="line">            <span class="comment">// 如果新插入x的父节点是红色-------------------①</span></span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                setColor(parentOf (x), BLACK);</span><br><span class="line">                <span class="comment">// 将x的叔叔节点设置为黑色</span></span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                <span class="comment">// 将x的祖父节点设置为红色</span></span><br><span class="line">                setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                <span class="comment">// 将x指向祖父节点，如果x的祖父节点的父节点是红色，按照上面的步奏继续循环</span></span><br><span class="line">                x = parentOf(parentOf (x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果新插入x的叔叔节点是黑色或缺少，且x的父节点是祖父节点的右孩子-------------------②</span></span><br><span class="line">                <span class="keyword">if</span> (x == rightOf( parentOf(x))) &#123;</span><br><span class="line">                    <span class="comment">// 左旋父节点</span></span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果新插入x的叔叔节点是黑色或缺少，且x的父节点是祖父节点的左孩子-------------------③</span></span><br><span class="line">                <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                setColor(parentOf (x), BLACK);</span><br><span class="line">                <span class="comment">// 将x的祖父节点设置为红色</span></span><br><span class="line">                setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                <span class="comment">// 右旋x的祖父节点</span></span><br><span class="line">                rotateRight( parentOf(parentOf (x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果新插入节点x的父节点是祖父节点的右孩子，下面的步奏和上面的相似，只不过左旋右旋的区分，不再细讲</span></span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf (parentOf(x)));</span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf (x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf (x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == leftOf( parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf (x), BLACK);</span><br><span class="line">                setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                rotateLeft( parentOf(parentOf (x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后将根节点设置为黑色，不管当前是不是红色，反正根节点必须是黑色</span></span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只展开说一下左旋：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y               </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--           / \                </span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry    </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 取得要选择节点p的右孩子</span></span><br><span class="line">        Entry&lt;K,V&gt; r = p. right;</span><br><span class="line">        <span class="comment">// "p"和"r的左孩子"的相互指向...</span></span><br><span class="line">        <span class="comment">// 将"r的左孩子"设为"p的右孩子"</span></span><br><span class="line">        p. right = r.left ;</span><br><span class="line">        <span class="comment">// 如果r的左孩子非空，将"p"设为"r的左孩子的父亲"</span></span><br><span class="line">        <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</span><br><span class="line">            r. left.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "p的父亲"和"r"的相互指向...</span></span><br><span class="line">        <span class="comment">// 将"p的父亲"设为"y的父亲"</span></span><br><span class="line">        r. parent = p.parent ;</span><br><span class="line">        <span class="comment">// 如果"p的父亲"是空节点，则将r设为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">            root = r;</span><br><span class="line">        <span class="comment">// 如果p是它父节点的左孩子，则将r设为"p的父节点的左孩子"</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent. left == p)</span><br><span class="line">            p. parent.left = r;</span><br><span class="line">        <span class="keyword">else</span>             </span><br><span class="line">            <span class="comment">// 如果p是它父节点的左孩子，则将r设为"p的父节点的左孩子"</span></span><br><span class="line">            p. parent.right = r;</span><br><span class="line">        <span class="comment">// "p"和"r"的相互指向...</span></span><br><span class="line">        <span class="comment">// 将"p"设为"r的左孩子"</span></span><br><span class="line">        r. left = p;</span><br><span class="line">        <span class="comment">// 将"p的父节点"设为"r"</span></span><br><span class="line">        p. parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/12/rbtree/调整.png" alt="调整图示" title>                </div>                <div class="image-caption">调整图示</div>            </figure><p>具体例子请看《码出高效》P197-P199</p><h2 id="更多数据结构"><a href="#更多数据结构" class="headerlink" title="更多数据结构"></a>更多数据结构</h2><p>请访问<a href="https://allenmistake.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">我的博客-数据结构分类</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据结构" scheme="http://www.allenmistake.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://www.allenmistake.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：62&amp;63：独一无二的路径</title>
    <link href="http://www.allenmistake.top/2019/05/11/leetcode62/"/>
    <id>http://www.allenmistake.top/2019/05/11/leetcode62/</id>
    <published>2019-05-11T03:02:50.000Z</published>
    <updated>2019-05-15T11:38:58.925Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="62题目"><a href="#62题目" class="headerlink" title="62题目"></a>62题目</h2><p>一个只能向右走或向下走的机器人位于左上角，要到右下角，有多少种唯一的路径？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/11/leetcode62/robot_maze.png" alt="机器人路径" title>                </div>                <div class="image-caption">机器人路径</div>            </figure><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down</span><br><span class="line">2. Right -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: m = 7, n = 3</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure><h2 id="62分析"><a href="#62分析" class="headerlink" title="62分析"></a>62分析</h2><p>62这道题可以完全不用动态规划， 利用简单的排列组合也能解决问题 。 但是为了引出63， 还是给出动态规划的解法。</p><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><p>通过观察， 总结规律， 我们可以知道， 结果和行、列关系如下</p><p>$$result = \frac{(m-1+n-1)!}{(m-1)!(n-1)!}$$</p><p>可能你看这个公式会有点懵， 但是， 结合图片可以分析到， 当迷宫是7*3时，我们势必要走两个  down($n-1$)和 6($m-1$) 个 right ，于是就变成了$C_8^2$或者你也可以认为$C_8^6$</p><p>下面排列组合的代码中， 可以关注一下关于排列组合的运算代码</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>在前面的动态规划我们提到， 动态规划需要有一个存储结构， 即所谓的“记忆性”， 应用在这道题目上面， 记忆性便是指当前方格的唯一路径数。<br>在程序上，我们首先遍历两个边界，也就是第一行和第一列，将他们全部置为 1（由于机器人只能向下和向右，所以边界的不重复路径只有一条），然后我们遍历其他方块， 方块的可达路径数等于他上面的方块路径数 + 他左面的方块的路径数， 即</p><p>$$res[i][j]=res[i-1][j]+res[i][j]$$</p><p>计算到右下角， 右下角的路径数即为最终结果</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="排列组合代码"><a href="#排列组合代码" class="headerlink" title="排列组合代码"></a>排列组合代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">1</span> || n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        m--;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">if</span>(m &lt; n) &#123;              <span class="comment">// Swap, so that m is the bigger number</span></span><br><span class="line">            m = m + n;</span><br><span class="line">            n = m - n;</span><br><span class="line">            m = m - n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m+<span class="number">1</span>; i &lt;= m+n; i++, j++)&#123;       <span class="comment">// Instead of taking factorial, keep on multiply &amp; divide</span></span><br><span class="line">            res *= i;</span><br><span class="line">            res /= j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划代码"><a href="#动态规划代码" class="headerlink" title="动态规划代码"></a>动态规划代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Integer[][] map = <span class="keyword">new</span> Integer[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m;i++)&#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            map[<span class="number">0</span>][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                map[i][j] = map[i-<span class="number">1</span>][j]+map[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63题目"><a href="#63题目" class="headerlink" title="63题目"></a>63题目</h2><p>这次题目在 62 的基础上稍微有些修改 ，机器人的走法不变， 但是地图会出现障碍物， 给定一个 m*n 二维数组， 0 表示没有障碍物， 1 表示此路不通。</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [0,1,0],</span><br><span class="line">  [0,0,0]</span><br><span class="line">]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">There is one obstacle in the middle of the 3x3 grid above.</span><br><span class="line">There are two ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure><h2 id="63分析"><a href="#63分析" class="headerlink" title="63分析"></a>63分析</h2><p>这种情况下，显然我们的排列组合方法就不适用了， 继续用动态规划问题解决， 我们仍然采取“记忆法”：</p><p>首先，检查左上角元素是不是阻挡快 ，如果不是阻挡块（0），则更新为 1 ，这个 1 的含义就是 62 中的可达路径数（下面简称路径数）。</p><p>然后 ，遍历两个边界， 这个时候比 62 题多了一个判断， 如果前一个是 1（路径数）（注意：这个 1 不是阻挡块的 1 而是更新后的路径数 ，而自己是 0 （未更新，非阻挡块），则将它置为 1，否则置为  0 。</p><p>过程图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/11/leetcode62/1.png" alt="初始状态" title>                </div>                <div class="image-caption">初始状态</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/11/leetcode62/2.png" alt="遍历行边界" title>                </div>                <div class="image-caption">遍历行边界</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/11/leetcode62/3.png" alt="遍历列边界" title>                </div>                <div class="image-caption">遍历列边界</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/05/11/leetcode62/4.png" alt="遍历全部" title>                </div>                <div class="image-caption">遍历全部</div>            </figure></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> R = obstacleGrid.length;</span><br><span class="line">        <span class="keyword">int</span> C = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the starting cell has an obstacle, then simply return as there would be</span></span><br><span class="line">        <span class="comment">// no paths to the destination.</span></span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Number of ways of reaching the starting cell = 1.</span></span><br><span class="line">        obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Filling the values for the first column</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; i++) &#123;</span><br><span class="line">            obstacleGrid[i][<span class="number">0</span>] = (obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; obstacleGrid[i - <span class="number">1</span>][<span class="number">0</span>] == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Filling the values for the first row</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;</span><br><span class="line">            obstacleGrid[<span class="number">0</span>][i] = (obstacleGrid[<span class="number">0</span>][i] == <span class="number">0</span> &amp;&amp; obstacleGrid[<span class="number">0</span>][i - <span class="number">1</span>] == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Starting from cell(1,1) fill up the values</span></span><br><span class="line">        <span class="comment">// No. of ways of reaching cell[i][j] = cell[i - 1][j] + cell[i][j - 1]</span></span><br><span class="line">        <span class="comment">// i.e. From above and left.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; C; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    obstacleGrid[i][j] = obstacleGrid[i - <span class="number">1</span>][j] + obstacleGrid[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obstacleGrid[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return value stored in rightmost bottommost cell. That is the destination.</span></span><br><span class="line">        <span class="keyword">return</span> obstacleGrid[R - <span class="number">1</span>][C - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多动态规划问题"><a href="#更多动态规划问题" class="headerlink" title="更多动态规划问题"></a>更多动态规划问题</h2><p>更多动态规划问题关注标签：<a href="https://allenmistake.github.io/tags/动态规划/" target="_blank" rel="noopener">动态规划</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>4月总结 and 5月计划</title>
    <link href="http://www.allenmistake.top/2019/05/07/monthlysummary/"/>
    <id>http://www.allenmistake.top/2019/05/07/monthlysummary/</id>
    <published>2019-05-07T02:27:06.000Z</published>
    <updated>2020-01-03T09:06:25.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="4月份工作"><a href="#4月份工作" class="headerlink" title="4月份工作"></a>4月份工作</h2><p>4月份是一个忙碌的月份 ，这个月发表的文章只有可怜的 4 篇 ，主要是清明、老爸生日、羽毛球比赛、五一假期这一系列 ，可以说是树欲静而风不止了 ，其实还是懒 ，不想着怎么提高技术 ，总是找借口。</p><p><strong>Leetcode</strong> ：</p><ul><li>哈希表相关总结</li><li>动态规划相关总结</li></ul><p><strong>Java</strong>：</p><ul><li>关于并发的一些知识</li></ul><p><strong>其他</strong></p><ul><li>读书任务：《万历十五年》、《骆驼祥子》这两本都是在读 ，并没有读完。</li></ul><p>仅此而已 ，和充实的三月比简直惭愧 。</p><h2 id="5月份计划"><a href="#5月份计划" class="headerlink" title="5月份计划"></a>5月份计划</h2><p><strong>Leetcode</strong></p><ul><li>巩固三大模块：回溯、哈希表、动态规划 ，每个模块不少于 3 道新题</li><li>总共至少 15 道题目 </li></ul><p><strong>《Java开发手册》</strong></p><ul><li>看<strong>红黑树</strong>（含 b 数）、哈希表等几个数据结构</li><li>垃圾回收规范</li><li>并发</li></ul><p>5月是调整的一月 ，慢慢把自己的节奏找回来 ，继续奋斗。</p><h2 id="其他感悟"><a href="#其他感悟" class="headerlink" title="其他感悟"></a>其他感悟</h2><p>最近看了两部电影 ，都让我感觉很惊喜 。</p><h3 id="调音师"><a href="#调音师" class="headerlink" title="调音师"></a>调音师</h3><p>说是调音师 ，但实际上和调音一点关系都没有 ，貌似是致敬法国的短片《调音师》 ，影片中故事不多讲述了 ，给我印象最深的有两个 </p><ul><li>你听到的不一定是真的 ，就算是真的 ，也只是一部分 ，带有主观色彩</li><li>没有绝对的善恶 ，每个人都是复杂的 。</li></ul><p>第二点我不想多说 ，这点在很多小说或者电影都有体现。</p><p>第一点 ，我觉得这部电影为什么是 “调音师” ，因为当别人给你讲述故事的时候 ，会不自觉的将原本的事实 ，像调音师一样 ，变成带有自己主观色彩的 “变音” ，或添油加醋，或夸大对自己有利的 ，忽略对自己不利的 ，而作为聆听者 ，我们要做的 ，只能是保留自己的一份怀疑 ，毕竟我们也不知道事实是怎样的 。</p><h3 id="老师好"><a href="#老师好" class="headerlink" title="老师好"></a>老师好</h3><p>这部电影有点后悔没去电影院看 ，应该去支持一下的 ，谦大爷的演技感觉还是不错的 ，并没有说相声的感觉 ，《老师·好》有一种清新感 ，感觉很纯粹 ，有的时候你确实需要一部这样的电影放松放松了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode日记：32：最长有效括号</title>
    <link href="http://www.allenmistake.top/2019/04/22/leetcode32/"/>
    <id>http://www.allenmistake.top/2019/04/22/leetcode32/</id>
    <published>2019-04-22T03:23:15.000Z</published>
    <updated>2019-04-24T01:27:26.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长的包含有效括号的子串的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;(()&quot;</span><br><span class="line">输出: 2</span><br><span class="line">解释: 最长有效括号子串为 &quot;()&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;)()())&quot;</span><br><span class="line">输出: 4</span><br><span class="line">解释: 最长有效括号子串为 &quot;()()&quot;</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>在这种方法中，我们考虑给定字符串中每个可能的<strong>非空偶数长度子字符串</strong>，并检查它是否是有效的括号字符串。为了检查有效性，我们使用堆栈方法。</p><p>每当我们遇到一个$\text{‘(‘} $，我们就把它推到堆栈上。对于遇到的每个$\text{‘)’} $，我们都会从堆栈中弹出一个$\text{‘(‘} $。如果$\text{‘(‘} $在堆栈上不可随时弹出，或者如果堆栈在处理完完整的子字符串后包含一些元素，括号中的子字符串无效。这样，我们对每一个可能的子串重复这个过程，并继续存储迄今为止找到的最长有效字符串的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">'('</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!stack.empty() &amp;&amp; stack.peek() == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt;= s.length(); j+=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isValid(s.substring(i, j))) &#123;</span><br><span class="line">                    maxlen = Math.max(maxlen, j - i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度：$O(n^3)$ , 从长度为 $n$ 的字符串产生可能的子串需要$O(n^2)$ , 检查长度有效性需要 $O(n)$</li><li>空间复杂度：$O(n)$ , 栈的长度为 $n$</li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>这个问题可以通过使用动态规划来解决。我们使用 $\text{dp}$ 数组，其中 $\text{dp}$ 的第 $i$ 元素表示以 $i$ 索引结尾的最长有效子字符串的长度。我们用0初始化完整的 $\text{dp}$ 数组。现在，很明显，有效的子字符串必须以 $\text{‘)’} $ 结尾。这进一步导致以 $\text{‘(‘} $ 结尾的子字符串在其对应的 $\text{dp}$ 索引处总是包含’ 0 ‘。因此，我们仅在遇到 $\text{‘)’} $ 时更新 $\text{dp}$ 数组。</p><p>要填充 $\text{dp}$ 数组，我们将每两个连续字符检查一次字符串，如果</p><ol><li><p>$\text{s}[i]=’)’ $ 、 $\text{s}[i - 1] = \text{‘(’}$, 例如这种字符串 “……()” $\Rightarrow$</p><p>​                    $\text{dp}[i]=\text{dp}[i-2]+2$</p></li></ol><p>   我们这样做是因为结尾 “()” 部分无论如何都是有效的子串，并导致前一个有效子串的长度增加2。</p><ol start="2"><li><p>$\text{s}[i] = \text{‘)’}$、 $\text{s}[i - 1] = \text{‘)’}$ 例如这种字符串<code></code>…….))” $\Rightarrow$</p><p>如果 $\text{s}[i - \text{dp}[i - 1] - 1] = \text{‘(’}$ 那么</p><p>​    $\text{dp}[i]=\text{dp}[i-1]+\text{dp}[i-\text{dp}[i-1]-2]+2$</p></li></ol><p>$\text{dp}[i]$ 表示以当前位置为终点的最长长度，则只能在 ）处更新，</p><p>如果 $\text{s}[i - \text{dp}[i - 1] - 1] = \text{‘(’}$，则说明当前位置可以和 $i-1-\text{dp}[i-1]$ 位置匹配，$\text{dp}[i]=\text{dp}[i-1]+2$</p><p>然后还要加上匹配位置之前的最长长度 $\text{dp}[i]+=\text{dp}[i-\text{dp}[i]]$</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s.charAt(i - dp[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    dp[i] = dp[i - <span class="number">1</span>] + ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxans = Math.max(maxans, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用栈"><a href="#利用栈" class="headerlink" title="利用栈"></a>利用栈</h3><p>我们可以在扫描给定字符串时使用堆栈来检查到目前为止扫描的字符串是否有效，以及最长有效字符串的长度，而不是查找每个可能的字符串并检查其有效性。为了做到这一点，我们首先将-1 -1推到堆栈上。</p><p>对于遇到的每一个 $\text{‘(‘}$ ，我们将其索引推送到堆栈上。</p><p>对于遇到的每一个$\text{‘)’} $，我们弹出最顶端的元素，并从堆栈的顶端元素中减去当前元素的索引，这将给出当前遇到的有效括号字符串的长度。如果弹出元素时，堆栈变空，我们将当前元素的索引推到堆栈上。这样，我们继续计算有效子字符串的长度，并在末尾返回最长有效字符串的长度。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxans = <span class="number">0</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxans = Math.max(maxans, i - stack.peek());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不需要额外空间"><a href="#不需要额外空间" class="headerlink" title="不需要额外空间"></a>不需要额外空间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, maxlength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                maxlength = Math.max(maxlength, <span class="number">2</span> * right);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= left) &#123;</span><br><span class="line">                left = right = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left = right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                maxlength = Math.max(maxlength, <span class="number">2</span> * left);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">                left = right = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多动态规划问题"><a href="#更多动态规划问题" class="headerlink" title="更多动态规划问题"></a>更多动态规划问题</h2><p>更多动态规划问题关注标签：<a href="https://allenmistake.github.io/tags/动态规划/" target="_blank" rel="noopener">动态规划</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="hard" scheme="http://www.allenmistake.top/categories/Leetcode/hard/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="栈" scheme="http://www.allenmistake.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：55.跳跃游戏 &amp; 动态规划</title>
    <link href="http://www.allenmistake.top/2019/04/20/leetcode55dp/"/>
    <id>http://www.allenmistake.top/2019/04/20/leetcode55dp/</id>
    <published>2019-04-20T04:01:40.000Z</published>
    <updated>2019-04-20T08:23:43.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/20/leetcode55dp/jump.jpg" alt="jump" title>                </div>                <div class="image-caption">jump</div>            </figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,3,1,1,4]</span><br><span class="line">输出: true</span><br><span class="line">解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,0,4]</span><br><span class="line">输出: false</span><br><span class="line">解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这是一个动态规划问题，通常，解决并完全理解动态规划问题需要以下 4 步：</p><ol><li>从递归回溯解决方案开始</li><li>通过使用带有记忆属性的表进行优化(自上而下的[2]动态规划)</li><li>移除递归(自下而上的动态规划)</li><li>应用最后的技巧来降低时间/内存的复杂性</li></ol><p>以下所有方法都可适用，只是时间复杂度和空间复杂度不同。</p><h2 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h2><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p>这是一个低效的解决方案，我们尝试从第一个位置到最后一个位置的每一个跳跃模式。我们从第一个位置开始，跳到每个可以到达的索引。我们重复这个过程，直到达到最后一个索引。卡住时，后退。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJumpFromPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> furthestJump = Math.min(position + nums[position], nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> nextPosition = position + <span class="number">1</span>; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> canJumpFromPosition(<span class="number">0</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码，我们可以做的一个快速优化是从右向左检查<code>nextPosition</code>。理论上最坏的情况性能是一样的，但是实际上，对于愚蠢的例子，代码可能运行得更快。直观上来讲，这意味着我们总是试图跳得最大，以便尽快到达终点</p><p>所需的更改是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> nextPosition = position + <span class="number">1</span>; nextPosition &lt;= furthestJump; nextPosition++)</span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> nextPosition = furthestJump; nextPosition &gt; position; nextPosition--)</span><br></pre></td></tr></table></figure><p>假定，在下面这个例子中，如果我们从 index 0开始，跳得越远越好，达到1，跳得越远越好，达到6。通过这样做，我们分三步确定0是一个好的索引。</p><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">nums</td><td style="text-align:center">1</td><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr></tbody></table><p>为了说明这种优化不起作用的最坏情况，以下面的例子为例。无法从任何位置到达索引6，但将尝试所有组合。</p><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">nums</td><td style="text-align:center">5</td><td style="text-align:center">4</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>上面这个例子回溯的前几步是: 0 -&gt; 4 -&gt; 5 -&gt; 4 -&gt; 0 -&gt; 3 -&gt; 5 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; etc.</p><p><strong>复杂度分析</strong></p><ul><li>Time complexity : $O(2^n)$. 从初始位置走到最后位置，有 $2^n$(upper bound) 种方法,  $n$ 是数组 <code>nums</code> 的长度. </li><li>Space complexity : $O(n)$. 递归需要额外的空间分配给栈. </li></ul><h3 id="自上至下的动态规划"><a href="#自上至下的动态规划" class="headerlink" title="自上至下的动态规划"></a>自上至下的动态规划</h3><p>自上而下的动态规划可以被认为是<strong>优化的回溯</strong>。它依赖于这样的观察，即<strong>一旦我们确定某个指数是好的/坏的，这个结果永远不会改变</strong>。这意味着我们可以<strong>存储结果</strong>，而不需要每次都重新计算。</p><p>因此，对于数组中的每个位置，我们都记得 index 是好是坏。让我们调用这个数组 <code>memo</code> ，并让它的值为:好、坏、未知之一。这种技术被称为记忆化。</p><p>输入数组 <code>nums = [2，4，2，1，0，2，0]</code> 的记忆表示例如下图所示。我们用 <strong>G</strong> 代表好位置，用 <strong>B</strong> 代表坏位置。我们可以看到，我们不能从索引2、3或4开始，最终到达最后一个索引(6)，但我们可以从索引0、1、5和(一般)6开始。</p><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">nums</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">memo</td><td style="text-align:center">G</td><td style="text-align:center">G</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">G</td><td style="text-align:center">G</td></tr></tbody></table><p><strong>Steps</strong></p><ol><li><p>最初，记忆表中所有元素是 <em>UNKNOWN</em>, <strong>除了最后一个</strong>,  (一般情况下) 是 <em>GOOD</em> (他一定能到达自己)</p></li><li><p>修改回溯算法，以便递归步骤首先检查索引是否已知(好/坏)</p><ol><li>如果已知（<em>KNOWN</em>） 则返回 <em>True</em> / <em>False</em></li><li>否则像以前一样执行回溯步骤</li></ol></li><li><p>一旦我们确定了当前索引的值，我们就将其存储在 <code>memo</code> 表中</p></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Index &#123;</span><br><span class="line">    GOOD, BAD, UNKNOWN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Index[] memo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJumpFromPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (memo[position] != Index.UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[position] == Index.GOOD ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> furthestJump = Math.min(position + nums[position], nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> nextPosition = position + <span class="number">1</span>; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (canJumpFromPosition(nextPosition, nums)) &#123;</span><br><span class="line">                memo[position] = Index.GOOD;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        memo[position] = Index.BAD;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        memo = <span class="keyword">new</span> Index[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; memo.length; i++) &#123;</span><br><span class="line">            memo[i] = Index.UNKNOWN;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[memo.length - <span class="number">1</span>] = Index.GOOD;</span><br><span class="line">        <span class="keyword">return</span> canJumpFromPosition(<span class="number">0</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度 : $O(n^2)$. 对于数组中的每一个元素 ， 比如 i ， 我们将会从他的右面查找下一个 <code>nums[i]</code> 元素 ，以找到 <em>GOOD</em> 索引 ， <code>nums[i]</code>最大可能是 $n$ ，$n$ 是数组长度。</li><li>空间复杂度 : $O(2n) = O(n)$. 第一个 $n$ 来自于递归 ， 第二个 $n$ 来自于 <code>memo</code> 表的存储。</li></ul><h3 id="自下至上的动态规划"><a href="#自下至上的动态规划" class="headerlink" title="自下至上的动态规划"></a>自下至上的动态规划</h3><p>自上而下到自下而上的转换是通过<strong>消除递归</strong>来完成的。实际上，这实现了更好的性能，因为我们不再有方法堆栈开销，甚至可能从一些缓存中受益。更重要的是，这一步为未来的优化开辟了可能性。递归通常是通过尝试颠倒自顶向下方法的步骤顺序来消除的。</p><p>这里要做的观察是，我们只跳到右边。这意味着，如果我们从数组的右边开始，每次我们查询右边的位置时，该位置已经被确定为 <em>GOOD</em> 或 <em>BAD</em>. 这意味着我们不需要再重复了，因为我们总是会碰撞 <code>memo</code> 表.</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Index &#123;</span><br><span class="line">    GOOD, BAD, UNKNOWN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Index[] memo = <span class="keyword">new</span> Index[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; memo.length; i++) &#123;</span><br><span class="line">            memo[i] = Index.UNKNOWN;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[memo.length - <span class="number">1</span>] = Index.GOOD;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> furthestJump = Math.min(i + nums[i], nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= furthestJump; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (memo[j] == Index.GOOD) &#123;</span><br><span class="line">                    memo[i] = Index.GOOD;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[<span class="number">0</span>] == Index.GOOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>一旦我们的代码处于自下而上的状态，我们就可以进行最后一次重要的观察。从一个给定的位置，当我们试图看是否能跳到一个 <em>GOOD</em> 位置时，我们只使用一个——第一个(见 break 语句)。换句话说，最左边的一个。如果我们把这个最左边的 <em>GOOD</em> 位置作为一个单独的变量来跟踪，我们可以避免在数组中搜索它。不仅如此，我们还可以完全停止使用数组。</p><p>从右向左迭代，对于每个位置，我们检查是否有潜在的跳跃达到 <em>GOOD</em> 的 index (<code>currPosition</code> + <code>nums[currPosition]</code> &gt;= <code>leftmostGoodIndex</code> )。如果我们能达到一个好的指数，那么我们的位置本身就是好的。此外，这个新的好位置将是新的最左边的好索引。迭代一直持续到数组的开始。如果第一个位置是好指数，那么我们可以从第一个位置到达最后一个指数。</p><p>为了说明这个场景，我们将使用下图，对于输入数组 <code>nums = [9，4，2，1，0，2，0]</code> 。我们写 <strong>G</strong> 代表好，<strong>B</strong> 代表坏，<strong>U</strong> 代表未知。假设我们一直迭代到位置 0，我们需要决定索引0是否是好的。因为指数1被确定为 <em>GOOD</em> ，所以跳到那里就足够了，然后确保我们最终能达到指数6。大到足以一路跳到最后一个指数并不重要。我们只需要一种方法。</p><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">nums</td><td style="text-align:center">9</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">memo</td><td style="text-align:center">U</td><td style="text-align:center">G</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">G</td><td style="text-align:center">G</td></tr></tbody></table><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastPos = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + nums[i] &gt;= lastPos) &#123;</span><br><span class="line">                lastPos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastPos == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划问题总结"><a href="#动态规划问题总结" class="headerlink" title="动态规划问题总结"></a>动态规划问题总结</h2><h3 id="动态规划问题常用步骤"><a href="#动态规划问题常用步骤" class="headerlink" title="动态规划问题常用步骤"></a>动态规划问题常用步骤</h3><p>通常，解决并完全理解动态规划问题需要以下 4 步：</p><ol><li>从递归回溯解决方案开始</li><li>通过使用带有记忆属性的表进行优化(自上而下的[2]动态规划)</li><li>移除递归(自下而上的动态规划)</li><li>应用最后的技巧来降低时间/内存的复杂性</li></ol><h3 id="动态规划特点"><a href="#动态规划特点" class="headerlink" title="动态规划特点"></a>动态规划特点</h3><p>动态规划仍带有一些递归特性，也可以改成回溯的形式，但是和较为傻瓜，一条路走到黑的回溯相比，动态规划有着自己的最优解决策：</p><p>它利用一张带有记忆属性的表来存储最优情况。</p><h3 id="动态规划适用问题"><a href="#动态规划适用问题" class="headerlink" title="动态规划适用问题"></a>动态规划适用问题</h3><p>能采用动态规划求解的问题的一般要具有3个性质：</p><ol><li><p><strong>最优化原理</strong>：假设问题的最优解所包括的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</p></li><li><p><strong>无后效性</strong>：即某阶段状态一旦确定。就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响曾经的状态。仅仅与当前状态有关；</p></li><li><p><strong>有重叠子问题</strong>：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到（该性质并非动态规划适用的必要条件，可是假设没有这条性质。动态规划算法同其它算法相比就不具备优势）。</p></li></ol><h3 id="更多动态规划问题"><a href="#更多动态规划问题" class="headerlink" title="更多动态规划问题"></a>更多动态规划问题</h3><p>更多动态规划问题关注标签：<a href="https://allenmistake.github.io/tags/动态规划/" target="_blank" rel="noopener">动态规划</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="贪心算法" scheme="http://www.allenmistake.top/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：49.错位词组队&amp;哈希表相关操作</title>
    <link href="http://www.allenmistake.top/2019/04/09/leetcode49hash/"/>
    <id>http://www.allenmistake.top/2019/04/09/leetcode49hash/</id>
    <published>2019-04-09T08:24:33.000Z</published>
    <updated>2019-05-15T14:10:39.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>所有输入均为小写字母。</li><li>不考虑答案输出的顺序。</li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>题目中可以看出，我们要找出满足某一种条件的字符串集合，这个条件是：字母全对，只是错位<br>针对这种情况，我们可以利用算法，先将字符串排序，再比较(排序之后的两个错位字符串会变成一样的)。<br>或者统计每个字符串所出现字母次数，放入哈希表进行比较。</p><h3 id="方法一：排序数组分类"><a href="#方法一：排序数组分类" class="headerlink" title="方法一：排序数组分类"></a>方法一：排序数组分类</h3><ol><li>思路</li></ol><p>当且仅当它们的排序字符串相等时，两个字符串是字母异位词。</p><ol start="2"><li>算法</li></ol><p>维护一个映射 ans : {String -&gt; List}，其中每个键 $K$ 是一个排序字符串，每个值是初始输入的字符串列表，排序后等于 $K$。</p><p>在 Java 中，我们将键存储为字符串，例如，code。</p><h3 id="方法二：计数分类"><a href="#方法二：计数分类" class="headerlink" title="方法二：计数分类"></a>方法二：计数分类</h3><p>1.思路</p><p>当且仅当它们的字符计数（每个字符的出现次数）相同时，两个字符串是字母异位词。</p><ol start="2"><li>算法</li></ol><p>我们可以将每个字符串 $\text{s}$ 转换为字符数 $\text{count}$，由26个非负整数组成，表示 $ \text{a} $，$\text{b}$，$\text{c}​$ 的数量等。我们使用这些计数作为哈希映射的基础。</p><p>在 Java 中，我们的字符数 count 的散列化表示将是一个用 <strong>＃</strong> 字符分隔的字符串。 例如，abbccc 将表示为 ＃1＃2＃3＃0＃0＃0 …＃0（表示 a 出现了1次， b 出现了2次），其中总共有26个条目。。</p><h2 id="代码-排序"><a href="#代码-排序" class="headerlink" title="代码-排序"></a>代码-排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Map&lt;String, List&gt; ans = <span class="keyword">new</span> HashMap&lt;String, List&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">            <span class="comment">//将每个字符串转换成字符数组</span></span><br><span class="line">            <span class="keyword">char</span>[] ca = s.toCharArray();</span><br><span class="line">            Arrays.sort(ca);</span><br><span class="line">            String key = String.valueOf(ca);</span><br><span class="line">            <span class="keyword">if</span> (!ans.containsKey(key)) ans.put(key, <span class="keyword">new</span> ArrayList());</span><br><span class="line">            ans.get(key).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(ans.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码-计数"><a href="#代码-计数" class="headerlink" title="代码-计数"></a>代码-计数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Map&lt;String, List&gt; ans = <span class="keyword">new</span> HashMap&lt;String, List&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">            <span class="comment">//初始化字母表</span></span><br><span class="line">            Arrays.fill(count, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//统计一个字符串中字幕出现情况</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) count[c - <span class="string">'a'</span>]++;</span><br><span class="line">            <span class="comment">//将统计的情况转换成StringBuilder key = 统计情况 value = 同一个错位词Group</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                sb.append(<span class="string">'#'</span>);</span><br><span class="line">                sb.append(count[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            String key = sb.toString();</span><br><span class="line">            <span class="keyword">if</span> (!ans.containsKey(key)) ans.put(key, <span class="keyword">new</span> ArrayList());</span><br><span class="line">            <span class="comment">//如果key相同，说明统计情况一样，便为错位词Group，添加到List</span></span><br><span class="line">            ans.get(key).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(ans.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表相关操作"><a href="#哈希表相关操作" class="headerlink" title="哈希表相关操作"></a>哈希表相关操作</h2><h3 id="哈希表实现原理"><a href="#哈希表实现原理" class="headerlink" title="哈希表实现原理"></a>哈希表实现原理</h3><p>关于hash的具体实现规则，Java源代码请看之前Java基础集合篇。</p><h3 id="Hash家族"><a href="#Hash家族" class="headerlink" title="Hash家族"></a>Hash家族</h3><ol><li><p>Hashtable 是一个包含<strong>单向链表</strong>的二维数组，其数据结构的数组中是 Entry&lt;K,V&gt; 存储， entry 对象。 Hashtable 有洁癖，<strong>不允许</strong>存入其中的 key 或者 value 为 null。Hashtable 是<strong>线程安全</strong>的，所有的方法均用 synchronized 修饰，这样在任一时刻，只有一个线程可以写 Hashtable，因此，对于频繁写操作的业务逻辑，速度会非常<strong>慢</strong>。</p></li><li><p>HashMap 是最常用的 Map 型数据结构，它根据键的 hashCode() 值存储数据。HashMap <strong>允许</strong>一个 key 为 null ,允许多个 value 为空，HashMap <strong>不支持</strong>线程的同步，即可能会出现在同一时刻有多个线程同时写 HashMap ,会产生数据的不一致。如果在修改代码的过程中，需要给 HashMap 限制为线程同步的，可以采用 <code>Collections.synchronizedMap(map);</code> 方法使得HashMap 可以同步。</p></li><li><p>ConcurrentHashMap是基于这样的考虑：降低锁的粒度。在 Hashtable 中的关键字是使用 synchronized 基于整张表结构的，锁的粒度太大，它每次通过锁住整张表让线程独占，来保证安全性。</p></li><li><p>LinkedHashMap <strong>保存了记录的插入顺序</strong>，在使用 Iterator 遍历 LinkedHashMap 的时候，先得到的记录肯定是先插入的。在遍历的时候会比 HashMap 慢，因为 HashMap 是以O(1)来设计存取的。并且 LinkedHashMap <strong>继承自 HashMap</strong> ，拥有它的全部特性。</p></li><li><p>TreeMap是基于红黑树实现的，它是一种有序的存储结构，并且程序员可以自己定义排序器。TreeMap 默认会按存入的键值 key 来排序，默认是按升序排序，当然也可以指定排序的比较器。 TreeMap 同样有洁癖，<strong>不允许</strong>存入 null 值。使用 Iterator 遍历出来的 TreeMap 往往是有序的。</p></li></ol><p><strong>总结</strong>：常用HashMap，允许null插入；有两个子类：ConcurrentHashMap和LinkedHashMap。前者用来弥补线程安全，后者用来弥补有序。此外还有Hashtable和TreeMap。虽然CouncurrentHashMap性能明显优于Hashtable，但是并不能完全取代Hashtable，因为遍历ConcurrentHashMap的迭代器是弱一致的。TreeMap数据结构则可以帮助我们得到一个有序的结果，适用于需要输出排序结果的场景。</p><p>注意：Java 8 改进特性</p><p>Java 8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树 组成。在 Java 8 中，当链表中的元素超过了 8 个以后，会将链表转换为<strong>红黑树</strong>，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><h3 id="几个常用hash函数"><a href="#几个常用hash函数" class="headerlink" title="几个常用hash函数"></a>几个常用hash函数</h3><p>一般做题的时候，通常是用 HashMap 解决问题。</p><ol><li>创建一个hashMap</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&gt; ans = <span class="keyword">new</span> HashMap&lt;String, List&gt;();</span><br></pre></td></tr></table></figure><p>在尖括号里，第一个类型是 <code>KEY</code> , 第二个类型是 <code>VALUE</code> 。</p><ol start="2"><li>判断元素是否存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>根据 key 找 value</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V                    <span class="title">get</span><span class="params">(Object key)</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加一对新的键值组合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V                    <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>删除对应的key</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V                    <span class="title">remove</span><span class="params">(Object key)</span></span></span><br></pre></td></tr></table></figure><ol start="6"><li>其他函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object               <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;Entry&lt;K, V&gt;&gt;     <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt;               <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt;        <span class="title">values</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="hashmap应用场景"><a href="#hashmap应用场景" class="headerlink" title="hashmap应用场景"></a>hashmap应用场景</h3><p>在实际应用中，hashMap数据结构 适用以下几个情况</p><ul><li>需要遍历许多次才能解决的问题，hashMap 可以大大减小算法的时间复杂度</li><li>需要记忆性的问题，像这道题，我们需要记住每个字符的所属情况，并给他们打一个专属标记。</li></ul><h2 id="更多关于哈希表的问题"><a href="#更多关于哈希表的问题" class="headerlink" title="更多关于哈希表的问题"></a>更多关于哈希表的问题</h2><p>更多关于哈希表的问题请转到<a href="https://allenmistake.github.io/tags/%E5%93%88%E5%B8%8C/" target="_blank" rel="noopener">链表标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="哈希" scheme="http://www.allenmistake.top/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="字符串" scheme="http://www.allenmistake.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：138.复制带随机指针的链表</title>
    <link href="http://www.allenmistake.top/2019/04/08/leetcode138/"/>
    <id>http://www.allenmistake.top/2019/04/08/leetcode138/</id>
    <published>2019-04-08T03:56:07.000Z</published>
    <updated>2019-04-09T07:14:05.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。</p><p>要求返回这个链表的深拷贝。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/08/leetcode138/138.png" alt="示意图" title>                </div>                <div class="image-caption">示意图</div>            </figure><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:2&#125;,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">节点 1 的值是 1，它的下一个指针和随机指针都指向节点 2 。</span><br><span class="line">节点 2 的值是 2，它的下一个指针指向 null，随机指针指向它自己。</span><br></pre></td></tr></table></figure><p>节点数据结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line">    <span class="keyword">public</span> Node random;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> _val,Node _next,Node _random)</span> </span>&#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        next = _next;</span><br><span class="line">        random = _random;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我一开始没太看懂，所以题目特意用的中文版的。<br>大概意思就是，有这么一个链表，其中的节点不止有 next 指针，还有一个指向随机节点的 random 指针，要求我们复制一个它的深拷贝，即重新开辟一个空间，<strong>传值而不是传引用</strong>。</p><h2 id="哈希表解题思路"><a href="#哈希表解题思路" class="headerlink" title="哈希表解题思路"></a>哈希表解题思路</h2><h2 id="代码1：哈希表"><a href="#代码1：哈希表" class="headerlink" title="代码1：哈希表"></a>代码1：哈希表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop 1. copy所有节点</span></span><br><span class="line">    RandomListNode cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.put(cur, <span class="keyword">new</span> Node(cur.val, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// loop 2. 分配所有的指针( next 和 random )</span></span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        map.get(cur).next = map.get(cur.next);</span><br><span class="line">        map.get(cur).random = map.get(cur.random);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.get(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化——常数空间复杂度"><a href="#优化——常数空间复杂度" class="headerlink" title="优化——常数空间复杂度"></a>优化——常数空间复杂度</h2><p>一个直观的解决方案是为列表中的每个节点保留一个哈希表，通过这个哈希表，我们只需要分别在两轮中迭代列表来创建节点并为它们的随机指针分配值。结果，这个解的空间复杂度是0(N)，尽管具有线性时间复杂度。</p><p>作为一个优化的解决方案，我们可以将空间复杂度降低到常数。想法是将原始节点与其副本节点关联在一个链接列表中。这样，我们不需要额外的空间来跟踪新节点。</p><p>该算法由以下三个步骤组成，也是三轮迭代。</p><p>迭代原始列表并复制每个节点。每个节点的副本会立即跟随其原始副本。迭代新列表，并为每个复制的节点分配随机指针。恢复原始列表并提取重复的节点。该算法实现图示如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/08/leetcode138/138-1.jpg" alt="示意图1" title>                </div>                <div class="image-caption">示意图1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/08/leetcode138/138-2.png" alt="示意图2" title>                </div>                <div class="image-caption">示意图2</div>            </figure><h2 id="代码2：常数空间复杂度"><a href="#代码2：常数空间复杂度" class="headerlink" title="代码2：常数空间复杂度"></a>代码2：常数空间复杂度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    <span class="comment">//第一步：copy一份，并放在原版后面</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node next = cur.next;</span><br><span class="line">        cur.next = <span class="keyword">new</span> Node(cur.val, next, <span class="keyword">null</span>);</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步：令copy的随机指针指向应该指向的copy</span></span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.random != <span class="keyword">null</span>)</span><br><span class="line">            cur.next.random = cur.random.next;</span><br><span class="line">        cur = cur.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三步：把cpoy分离出来</span></span><br><span class="line">    cur = head;</span><br><span class="line">    Node copyHead = head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node next = cur.next.next;</span><br><span class="line">        Node copy = cur.next;</span><br><span class="line">        cur.next = next;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>)</span><br><span class="line">            copy.next = next.next;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多关于链表的问题"><a href="#更多关于链表的问题" class="headerlink" title="更多关于链表的问题"></a>更多关于链表的问题</h2><p>更多关于链表的问题请转到<a href="https://allenmistake.github.io/tags/%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">链表标签</a></p><h2 id="更多关于哈希表的问题"><a href="#更多关于哈希表的问题" class="headerlink" title="更多关于哈希表的问题"></a>更多关于哈希表的问题</h2><p>更多关于哈希表的问题请转到<a href="https://allenmistake.github.io/tags/%E5%93%88%E5%B8%8C/" target="_blank" rel="noopener">链表标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="哈希" scheme="http://www.allenmistake.top/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="链表" scheme="http://www.allenmistake.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：92&amp;206.反转链表</title>
    <link href="http://www.allenmistake.top/2019/04/01/leetcode92-206/"/>
    <id>http://www.allenmistake.top/2019/04/01/leetcode92-206/</id>
    <published>2019-04-01T12:20:44.000Z</published>
    <updated>2019-04-09T07:13:01.421Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：92-amp-206-反转链表"><a href="#Leetcode日记：92-amp-206-反转链表" class="headerlink" title="Leetcode日记：92&amp;206.反转链表"></a>Leetcode日记：92&amp;206.反转链表</h1><h2 id="92-反转链表其中一段"><a href="#92-反转链表其中一段" class="headerlink" title="92.反转链表其中一段"></a>92.反转链表其中一段</h2><p>Reverse a linked list from position m to n. Do it in one-pass.<br>Note: 1 ≤ m ≤ n ≤ length of list.<br><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure><h3 id="92-题目分析"><a href="#92-题目分析" class="headerlink" title="92-题目分析"></a>92-题目分析</h3><p>也不知道Leetcode是怎么排布的题的顺序，但是唯一的可能是按题出现的频率，因为这个92题是II，206才是I。所以我们主要分析这道题。无非就是给你两个数，让你翻转第 M 个到底 N 个链表上的元素。</p><p>反转问题确实也是链表中常见的一种类型。而且这种题看似简单，但思考起来很容易搞乱。下面从代码的角度分析一下：</p><h3 id="92-代码-1"><a href="#92-代码-1" class="headerlink" title="92-代码-1"></a>92-代码-1</h3><p>代码一：节点插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// create a dummy node to mark the head of this list</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="comment">// make a pointer pre as a marker for the node before reversing</span></span><br><span class="line">    ListNode pre = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m-<span class="number">1</span>; i++)</span><br><span class="line">        pre = pre.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a pointer to the beginning of a sub-list that will be reversed</span></span><br><span class="line">    ListNode start = pre.next;</span><br><span class="line">    <span class="comment">// a pointer to a node that will be reversed</span></span><br><span class="line">    ListNode then = start.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---&gt; pre = 1, start = 2, then = 3</span></span><br><span class="line">    <span class="comment">// dummy-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-m; i++)&#123;</span><br><span class="line">        start.next = then.next;</span><br><span class="line">        then.next = pre.next;</span><br><span class="line">        pre.next = then;</span><br><span class="line">        then = start.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// first reversing : dummy-&gt;1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4</span></span><br><span class="line">    <span class="comment">// second reversing: dummy-&gt;1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)</span></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="92-代码分析"><a href="#92-代码分析" class="headerlink" title="92-代码分析"></a>92-代码分析</h3><p>首先，我们利用给的 M ，找出第M个元素的位置，并将 M-1 位置标记为 pre ，M 标记为 start ，M+1 位置标记为 then ，然后执行第二个循环。<br>第二个循环的逻辑是交换节点，但是，我们并不是交换相邻的两个元素，而是将 <code>then</code> 换到 <code>pre.next</code> 的位置，这样才能达到翻转部分链表的目的：</p><ol><li>循环找到第 M 个元素<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/01/leetcode92-206/92-1.jpg" alt="第一次循环后" title>                </div>                <div class="image-caption">第一次循环后</div>            </figure></li><li>将 <code>then</code> 换到 <code>pre.next</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/01/leetcode92-206/92-2.jpg" alt="第二个循环执行一次" title>                </div>                <div class="image-caption">第二个循环执行一次</div>            </figure></li><li>将<code>then</code>后移一个<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/01/leetcode92-206/92-3.jpg" alt="后移" title>                </div>                <div class="image-caption">后移</div>            </figure></li><li>继续循环<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/04/01/leetcode92-206/92-4.jpg" alt="第二个循环执行两次" title>                </div>                <div class="image-caption">第二个循环执行两次</div>            </figure></li></ol><p>为了达到这个目的，我们要声明三个指针</p><ul><li>第一个指向最后一个不需要反转的节点（第 M-1 个节点），相当于要反转链表部分的 dummy ，<strong>它负责找到头</strong>。</li><li>第二个指向第 M 个节点，它将是反转链表部分的最后一个节点，<strong>它负责找到尾</strong>。</li><li>以上这两个指针不应该移动，因为他们类似于 dummy 一头一尾，可以确定翻转边界。</li><li>第三个指针循环中移动，来使链表翻转。<strong>它负责元素移动</strong>。</li></ul><h3 id="92-代码-2"><a href="#92-代码-2" class="headerlink" title="92-代码-2"></a>92-代码-2</h3><p>代码二：递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Object level variables since we need the changes</span></span><br><span class="line">    <span class="comment">// to persist across recursive calls and Java is pass by value.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stop;</span><br><span class="line">    <span class="keyword">private</span> ListNode left;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recurseAndReverse</span><span class="params">(ListNode right, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// base case. Don't proceed any further</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep moving the right pointer one step forward until (n == 1)</span></span><br><span class="line">        right = right.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep moving left pointer to the right until we reach the proper node</span></span><br><span class="line">        <span class="comment">// from where the reversal is to start.</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">this</span>.left.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Recurse with m and n reduced.</span></span><br><span class="line">        <span class="keyword">this</span>.recurseAndReverse(right, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case both the pointers cross each other or become equal, we</span></span><br><span class="line">        <span class="comment">// stop i.e. don't swap data any further. We are done reversing at this</span></span><br><span class="line">        <span class="comment">// point.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left == right || right.next == <span class="keyword">this</span>.left) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Until the boolean stop is false, swap data between the two pointers</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.stop) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="keyword">this</span>.left.val;</span><br><span class="line">            <span class="keyword">this</span>.left.val = right.val;</span><br><span class="line">            right.val = t;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Move left one step to the right.</span></span><br><span class="line">            <span class="comment">// The right pointer moves one step back via backtracking.</span></span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">this</span>.left.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = head;</span><br><span class="line">        <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.recurseAndReverse(head, m, n);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="92-代码-3"><a href="#92-代码-3" class="headerlink" title="92-代码-3"></a>92-代码-3</h3><p>代码三：代码复用<br>这个方法是将部分链表翻转，转化为已知问题，也就是206转化一个完整链表问题。这样就可以将位置问题转化为已知问题，第二个循环完全是代码的复用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Empty list</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Move the two pointers until they reach the proper starting point</span></span><br><span class="line">    <span class="comment">// in the list.</span></span><br><span class="line">    ListNode cur = head, prev = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        m--;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The two pointers that will fix the final connections.</span></span><br><span class="line">    ListNode con = prev, tail = cur;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iteratively reverse the nodes until n becomes 0.</span></span><br><span class="line">    ListNode third = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        third = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = third;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the final connections as explained in the algorithm</span></span><br><span class="line">    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">        con.next = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head = prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tail.next = cur;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的讲的是链表的翻转，可以用的思路有</p><ul><li>递归、回溯</li><li>循环插入</li></ul><p>链表问题在面试中被提问的可能性很大，而且题目变化种类不多，希望每讲一个问题，每个方法都记住。</p><h2 id="更多关于链表的问题"><a href="#更多关于链表的问题" class="headerlink" title="更多关于链表的问题"></a>更多关于链表的问题</h2><p>更多关于链表的问题请转到<a href="https://allenmistake.github.io/tags/%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">链表标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="链表" scheme="http://www.allenmistake.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>3月总结 and 4月计划</title>
    <link href="http://www.allenmistake.top/2019/03/31/monthlysummary/"/>
    <id>http://www.allenmistake.top/2019/03/31/monthlysummary/</id>
    <published>2019-03-31T02:22:13.000Z</published>
    <updated>2020-01-03T09:06:39.038Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="3月总结-and-4月计划"><a href="#3月总结-and-4月计划" class="headerlink" title="3月总结 and 4月计划"></a>3月总结 and 4月计划</h1><h2 id="3月已完成的工作汇总"><a href="#3月已完成的工作汇总" class="headerlink" title="3月已完成的工作汇总"></a>3月已完成的工作汇总</h2><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><p>截止到现在，Leetcode完成题目已经完成了56道，其中3月份完成了40+，个人对这个进度还是很满意的，我们这个月着重学习了一下几个比较大的知识点（按讲解类型从多到少排序）</p><ul><li>回溯问题 + DFS</li><li>链表问题 + 双指针</li><li>树的遍历（递归与非递归）</li><li>字符串 <code>String</code> and <code>StringBuffer</code></li></ul><p>而以上只是总结出来的部分，还有一些觉得没有必要或者说不是很具有代表性，就被跳过。</p><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><p>关于Java的进展也是很快，完成了月初的计划，把并发多线程和虚拟机的部分都看完了，并做了总结，但是<strong>理解得还不够深入</strong>，还要反复去看总结笔记。关于原理性的概念，要反复看，不能急于求成。而且关于多线程的部分还要参照《Thinking in Java》来看，反复咀嚼。</p><h3 id="其他工作"><a href="#其他工作" class="headerlink" title="其他工作"></a>其他工作</h3><p>这个月看了好几本书，但是没有看完，感觉非虚构类文学作品还是很难啃的，这种难啃并非像专业书籍那样，每句话在给你讲解原理，而是它一直在陈述一些事实，但是其背后的逻辑关系，需要你有一些历史、政治、地理知识才能看懂、看下去。<br><strong>看完的书</strong></p><ul><li><p>动物农场<br><strong>未看完的书</strong></p></li><li><p>事实改变之后</p></li><li>病菌、枪炮和钢铁</li></ul><p>感觉自己对于这种社会科学尤其涉及历史方面的书不是很能看得下去，还是要先把手头上的全球通史看完。。</p><p>总感觉英语不能落下太多，但又不知道怎么才能提高，这个事还是挺烦的，目前来讲，词汇量我觉得不是最大敌人，反而是发音和听力是两大难关，而且这两个在日常生活中是最常用的。</p><h2 id="4月计划"><a href="#4月计划" class="headerlink" title="4月计划"></a>4月计划</h2><h3 id="Busy-in-April"><a href="#Busy-in-April" class="headerlink" title="Busy in April"></a>Busy in April</h3><p>四月是奔波忙碌的一个月份，各种假。所以留给学习的时间感觉会有所减少，不过还是应该坚持的。</p><h3 id="四月计划"><a href="#四月计划" class="headerlink" title="四月计划"></a>四月计划</h3><ol><li>Leetcode<ul><li>继续刷题，目标：40（总结与没总结加一起）</li><li>复习回溯与链表（再联系几道题）</li><li>下面的重点：<strong>哈希表</strong>、数组</li></ul></li><li>Java<ul><li>复习多线程部分（Thinking in Java）</li><li>查漏补缺（深浅拷贝、多种数据结构的具体特点与实现「日志上已有，注意更新不要新增」）</li></ul></li><li>Github项目<ul><li>OneAccount</li></ul></li></ol><h2 id="其他感悟"><a href="#其他感悟" class="headerlink" title="其他感悟"></a>其他感悟</h2><p>说了那么多正经的，下面聊一点不是那么正式的。前两天看了《新喜剧之王》、重温了一下《飞驰人生》。</p><p>先说《新》吧，一开始过年的时候我是没有去看它的，因为宣传实在太 low 了，而且女主长得实在喜欢不起来，不过现在回头看，感觉还是有点意思的，王宝宝的搞笑实力还是有点。影片更多的还是对小人物的刻画，众人皆为咸鱼，如何翻身？片中的女主最后成为影后我觉得有点理想化，但是努力肯定还是有用的，在这个社会上不断挣扎吧，从中找到乐趣。</p><p>韩寒的电影我是每次都会去看的，这次他终于拍了完全关于赛车的电影，这次的飞驰人生是一个喜剧片，但是喜剧往往是有着悲剧内核的，张弛一行人的中年危机，呼应着片子最后的《奉献》，很是感触，不知道我们到了4、50岁会不会有这些疑问。对自我存在的价值发生怀疑，但是你我都是片中20多岁的林臻东，年轻真好，我们可以不考虑以后，只管往前冲。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/31/monthlysummary/car.jpg" alt="剧照" title>                </div>                <div class="image-caption">剧照</div>            </figure><p>就像片中两个人的对话<br>“你就这么想赢么”<br>“我不是想赢，我是不想输”<br>这句话看似没什么区别，但是可以感受到中年人开始有了负担，他害怕失败，而我们，还可以失败。</p><p>以上，与诸君共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode日记：141&amp;142.链表中的环</title>
    <link href="http://www.allenmistake.top/2019/03/30/leetcode141-142/"/>
    <id>http://www.allenmistake.top/2019/03/30/leetcode141-142/</id>
    <published>2019-03-30T02:43:05.000Z</published>
    <updated>2019-04-08T02:48:57.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：141-amp-142-链表中的环"><a href="#Leetcode日记：141-amp-142-链表中的环" class="headerlink" title="Leetcode日记：141&amp;142.链表中的环"></a>Leetcode日记：141&amp;142.链表中的环</h1><h2 id="141题目：判断是否存在环"><a href="#141题目：判断是否存在环" class="headerlink" title="141题目：判断是否存在环"></a>141题目：判断是否存在环</h2><p>Given a linked list, determine if it has a cycle in it.</p><p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p><p><strong>Example 1</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [3,2,0,-4], pos = 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure><p>!(leetcode141-1.png)</p><p><strong>Example 2</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2], pos = 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure><p>!(leetcode141-2.png)</p><p><strong>Example 3</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1], pos = -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure><p>!(leetcode141-3.png)</p><h3 id="141问题分析"><a href="#141问题分析" class="headerlink" title="141问题分析"></a>141问题分析</h3><p>这道题意思很简单，判断输入的链表是否存在环。<br>上次刚讲到快慢指针的应用问题，这次就遇到了链表中的环。那么如何将二者结合起来呢？</p><p>其实答案很简单，快指针一下走两步，慢指针一下走一步，如果链表存在环，那么快慢指针一定会在环的某个位置<strong>相遇</strong>。</p><h3 id="141代码"><a href="#141代码" class="headerlink" title="141代码"></a>141代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode slow = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode fast = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    slow.next = head;</span><br><span class="line">    fast.next = head;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果快慢指针相遇，说明存在环</span></span><br><span class="line">        <span class="keyword">if</span>(slow==fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142题目：找出链表中环的起始位置"><a href="#142题目：找出链表中环的起始位置" class="headerlink" title="142题目：找出链表中环的起始位置"></a>142题目：找出链表中环的起始位置</h2><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p><p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p><p>Note: Do not modify the linked list.</p><p><strong>Example 1</strong>:</p><p>Input: head = [3,2,0,-4], pos = 1<br>Output: tail connects to node index 1<br>Explanation: There is a cycle in the linked list, where tail connects to the second node.</p><p>!(leetcode141-1.png)<br><strong>Example 2</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2], pos = 0</span><br><span class="line">Output: tail connects to node index 0</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure><p>!(leetcode141-2.png)<br><strong>Example 3</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1], pos = -1</span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure><p>!(leetcode141-3.png)</p><h3 id="142题目分析"><a href="#142题目分析" class="headerlink" title="142题目分析"></a>142题目分析</h3><p>这道题在141的基础上多了一个找出环的初始位置，这个需要用到一个常识或者说小技巧，我们要知道。<br>快慢指针相遇的位置和环起点的位置，以及链表头节点位置关系：</p><p><strong>第一次碰撞点Pos到连接点Join的距离=头指针到连接点Join的距离</strong>，因此，分别从第一次碰撞点 Pos、头指针 head 开始走，相遇的那个点就是连接点。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/leetcode141-142/circle.png" alt="circle" title>                </div>                <div class="image-caption">circle</div>            </figure></p><p>在环上相遇后，记录第一次相遇点为 Pos，连接点为 Join，假设头结点到连接点的长度为LenA，连接点到第一次相遇点的长度为x，环长为 R。<br>第一次相遇时，slow 走的长度 S = LenA + x;<br>第一次相遇时，fast 走的长度 2S = LenA + n*R + x;<br>所以可以知道，LenA + x =  n*R;　　LenA = n*R -x;</p><h3 id="142代码"><a href="#142代码" class="headerlink" title="142代码"></a>142代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">                ListNode slow = head;</span><br><span class="line">                ListNode fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="comment">//相遇之后，从头节点出发</span></span><br><span class="line">        <span class="keyword">if</span> (fast == slow)&#123;</span><br><span class="line">            ListNode slow2 = head;</span><br><span class="line">            <span class="keyword">while</span> (slow2 != slow)&#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                slow2 = slow2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：求有环单链表的环长</p><p>在环上相遇后，记录第一次相遇点为Pos，之后指针slow继续每次走1步，fast每次走2步。在下次相遇的时候fast比slow正好又多走了一圈，也就是多走的距离等于环长。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/leetcode141-142/circle.png" alt="circle" title>                </div>                <div class="image-caption">circle</div>            </figure></p><p>设从第一次相遇到第二次相遇，设slow走了len步，则fast走了 2*len 步，相遇时多走了一圈：环长 = 2*len-len。</p><h2 id="更多关于链表的问题"><a href="#更多关于链表的问题" class="headerlink" title="更多关于链表的问题"></a>更多关于链表的问题</h2><p>更多关于链表的问题请转到<a href="https://allenmistake.github.io/tags/%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">链表标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="链表" scheme="http://www.allenmistake.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：19&amp;24.链表相关操作</title>
    <link href="http://www.allenmistake.top/2019/03/28/leetcodelinkedlist/"/>
    <id>http://www.allenmistake.top/2019/03/28/leetcodelinkedlist/</id>
    <published>2019-03-28T11:41:06.000Z</published>
    <updated>2019-04-08T02:49:03.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：19-amp-24-amp-84-链表相关操作"><a href="#Leetcode日记：19-amp-24-amp-84-链表相关操作" class="headerlink" title="Leetcode日记：19&amp;24&amp;84.链表相关操作"></a>Leetcode日记：19&amp;24&amp;84.链表相关操作</h1><h2 id="19-删除倒数第N个元素"><a href="#19-删除倒数第N个元素" class="headerlink" title="19.删除倒数第N个元素"></a>19.删除倒数第N个元素</h2><h3 id="19题目"><a href="#19题目" class="headerlink" title="19题目"></a>19题目</h3><p>Given a linked list, remove the n-th node from the end of list and return its head.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><h3 id="19题目分析"><a href="#19题目分析" class="headerlink" title="19题目分析"></a>19题目分析</h3><p>首先，题目要求删除链表中倒数第n个元素。<br>其实很简单，我们只需要遍历一遍链表，知道链表的元素个数。再次遍历，找到<code>length-n</code>个元素就可以了。<br>但是题目有进阶要求，能不能只遍历一次？</p><p>答案是肯定的。请看下面代码：</p><h3 id="19代码"><a href="#19代码" class="headerlink" title="19代码"></a>19代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode slow = start, fast = start;</span><br><span class="line">    slow.next = head;</span><br><span class="line">    <span class="comment">//Move fast in front so that the gap between slow and fast becomes n</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++)   &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Move fast to the end, maintaining the gap</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Skip the desired node</span></span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> start.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19代码分析"><a href="#19代码分析" class="headerlink" title="19代码分析"></a>19代码分析</h3><p>这里用到了一个很巧妙的方法，我将它命名为“双指针分离法”，主要思想就是先让这两个指针岔开n个元素，然后两个指针同时向前步进。当前面的元素到最后时，后面那个元素刚好指向倒数第n个元素。<br>算法示意图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/28/leetcodelinkedlist/leetcode19.png" alt="双指针分离法示意图" title>                </div>                <div class="image-caption">双指针分离法示意图</div>            </figure></p><h2 id="24-成对交换节点"><a href="#24-成对交换节点" class="headerlink" title="24.成对交换节点"></a>24.成对交换节点</h2><h3 id="24题目"><a href="#24题目" class="headerlink" title="24题目"></a>24题目</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><h3 id="24题目分析"><a href="#24题目分析" class="headerlink" title="24题目分析"></a>24题目分析</h3><p>结点交换，是链表中老生常谈的一个话题，看似简单，编写程序的时候，容易被节点绕晕，那么我们就看看这个程序时如何编写的吧！</p><h3 id="24代码"><a href="#24代码" class="headerlink" title="24代码"></a>24代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((head == <span class="keyword">null</span>)||(head.next == <span class="keyword">null</span>))</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode n = head.next;</span><br><span class="line">    head.next = swapPairs(head.next.next);</span><br><span class="line">    n.next = head;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24代码分析"><a href="#24代码分析" class="headerlink" title="24代码分析"></a>24代码分析</h3><p>这里采用了递归，是因为如果从前往后交换的话，前面一对链接的一定要是已经交换好的下一对，所以程序的运行顺序是先将最后的交换好，然后逐渐往回过渡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/28/leetcodelinkedlist/leetcode24.jpg" alt="成对交换" title>                </div>                <div class="image-caption">成对交换</div>            </figure><p>如图所示，每一层递归，我们都会创建<code>new</code>一个新节点，这个节点首先保存为<code>head.next</code>的信息，然后进行递归，递归返回输入链表的交换后的头节点，随后将返回的头节点设置为<code>head.next</code>。最后，将<code>n.next</code>指向<code>head</code>完成交换，此时原来的head.next完全被隔离，被系统回收。</p><p>这道题看似容易，实际上还是需要一番思考的。</p><h2 id="82-删除链表重复元素II"><a href="#82-删除链表重复元素II" class="headerlink" title="82.删除链表重复元素II"></a>82.删除链表重复元素II</h2><h3 id="82题目"><a href="#82题目" class="headerlink" title="82题目"></a>82题目</h3><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">Output: 2-&gt;3</span><br></pre></td></tr></table></figure><h3 id="82题目分析"><a href="#82题目分析" class="headerlink" title="82题目分析"></a>82题目分析</h3><p>之前有一道题是保留一个重复元素，删除多余的，那道题比较简单，这道题的意图是：只要是重复的元素，都删除，一个不留。<br>这就牵扯到，你要有两个指针，一个指针用于记录上一个不重复元素，另一个指针负责向前步进检测并删除重复元素。</p><h3 id="82代码"><a href="#82代码" class="headerlink" title="82代码"></a>82代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode FakeHead=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    FakeHead.next=head;</span><br><span class="line">    ListNode pre=FakeHead;</span><br><span class="line">    ListNode cur=head;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&amp;&amp;cur.val==cur.next.val)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre.next==cur)&#123;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pre.next=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FakeHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="82代码分析"><a href="#82代码分析" class="headerlink" title="82代码分析"></a>82代码分析</h3><p>从代码中我们可以看出，代码用了两个指针，第一个指针<code>pre</code>用来记录最后一个不重复的指针（这个指针一定不会被删除掉）。第二个指针<code>cur</code>用来记录当前位置，用它来判断是否该元素为重复元素<code>(cur.next!=null&amp;&amp;cur.val==cur.next.val)</code>，利用一个循环，直接找到下一个出现的不重复元素，这里有两种情况，一种是循环没有被执行（即<code>cur</code>为一个不重复元素），那么<code>cur</code>没有移动，我们让<code>pre=pre.next</code>，来更新最后一个不重复元素。如果是重复元素，则跨过<code>cur</code>，执行<code>pre.next=cur.next</code>。</p><h2 id="链表问题总结"><a href="#链表问题总结" class="headerlink" title="链表问题总结"></a>链表问题总结</h2><p>链表问题在所有数据结构里面所示较为简单的一种。而且相对来说问题的变数比较少，我们着重关注以下几个问题</p><ol><li><p>dummy哑节点</p><p> 我们可以看到，上面题目中，第一题的<br> <code>ListNode start = new ListNode(0);</code><br> 最后一道题的<br> <code>ListNode FakeHead=new ListNode(0);</code><br> 都首先创建了一个新节点，这个结点的下一个往往是输入的头节点，为什么会这么设置呢？<br> 哑节点设置的主要原因：<br> 避免<strong>头节点可能由于某种原因被删除等一系列问题而导致的边界问题</strong>，简化代码。</p></li><li><p>双指针设计</p><p> 链表的很多问题用双指针都会降低一些时间复杂度。比如leetcode24等很多问题可以应用在很多场景中：</p><ul><li>删除链表中元素</li><li>拆分链表</li><li>找出中点或中位数</li><li><a href="https://allenmistake.github.io/2019/03/30/leetcode141-142/" target="_blank" rel="noopener">寻找链表是否存在环</a></li><li><p>寻找范围</p><p>还有更多应用，但是思想都是不变的，指针一快一慢，具体快多少，看题目中具体要求。这便是著名的“<strong>快慢指针</strong>”</p></li></ul></li></ol><h2 id="更多关于链表的问题"><a href="#更多关于链表的问题" class="headerlink" title="更多关于链表的问题"></a>更多关于链表的问题</h2><p>更多关于链表的问题请转到<a href="https://allenmistake.github.io/tags/%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">链表标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="链表" scheme="http://www.allenmistake.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结JVM之垃圾收集器与内存分配策略</title>
    <link href="http://www.allenmistake.top/2019/03/26/JVM1/"/>
    <id>http://www.allenmistake.top/2019/03/26/JVM1/</id>
    <published>2019-03-26T04:17:05.000Z</published>
    <updated>2019-12-26T07:20:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/26/JVM1/JVM内存布局.png" alt="JVM经典内存布局" title>                </div>                <div class="image-caption">JVM经典内存布局</div>            </figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p>这一块很重要，要着重看！（在JVM这本书里面有更详细的介绍）</p><ul><li>方法区（公有）：<br>  用户存储已被虚拟机加载的<strong>类信息，常量，静态常量</strong>，即时编译器编译后的代码等数据。<br>  其中包含<strong>常量池</strong>：用户存放编译器生成的各种字面量和符号引用。</li><li>堆（公有）：<br>  是JVM所管理的内存中最大的一块。唯一目的就是存放<strong>实例对象</strong>，几乎所有的对象实例都在这里分配。Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。<br>  堆分为两大块：新生代和老年代。</li><li>虚拟机栈（线程私有）：<br>  描述的是java方法执行的内存模型：每个方法在执行时都会创建一个栈帧，用户存储局部变量表，操作数栈，动态连接，方法出口等信息。每一个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。对这个区域定义了两种异常状态OutOfMemoryError、StackOverflowError</li><li>本地方法栈（线程私有）:<br>  与虚拟机栈所发挥的作用相似。它们之间的区别不过是虚拟机栈为虚拟机执行java方法，而本地方法栈为虚拟机使用到的Native方法服务。</li><li>程序计数器（线程私有）：<br>  一块较小的内存，当前线程所执行的字节码的行号指示器。字节码解释器工作时，就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li></ul><p>Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p><h2 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h2><h3 id="引用计数器"><a href="#引用计数器" class="headerlink" title="引用计数器"></a>引用计数器</h3><p>主流的JVM里面没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象间的互循环引用的问题。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>在Java语言中，可以作为GC Roots的对象包括下面几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象；</li><li>方法区中类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象；</li></ul><p>在可达性分析算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><ol><li>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行<code>finalize()</code>方法。当对象没有覆盖<code>finalize()</code>，或者<code>finalize()</code>已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</li><li>如果这个对象被判定为有必要执行<code>finalize()</code>，那么这个对象将会放置在一个叫做F-Queue队列之中，并在稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。<code>finalize()</code>是对象逃脱死亡命运的最后一次机会，稍候GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在<code>finalie()</code>中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（<code>this</code>关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将会被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的被回收了。</li></ol><p><strong>注意</strong>：Java并不推荐使用<code>finalize()</code>函数，Java中这个表示建议回收，实际开发者并不能掌握到底什么时候JVM才会回收这部分内存，这和c++的析构不一样，运行代价高昂、不确定性大。</p><h3 id="引用再划分"><a href="#引用再划分" class="headerlink" title="引用再划分"></a>引用再划分</h3><ol><li><p>强引用<br> 特点：我们平常典型编码<code>Object obj = new Object()</code>中的 obj 就是强引用。通过关键字<code>new</code>创建的对象所关联的引用就是强引用。 当JVM内存空间不足，JVM 宁愿抛出 OutOfMemoryError 运行时错误（OOM），使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，具体回收时机还是要看垃圾收集策略。</p></li><li><p>软引用<br> 特点：软引用通过SoftReference类实现。 软引用的生命周期比强引用短一些。只有当 JVM认为内存不足时，才会去试图回收软引用指向的对象：即JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。后续，我们可以调用 ReferenceQueue 的<code>poll()</code>方法来检查是否有它所关心的对象被回收。如果队列为空，将返回一个 null ,否则该方法返回队列中前面的一个 Reference 对象。</p><p> 应用场景：软引用通常用来实现内存敏感的缓存。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p></li><li><p>弱引用<br> 特点：弱引用通过 WeakReference 类实现。 弱引用的生命周期比软引用短。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。由于垃圾回收器是一个优先级很低的线程，因此不一定会很快回收弱引用的对象。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><p> 应用场景：弱应用同样可用于内存敏感的缓存。</p></li><li><p>虚引用<br> 特点：虚引用也叫幻象引用，通过 PhantomReference 类来实现。无法通过虚引用访问对象的任何属性或函数。幻象引用仅仅是提供了一种确保对象被 ﬁnalize 以后，做某些事情的机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue queue = <span class="keyword">new</span> ReferenceQueue ();</span><br><span class="line">PhantomReference pr = <span class="keyword">new</span> PhantomReference (object, queue);</span><br></pre></td></tr></table></figure><p> 程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取一些程序行动。</p><p> <strong>应用场景</strong>：可用来跟踪对象被垃圾回收器回收的活动，当一个虚引用关联的对象被垃圾收集器回收之前会收到一条系统通知。</p></li></ol><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段。</p><ol><li>首先标记出所有需要回收的对象</li><li>在标记完成后统一回收所有被标记的对象。<br><strong>不足</strong>：<br>效率问题：标记和清除两个过程的效率都不高<br>空间问题：标记清除之后产生大量不连续的内存碎片，空间碎片太多可能会导致以后程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ol><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p><strong>目的</strong>：为了解决效率问题。<br>将可用内存按容量大小划分为大小相等的两块，每次只使用其中的一块。当一块内<br>存使用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空<br>间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用<br>考虑内存碎片等复杂情况。<br><strong>缺点</strong>：将内存缩小为了原来的一半。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>复制收集算法在对象存活率较高时，就要进行较多的复制操作，效率就会变低。根据老年代的特点，提出了“标记-整理”算法。标记过程仍然与”标记-清除“算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当<br>的收集算法。<br>在<strong>新生代</strong>中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法。<br>在<strong>老年代</strong>中，因为对象存活率高、没有额外空间对它进行分配担保，就必须采用“标记-清除”或“标记-整理”算法来进行回收。</p><h2 id="垃圾回收机制知识点"><a href="#垃圾回收机制知识点" class="headerlink" title="垃圾回收机制知识点"></a>垃圾回收机制知识点</h2><h3 id="JVM中的年代"><a href="#JVM中的年代" class="headerlink" title="JVM中的年代"></a>JVM中的年代</h3><p>JVM中分为年轻代（Young generation）和老年代(Tenured generation)。<br>HotSpot JVM把年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/26/JVM1/JVM年代.png" alt="JVM年代内存图" title>                </div>                <div class="image-caption">JVM年代内存图</div>            </figure><p>一般情况下，新创建的对象都会被分配到 Eden 区(注意1：一些大对象特殊处理)，这些对象经过第一次Minor GC后，如果仍然存活，将会被移到 Survivor 区。对象在 Survivor 区中每熬过一次 Minor GC ，年龄就会增加 1 岁，当它的年龄增加到一定程度时，就会被移动到年老代中。因为年轻代中的对象基本都是朝生夕死的(80%以上)，所以在年轻代的垃圾回收算法使用的是复制算法，复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。复制算法不会产生内存碎片。</p><p>在 GC 开始的时候，对象只会存在于Eden区和名为“From”的 Survivor 区，Survivor 区“To”是空的。紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过 -XX:MaxTenuringThreshold 来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次 GC 前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。</p><p>![对象分配与简要GC流程图]</p><p><strong>注意1</strong>：所谓大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是很长的字符串以及数组。</p><h3 id="不同年代的GC"><a href="#不同年代的GC" class="headerlink" title="不同年代的GC"></a>不同年代的GC</h3><p><strong>新生代GC</strong>(Minor GC):指发生在新生代的垃圾收集动作，该动作非常频繁。<br><strong>老年代GC</strong>(Full GC/Major GC):指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴<br>随至少一次的Minor GC。Major GC的速度一般会比Minor GC慢10倍以上。</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，则将尝试进行一次Minor GC，尽管这个 Minor GC 是有风险的。如果小于，或者 HandlePromotionFailure 设置不允许冒险，那这时也要改为进行一次Full GC。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.allenmistake.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：94&amp;144&amp;145.前序、中序、后序遍历二叉树树（递归与非递归）</title>
    <link href="http://www.allenmistake.top/2019/03/24/leetcodetreetraversal/"/>
    <id>http://www.allenmistake.top/2019/03/24/leetcodetreetraversal/</id>
    <published>2019-03-24T03:04:53.000Z</published>
    <updated>2019-03-24T11:02:55.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：94-amp-144-amp-145-前序、中序、后序遍历二叉树（递归与非递归）"><a href="#Leetcode日记：94-amp-144-amp-145-前序、中序、后序遍历二叉树（递归与非递归）" class="headerlink" title="Leetcode日记：94&amp;144&amp;145.前序、中序、后序遍历二叉树（递归与非递归）"></a>Leetcode日记：94&amp;144&amp;145.前序、中序、后序遍历二叉树（递归与非递归）</h1><h2 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h2><p>这个不用多说，就是对二叉树的遍历，只用前序遍历举个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure><p>基本就是按照遍历顺序打印结点。</p><h2 id="递归解决方案"><a href="#递归解决方案" class="headerlink" title="递归解决方案"></a>递归解决方案</h2><h3 id="递归前序"><a href="#递归前序" class="headerlink" title="递归前序"></a>递归前序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; pre = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> pre;</span><br><span class="line">    pre.add(root.val);</span><br><span class="line">    pre.addAll(preorderTraversal(root.left));</span><br><span class="line">    pre.addAll(preorderTraversal(root.right));</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归中序"><a href="#递归中序" class="headerlink" title="递归中序"></a>递归中序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// method 1: recursion</span></span><br><span class="line"></span><br><span class="line">    helper(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//helper function for method 1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper(root.left, res);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper(root.right, res);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="递归后序"><a href="#递归后序" class="headerlink" title="递归后序"></a>递归后序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    dfs(root, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        dfs(root.left, ret);</span><br><span class="line">        dfs(root.right, ret);</span><br><span class="line">        ret.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归总结"><a href="#递归总结" class="headerlink" title="递归总结"></a>递归总结</h3><p>其实就是打印语句或者说要求的操作摆放位置：</p><ul><li>前序：先执行操作，再访问左，再访问右</li><li>中序：先访问左，再执行操作，再访问右</li><li>后序：先访问左，再访问右，最后执行操作</li></ul><h2 id="非递归（利用栈）"><a href="#非递归（利用栈）" class="headerlink" title="非递归（利用栈）"></a>非递归（利用栈）</h2><h3 id="非递归前序"><a href="#非递归前序" class="headerlink" title="非递归前序"></a>非递归前序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    TreeNode p = root;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            result.add(p.val);  <span class="comment">// Add before going to children</span></span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            p = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归中序"><a href="#非递归中序" class="headerlink" title="非递归中序"></a>非递归中序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    TreeNode p = root;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            result.add(node.val);  <span class="comment">// Add after all left children</span></span><br><span class="line">            p = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用中序遍历来做个图示：首先我们假定给定的树如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/24/leetcodetreetraversal/二叉树遍历.png" alt="二叉树遍历" title>                </div>                <div class="image-caption">二叉树遍历</div>            </figure><br>随后，代码用到了栈的数据结构，利用栈的性质来按顺序压栈出栈每一个结点。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/24/leetcodetreetraversal/stack.png" alt="栈" title>                </div>                <div class="image-caption">栈</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/24/leetcodetreetraversal/result.png" alt="结果" title>                </div>                <div class="image-caption">结果</div>            </figure><br>可以看出，主要思路是只要节点不为空，就压栈，当节点为空时，弹出当前栈顶端元素，然后访问其右节点。<br>顺序的改变在于操作位于压栈还是弹栈，前序遍历是先进行操作（打印），再访问左元素。</p><h3 id="非递归后序"><a href="#非递归后序" class="headerlink" title="非递归后序"></a>非递归后序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    TreeNode p = root;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            result.addFirst(p.val);  <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">            p = p.right;             <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            p = node.left;           <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的后序遍历利用了一个很巧妙的转换，把它看作一个对于右子树的先序遍历，然后反转result。<br>具体实现方式即，优先访问右节点<code>p = p.right</code>，访问到的每个不为空的节点压入栈，当访问节点为空时，弹出栈的顶端元素。再访问其左节点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>树的遍历问题是非常基础的问题，这个要牢记，无论是递归还是非递归，之后做其他类的题目会很有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="数据结构" scheme="http://www.allenmistake.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://www.allenmistake.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：15&amp;16.三数之和</title>
    <link href="http://www.allenmistake.top/2019/03/23/leetcode15-16/"/>
    <id>http://www.allenmistake.top/2019/03/23/leetcode15-16/</id>
    <published>2019-03-23T05:54:21.000Z</published>
    <updated>2019-03-31T02:40:29.233Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：15-amp-16-三数之和"><a href="#Leetcode日记：15-amp-16-三数之和" class="headerlink" title="Leetcode日记：15&amp;16.三数之和"></a>Leetcode日记：15&amp;16.三数之和</h1><h2 id="题目15：三数之和"><a href="#题目15：三数之和" class="headerlink" title="题目15：三数之和"></a>题目15：三数之和</h2><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题让我们求三数之和，比之前那道Two Sum要复杂一些，博主考虑过先fix一个数，然后另外两个数使用Two Sum那种HashMap的解法，但是会有重复结果出现，就算使用set来去除重复也不行，会TLE，看来此题并不是考我们Two Sum的解法。那么我们来分析一下这道题的特点，要我们找出三个数且和为0，那么除了三个数全是0的情况之外，肯定会有负数和正数，我们还是要先fix一个数，然后去找另外两个数，我们只要找到两个数且和为第一个fix数的相反数就行了，既然另外两个数不能使用Two Sum的那种解法来找，如果能更有效的定位呢？我们肯定不希望遍历所有两个数的组合吧，所以如果数组是有序的，那么我们就可以用双指针以线性时间复杂度来遍历所有满足题意的两个数组合。</p><p>我们对原数组进行排序，然后开始遍历排序后的数组，这里注意不是遍历到最后一个停止，而是到<strong>倒数第三个</strong>就可以了。这里我们可以先做个剪枝优化，就是<strong>当遍历到正数的时候就break</strong>，为啥呢，因为我们的数组现在是有序的了，如果第一个要fix的数就是正数了，那么后面的数字就都是正数，就永远不会出现和为0的情况了。然后我们还要加上重复就跳过的处理，处理方法是从第二个数开始，如果和前面的数字相等，就跳过，因为我们不想把相同的数字fix两次。对于遍历到的数，用0减去这个fix的数得到一个target，然后只需要再之后找到两个数之和等于target即可。我们用两个指针分别指向fix数字之后开始的数组首尾两个数，如果两个数和正好为target，则将这两个数和fix的数一起存入结果中。然后就是跳过重复数字的步骤了，两个指针都需要检测重复数字。如果两数之和小于target，则我们将左边那个指针i右移一位，使得指向的数字增大一些。同理，如果两数之和大于target，则我们将右边那个指针j左移一位，使得指向的数字减小一些，代码如下：</p><h3 id="15代码"><a href="#15代码" class="headerlink" title="15代码"></a>15代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i-<span class="number">1</span>])) &#123;<span class="comment">//防止重复元素计入</span></span><br><span class="line">            <span class="keyword">int</span> lo = i+<span class="number">1</span>, hi = nums.length-<span class="number">1</span>, sum = <span class="number">0</span> - nums[i];</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[lo] + nums[hi] == sum) &#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[lo], nums[hi]));</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == nums[lo+<span class="number">1</span>]) lo++;</span><br><span class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == nums[hi-<span class="number">1</span>]) hi--;</span><br><span class="line">                    lo++; hi--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[lo] + nums[hi] &lt; sum) lo++;</span><br><span class="line">                <span class="keyword">else</span> hi--;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目16：最接近的三数之和"><a href="#题目16：最接近的三数之和" class="headerlink" title="题目16：最接近的三数之和"></a>题目16：最接近的三数之和</h2><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 2, 1, -4], and target = 1.</span><br><span class="line"></span><br><span class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure><h3 id="类似的思想"><a href="#类似的思想" class="headerlink" title="类似的思想"></a>类似的思想</h3><p>类似于3求和问题，使用3个指针指向当前元素、下一个元素和最后一个元素。如果总和小于目标值，这意味着我们必须添加一个更大的元素，这样<strong>下一个元素就会移到下一个</strong>。如果总和更大，这意味着我们必须添加一个更小的元素，所以<strong>最后一个元素移到第二个最后一个元素</strong>。一直坚持到最后。每次比较总和和目标之间的差异，如果到目前为止它小于最小差异，那么用它替换结果，否则继续迭代。</p><h3 id="16代码"><a href="#16代码" class="headerlink" title="16代码"></a>16代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = num[<span class="number">0</span>] + num[<span class="number">1</span>] + num[num.length - <span class="number">1</span>];</span><br><span class="line">    Arrays.sort(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> start = i + <span class="number">1</span>, end = num.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = num[i] + num[start] + num[end];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                end--;<span class="comment">//最后一个元素向前移动一位</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start++;<span class="comment">//下一个元素向后移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(sum - target) &lt; Math.abs(result - target)) &#123;</span><br><span class="line">                result = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>当涉及到给定乱序数组，要求在其中按照要求找到所需内容时，我们先想<strong>排序能不能简化问题，如果能，我们选用库自带函数sort()</strong>，这道题一开始我尝试用最暴力的解法，但是O(N^3)的时间复杂度实在是太高了，会TLE，那么我们能不能同时引导两个指针的移动呢，但是可以的，这样虽然只会线性增长，不会指数增长。</p><p>核心思想，一个数组，三个指针，一个从第一个开始可以称之为根（root），移动到最后（倒数第三个），另外两个，一个指向最大元素（end），另一个指向第一个指针的后面的元素（start）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="数组" scheme="http://www.allenmistake.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：114.展平一个二叉树</title>
    <link href="http://www.allenmistake.top/2019/03/20/leetcode114/"/>
    <id>http://www.allenmistake.top/2019/03/20/leetcode114/</id>
    <published>2019-03-20T12:48:30.000Z</published>
    <updated>2019-04-08T02:49:19.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：114-展平一个二叉树"><a href="#Leetcode日记：114-展平一个二叉树" class="headerlink" title="Leetcode日记：114.展平一个二叉树"></a>Leetcode日记：114.展平一个二叉树</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a binary tree, flatten it to a linked list in-place.</p><p>For example, given the following tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   5</span><br><span class="line"> / \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><p>The flattened tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题我刚拿到手里是一脸懵逼的，这怎么做啊。直到看见官方提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If you notice carefully in the flattened tree, each node&apos;s right child points to the next node of a pre-order traversal.</span><br><span class="line">如果仔细观察展开后的树，每个节点的右子节点指向一个先序遍历的下一个节点。</span><br></pre></td></tr></table></figure><p>这意味着，我们需要有先序遍历的思路</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="一般思路代码"><a href="#一般思路代码" class="headerlink" title="一般思路代码"></a>一般思路代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        flatten(root.left);</span><br><span class="line">        flatten(root.right);</span><br><span class="line">        TreeNode left  = root.left;</span><br><span class="line">        TreeNode right = root.right;</span><br><span class="line">        root.left  = <span class="keyword">null</span>;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">while</span>(root.right!=<span class="keyword">null</span>)</span><br><span class="line">            root = root.right;</span><br><span class="line">        root.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超简洁版代码"><a href="#超简洁版代码" class="headerlink" title="超简洁版代码"></a>超简洁版代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode prev = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        flatten(root.right);</span><br><span class="line">        flatten(root.left);</span><br><span class="line">        root.right = prev;</span><br><span class="line">        root.left = <span class="keyword">null</span>;</span><br><span class="line">        prev = root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="代码1解析"><a href="#代码1解析" class="headerlink" title="代码1解析"></a>代码1解析</h3><p>很明显的DFS思想，假设原来的树是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    1            1</span><br><span class="line">   / \          / \</span><br><span class="line">  2   5        2   5</span><br><span class="line"> / \   \        \   \</span><br><span class="line">3   4   6        3   6  </span><br><span class="line">                   \</span><br><span class="line">                    4</span><br></pre></td></tr></table></figure><p>然后，进入第一次<code>flatten(root.left);</code>，这时，首先创建两个新节点<code>left</code>和<code>right</code>，分别把当前左节点和右节点赋给他们，防止覆盖，然后直接令当前左节点为<code>null</code>，当前右节点换成左节点，随后顺着右面的岔路一直向右，在右路的尽头添加右节点。变成下面的样子：</p><p>其实我们看上去5和6直接是相连的，但是我们在程序上仍然对他们两个进行了排序，只不过排序之前和排序之后是一样的。所以接下来直接执行最后一条，这样我们可以看出来，我们已经把下面所有的树都已经排好序（展开），只差最上面一层了</p><p>所以代码1的思路是<strong>先利用DFS的思路找到最左子节点，然后回到其父节点，把其父节点和右子节点断开，将原左子结点连上父节点的右子节点上，然后再把原右子节点连到新右子节点的右子节点上，然后再回到上一父节点做相同操作。</strong></p><h3 id="更加优雅的代码2"><a href="#更加优雅的代码2" class="headerlink" title="更加优雅的代码2"></a>更加优雅的代码2</h3><p>有没有发现，代码2是从右面开始DFS的？这就是他优雅的所在，因为他遍历的是右面，导致省了一个循环。这个循环本是应该正向搜索时寻找右节点的放置位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root.right = prev;</span><br><span class="line">root.left = <span class="keyword">null</span>;</span><br><span class="line">prev = root;</span><br></pre></td></tr></table></figure><p>这几行代码保证了将最右的节点永远是他前面节点的右节点。</p><p>具体流程是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    1            1</span><br><span class="line">   / \          / \</span><br><span class="line">  2   5        2   5</span><br><span class="line"> / \   \        \   \</span><br><span class="line">3   4   6        3   6  </span><br><span class="line">                   \</span><br><span class="line">                    4</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题在没有前序遍历，后序遍历，中序遍历树的知识前遇见是挺难受的，一直不想面对树这个数据结构，有点阴影，但是没有办法，回溯到DFS都和树这个结构有着很大的联系，下面可能要学习一下遍历的知识了。等到学完，再更新补全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="DFS" scheme="http://www.allenmistake.top/tags/DFS/"/>
    
      <category term="树" scheme="http://www.allenmistake.top/tags/%E6%A0%91/"/>
    
      <category term="遍历" scheme="http://www.allenmistake.top/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：112&amp;113.路径之和与DFSvs回溯</title>
    <link href="http://www.allenmistake.top/2019/03/19/leetcode112-113/"/>
    <id>http://www.allenmistake.top/2019/03/19/leetcode112-113/</id>
    <published>2019-03-19T11:59:40.000Z</published>
    <updated>2019-03-23T05:52:34.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：112-amp-113-路径之和与DFSvs回溯"><a href="#Leetcode日记：112-amp-113-路径之和与DFSvs回溯" class="headerlink" title="Leetcode日记：112&amp;113.路径之和与DFSvs回溯"></a>Leetcode日记：112&amp;113.路径之和与DFSvs回溯</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/19/leetcode112-113/path.jpg" alt="路径走到头，深度搜索优。路径回头走，回溯其中由" title>                </div>                <div class="image-caption">路径走到头，深度搜索优。路径回头走，回溯其中由</div>            </figure><h2 id="112路径之和I"><a href="#112路径之和I" class="headerlink" title="112路径之和I"></a>112路径之和I</h2><h3 id="112问题"><a href="#112问题" class="headerlink" title="112问题"></a>112问题</h3><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p><p>Note: A leaf is a node with no children.</p><p>Example:</p><p>Given the below binary tree and <code>sum = 22</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      5</span><br><span class="line">     / \</span><br><span class="line">    4   8</span><br><span class="line">   /   / \</span><br><span class="line">  11  13  4</span><br><span class="line"> /  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure><p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p><h3 id="112问题分析"><a href="#112问题分析" class="headerlink" title="112问题分析"></a>112问题分析</h3><p>Leetcode上有很多关于树的问题，而关于树的问题很多需要DFS，这个我们下面会详细讲到，总之问题很明确，判断这个树有没有一条从头到尾的路径，这条路径上所有元素之和等于目标值。</p><h3 id="112代码"><a href="#112代码" class="headerlink" title="112代码"></a>112代码</h3><p>下面是我写的复杂版，还要多出一个全局变量，明显可改进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val==sum)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> hasPathSum(root.right, sum - oot.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> hasPathSum(root.left, sum - root.val);</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum - root.val)||hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是大神给出的简洁方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum - root.val == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="113路径之和II"><a href="#113路径之和II" class="headerlink" title="113路径之和II"></a>113路径之和II</h2><h3 id="113问题"><a href="#113问题" class="headerlink" title="113问题"></a>113问题</h3><p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p><p>Note: A leaf is a node with no children.</p><p>Example:</p><p>Given the below binary tree and sum = 22,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      5</span><br><span class="line">     / \</span><br><span class="line">    4   8</span><br><span class="line">   /   / \</span><br><span class="line">  11  13  4</span><br><span class="line"> /  \    / \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure><p>Return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="113问题分析"><a href="#113问题分析" class="headerlink" title="113问题分析"></a>113问题分析</h3><p>和112差不多，但是这次让我们找出所有符合要求的路径</p><h3 id="113代码"><a href="#113代码" class="headerlink" title="113代码"></a>113代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        List&lt;Integer&gt; sub = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        backtrack(result, sub, root, sum);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; sub, TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sub.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val == sum) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> LinkedList(sub));</span><br><span class="line">            &#125;</span><br><span class="line">            sub.remove(sub.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(result, sub, root.left, sum - root.val);</span><br><span class="line">        backtrack(result, sub, root.right, sum - root.val);</span><br><span class="line">        sub.remove(sub.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFSvs回溯"><a href="#DFSvs回溯" class="headerlink" title="DFSvs回溯"></a>DFSvs回溯</h2><h3 id="DFS还是回溯？"><a href="#DFS还是回溯？" class="headerlink" title="DFS还是回溯？"></a>DFS还是回溯？</h3><p>第一道题，仔细分析他的算法流程，就会发现，他和之前我们介绍过的回溯一样，先一路走到黑，走不动了，就返回上一个路口，走另一条路。<br>而有趣的是，第二道题的代码，看着熟不熟悉，对，他的代码形式像极了之前的回溯。</p><p>那么说了那么半天，什么是DFS？</p><p>DFS，Depth first search，即深度优先遍历（或者说深度优先搜索），当我们学习完回溯再回过头来卡看DFS时，发现他俩极其类似。</p><p>区别在于：<strong>DFS从不剪枝。</strong></p><p>具体地说，回溯可以看作一种更通用的DFS，在某些情况下，可以放弃一些路径的深度遍历；而对于DFS而言，对于它适用的数据结构<strong>树</strong>和<strong>图</strong>来讲，都是需要从头遍历到尾的，不能有一丝遗漏，这便是这二者之间的区别。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>之所以这两道题的标签是DFS， 是因为这道题说的是从头到尾的路径，既然是从头到尾，肯定不能有一丝遗漏。我们只需要在迭代中判断结点是否已经到低就可以，对于112，如果是则判断路径之和符不符合，如果没到底继续迭代；对于113，如果已经到底则判断路径之和符不符合，如果符合，将得到的数组添加到已有库中，如果不符合回退数组，如果没到底，则继续迭代。</p><h2 id="更多DFS算法"><a href="#更多DFS算法" class="headerlink" title="更多DFS算法"></a>更多DFS算法</h2><p>更多关于DFS算法的问题请转到<a href="https://allenmistake.github.io/tags/DFS/" target="_blank" rel="noopener">回溯算法标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="DFS" scheme="http://www.allenmistake.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：77.组合</title>
    <link href="http://www.allenmistake.top/2019/03/17/leetcodedaily77/"/>
    <id>http://www.allenmistake.top/2019/03/17/leetcodedaily77/</id>
    <published>2019-03-17T12:11:35.000Z</published>
    <updated>2019-03-17T12:03:10.071Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：77-组合，回溯问题的优化"><a href="#Leetcode日记：77-组合，回溯问题的优化" class="headerlink" title="Leetcode日记：77.组合，回溯问题的优化"></a>Leetcode日记：77.组合，回溯问题的优化</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>给定一个数字n，给定一个数量k，求1-n中k个数的组合。<br>标准的回溯问题，下面直接看代码，这道题是让我们看看如何优化回溯问题的代码。</p><h2 id="个人答案"><a href="#个人答案" class="headerlink" title="个人答案"></a>个人答案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), n, k, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> n,<span class="keyword">int</span> k, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tempList.size()==k)&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;=n ;i++)&#123;</span><br><span class="line">            tempList.add(i);</span><br><span class="line">            backtrack(list, tempList, n,k, i + <span class="number">1</span>);</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路和之前的回溯都是一样的，效果是运行时间42ms，算是相当慢的了，那么如何进行优化呢，下面来看一下大神给的方法。</p><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    backtrack(list,n,k,<span class="number">1</span>,<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, List&lt;Integer&gt; tempList)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> LinkedList&lt;&gt;(tempList));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;=n-k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        tempList.add(i);</span><br><span class="line">        backtrack(list,n,k-<span class="number">1</span>,i+<span class="number">1</span>,tempList);</span><br><span class="line">        tempList.remove(tempList.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>社区大神给出的解决方法与我的很类似，毕竟都是经典回溯代码，差不太多，那么，优化后的方法耗时多长时间呢？</p><p>答案是2ms</p><p>足以见得优化的重要性，当我们编写leetcode时候，不仅要关注算法的准确，对于算法的复杂度、内存的分析优化往往更能提高我们的编程技巧，对以后的发展会很有帮助。</p><p>废话不多说，我们来看一下42ms和2ms在思路代码上的区别：</p><h2 id="优化分析"><a href="#优化分析" class="headerlink" title="优化分析"></a>优化分析</h2><p>主要区别在于进行迭代的时候，每次递归我的方法传入的是k个数，其实我们知道，当进行一次递归后，我们只需要添加k-1个数就好，因为在这之前必定有一个数已经被添加，而我并没有考虑到这一优化情况。我的循环会在数组tempList已满后继续进行迭代，但是这些情况下的迭代都会检测到已满之后立即返回，耗费大量时间。</p><p>优化关键代码：</p><ol><li>循环中的<code>i&lt;=n-k+1</code>判断条件</li><li>迭代中随着迭代层数不断变换带入的<code>k-1</code></li></ol><p>归纳起来，便是一点：<br><strong>当进行递归深入时，确定好进行迭代的量，判断好哪些变量需要根据递归深度增加而变化，避免循环固定化、冗余化。</strong></p><h2 id="更多回溯算法"><a href="#更多回溯算法" class="headerlink" title="更多回溯算法"></a>更多回溯算法</h2><p>更多关于回溯算法的问题请转到<a href="https://allenmistake.github.io/tags/%E5%9B%9E%E6%BA%AF/" target="_blank" rel="noopener">回溯算法标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：51&amp;52.N皇后问题</title>
    <link href="http://www.allenmistake.top/2019/03/16/leetcode51-52/"/>
    <id>http://www.allenmistake.top/2019/03/16/leetcode51-52/</id>
    <published>2019-03-16T02:31:17.000Z</published>
    <updated>2019-03-16T02:42:19.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：51-amp-52-N皇后问题"><a href="#Leetcode日记：51-amp-52-N皇后问题" class="headerlink" title="Leetcode日记：51&amp;52.N皇后问题"></a>Leetcode日记：51&amp;52.N皇后问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/16/leetcode51-52/8-queens.png" alt="八皇后问题的一个解法" title>                </div>                <div class="image-caption">八皇后问题的一个解法</div>            </figure><br>Given an integer n, return all distinct solutions to the n-queens puzzle.</p><p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [</span><br><span class="line"> [&quot;.Q..&quot;,  // Solution 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  // Solution 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这就是这次回溯问题的最终难题————经典的八皇后问题，题目主要的要求就是在摆N个皇后之后，皇后之间不能相互碰到。<br>这也要求我们利用回溯思想解决问题，当然不用回溯也是可以的，但是回溯的精妙之处在于其简洁，明了。让我们看看代码是如何实现的吧。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="comment">//2*n-1个斜对角线</span></span><br><span class="line">        <span class="keyword">boolean</span>[] dia1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>*n-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[] dia2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>*n-<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        fun(n, <span class="keyword">new</span> ArrayList&lt;String&gt;(),visited,dia1,dia2,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n,List&lt;String&gt; list,<span class="keyword">boolean</span>[] visited,<span class="keyword">boolean</span>[] dia1,<span class="keyword">boolean</span>[] dia2,<span class="keyword">int</span> rowIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rowIndex == n)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="comment">//这一行、正对角线、反对角线都不能再放了，如果发现是true，停止本次循环</span></span><br><span class="line">            <span class="keyword">if</span>(visited[i] || dia1[rowIndex+i] || dia2[rowIndex-i+n-<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//init一个长度为n的一维数组，里面初始化为'.'</span></span><br><span class="line">            <span class="keyword">char</span>[] charArray = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">            Arrays.fill(charArray,<span class="string">'.'</span>);</span><br><span class="line">            </span><br><span class="line">            charArray[i] = <span class="string">'Q'</span>;</span><br><span class="line">            String stringArray = <span class="keyword">new</span> String(charArray);</span><br><span class="line">            list.add(stringArray);</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            dia1[rowIndex+i] = <span class="keyword">true</span>;</span><br><span class="line">            dia2[rowIndex-i+n-<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            fun(n,list,visited,dia1,dia2,rowIndex+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//reset 不影响回溯的下个目标</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            charArray[i] = <span class="string">'.'</span>;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            dia1[rowIndex+i] = <span class="keyword">false</span>;</span><br><span class="line">            dia2[rowIndex-i+n-<span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="回溯思想"><a href="#回溯思想" class="headerlink" title="回溯思想"></a>回溯思想</h3><p>这道题的回溯思想和之前我们两道题基本一致，并没有过于难的地方：</p><p><strong>结构：</strong>：</p><ul><li>递归（迭代）：这道题本身就是DFS问题，首先从第一行第一个开始，试着放一个皇后，接下来把相关信息放入，继续迭代(层数加一，<code>rowIndex+1</code>)，当发现满足条件时存入数组并返回。</li><li>条件：当放入的皇后数量等于目标数便可存入，当无解后会自动结束。在每一次布局时，共同维护着三个Boolean数组，来判断是否皇后会打架。（详细见下文）</li><li>结束：当一次迭代执行完毕之后，不管这个方法成功与否，都把当前得到的排布的最后一行删掉<code>list.remove(list.size()-1)</code>，并初始化这一行，并且还原Boolean数组，重新安排这一行的下一种布局（回溯）。</li></ul><h3 id="关于打架的判断"><a href="#关于打架的判断" class="headerlink" title="关于打架的判断"></a>关于打架的判断</h3><p>上文提到，每一次布局都会有与之对应的三个Boolean数组，这个数组便是检测在这一列、副对角线，主对角线上的皇后是否产生打架，这个规则不容易想，首先，我们以数组的形式来模拟棋盘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0,0][0,1][0,2][0,3][0,4]</span><br><span class="line">[1,0][1,1][1,2][1,3][1,4]</span><br><span class="line">[2,0][2,1][2,2][2,3][2,4]</span><br><span class="line">[3,0][3,1][3,2][3,3][3,4]</span><br><span class="line">[4,0][4,1][4,2][4,3][4,4]</span><br></pre></td></tr></table></figure><p>我们来找一下：<br><code>visited[i]</code> 是与之对应的列，这个很显然。<br><code>dia1[rowIndex+i]</code>说的是副对角线，可以观察到副对角线上，行（<code>rowIndex</code>）与列（<code>i</code>）之<strong>和</strong>是一样的。<br><code>dia2[rowIndex-i+n-1]</code>说的是副对角线，仔细观察发现主对角线上，行（<code>rowIndex</code>）与列（<code>i</code>）之<strong>差</strong>是一样的，但是为了避免出现<strong>数组索引为负数</strong>的情况，代码特意在后面<code>+n-1</code>。</p><h3 id="关于回溯时的状态重置"><a href="#关于回溯时的状态重置" class="headerlink" title="关于回溯时的状态重置"></a>关于回溯时的状态重置</h3><p>回溯状态重置这个问题已经是老生常谈了，但是仍然要引起重视，这是很容易遗漏的一点。</p><p>首先，回溯之前，要把之前迭代的不符合要求或者已经存入的上一层内容清空重置（谨记只是上一层内容），反映到此题上就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">charArray[i] = <span class="string">'.'</span>;</span><br></pre></td></tr></table></figure><p>相比之前几道题已经讲过很多次了。</p><p>还有就是要把判断状态表重置，反映在此题就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visited[i] = <span class="keyword">false</span>;</span><br><span class="line">dia1[rowIndex+i] = <span class="keyword">false</span>;</span><br><span class="line">dia2[rowIndex-i+n-<span class="number">1</span>] = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h2 id="52题简要说明"><a href="#52题简要说明" class="headerlink" title="52题简要说明"></a>52题简要说明</h2><p>这道题比第一个简单很多，只要求输出有多少种摆法。只需要在原看来代码的基础上删去不必要的<code>List&lt;List&lt;String&gt;&gt; result</code>，然后添加一个int型变量，得到满足条件的结果就+1就可以了。</p><h2 id="更多回溯算法"><a href="#更多回溯算法" class="headerlink" title="更多回溯算法"></a>更多回溯算法</h2><p>更多关于回溯算法的问题请转到<a href="https://allenmistake.github.io/tags/%E5%9B%9E%E6%BA%AF/" target="_blank" rel="noopener">回溯算法标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="hard" scheme="http://www.allenmistake.top/categories/Leetcode/hard/"/>
    
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结并发进阶之volatile与Java内核</title>
    <link href="http://www.allenmistake.top/2019/03/15/javadailyplus3/"/>
    <id>http://www.allenmistake.top/2019/03/15/javadailyplus3/</id>
    <published>2019-03-15T14:04:41.000Z</published>
    <updated>2019-07-15T13:43:23.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="volatile关键词-2019-7-15更新"><a href="#volatile关键词-2019-7-15更新" class="headerlink" title="volatile关键词(2019-7-15更新)"></a>volatile关键词(2019-7-15更新)</h2><h3 id="内存模型JMM"><a href="#内存模型JMM" class="headerlink" title="内存模型JMM"></a>内存模型JMM</h3><p>Java内存模型(JMM)规定了所有的变量都存储在<strong>主内存</strong>中。每条线程中还有自己的<strong>工作内存</strong>，每个线程创建时 JVM 都会为其创建一个工作内存（有些地方称之为栈空间）。线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回到主内存。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p><p>JMM关于同步的规定：</p><ol><li>线程解锁前，必须把共享变量的值刷回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ol><p>在多线程中，执行下面这个语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>顺序是执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p><p>这便造成在多个线程执行这句话的时候，一个线程执行之后，还未把结果写入主内存，而其他线程就已经从内存中读取，从而产生“脏读”。</p><p>如何解决这个问题，我们就要谈到并发编程的三大概念：原子性，有序性，可见性。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><ol><li><p>定义<br> 即一个操作或者多个操作，要么全部执行，并且执行的过程不会被任何因素打断，要么就都不执行。</p></li><li><p>Java中的原子性</p><p> 在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作。下面举个例子深入理解：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>; <span class="comment">//语句1</span></span><br><span class="line">y = x; <span class="comment">//语句2</span></span><br><span class="line">x++; <span class="comment">//语句3</span></span><br><span class="line">x = x + <span class="number">1</span>; <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p> 这四句只有语句1具有原子性。<br> 语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。<br> 语句 2 实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及将x的值写入工作内存，这2个操作都是原子性操作，但是合起来就不是原子性操作了。<br> 同样的，x++ 和 x = x+1 包括3个操作：读取 x 的值，进行加1操作，写入新的值。</p></li></ol><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><ol><li><p>定义<br> 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></li><li><p>Java中的可见性<br> 对于可见性，Java 提供了 volatile 关键字来保证可见性。当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p></li></ol><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><ol><li><p>指令重排序<br> 一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。<br> 重排序对单线程没有任何影响，但是对于多线程来说，会影响执行的正确性。</p></li><li><p>Java中有序性<br> 可以通过 volatile 关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p> 另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，<strong>虚拟机</strong>可以随意地对它们进行重排序。</p><p> ①程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作<br> ②锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作<br> ③volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作<br> ④传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C<br> 注意，这里的第一条只是保证了单线程的正确性，多线程并不能保证。</p><p> 第三条规则是一条比较重要的规则。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p></li></ol><h3 id="深入理解volatile"><a href="#深入理解volatile" class="headerlink" title="深入理解volatile"></a>深入理解volatile</h3><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么<br>就具备了两层语义：</p><ol><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量<br>的值，这新值对其他线程来说是立即可见的。</li><li>禁止进行指令重排序。</li></ol><p><strong>但是volatile不能保证原子性</strong><br>因为volatile只是让变量每次读取到的都是最新的值，但是至于赋值，写入内存、后面的操作仍不能保证是原子性，解决的办法还是synchronized或者lock。</p><p><strong>volatile保证有序性</strong><br>volatile关键字禁止指令重排序有两层意思：</p><ol><li>当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</li><li>在进行指令优化时，不能将在对volatile变量的读操作或者写操作的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</li></ol><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>如果对声明了volatile变量进行写操作时，JVM会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写会到系统内存。这一步确保了如果有其他线程对声明了volatile变量进行修改，则立即更新主内存中数据。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行<br>效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><ol><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式中</li></ol><h2 id="梳理总结"><a href="#梳理总结" class="headerlink" title="梳理总结"></a>梳理总结</h2><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>更多关于Java并发多线程请点击<a href="https://allenmistake.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">Java进阶学习多线程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://www.allenmistake.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：78&amp;90.子集</title>
    <link href="http://www.allenmistake.top/2019/03/13/leetcode78-90/"/>
    <id>http://www.allenmistake.top/2019/03/13/leetcode78-90/</id>
    <published>2019-03-13T11:02:43.000Z</published>
    <updated>2019-03-13T12:17:20.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：78-amp-90-子集"><a href="#Leetcode日记：78-amp-90-子集" class="headerlink" title="Leetcode日记：78&amp;90.子集"></a>Leetcode日记：78&amp;90.子集</h1><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78.子集"></a>78.子集</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>Given a set of <strong>distinct</strong> integers, nums, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        tempList.add(nums[i]);</span><br><span class="line">        backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">        tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="90-有重复子集"><a href="#90-有重复子集" class="headerlink" title="90.有重复子集"></a>90.有重复子集</h2><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>Given a collection of integers that might contain <strong>duplicates nums</strong>, return all possible subsets (the power set).</p><p>Note: The solution set must not contain duplicate subsets.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; start &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line">        tempList.add(nums[i]);</span><br><span class="line">        backtrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">        tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="树状图"><a href="#树状图" class="headerlink" title="树状图"></a>树状图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/13/leetcode78-90/树形图.png" alt="算法流程树状图" title>                </div>                <div class="image-caption">算法流程树状图</div>            </figure><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><ol><li>思路<br> 这道题也是一个很明显的穷举类型的题目，搜索空间可以用树表示，而且可以采用递归，所以我们决定采用回溯算法。</li><li>结构<ul><li>条件：数组从第一个元素读到最后一个元素</li><li>迭代：一个元素放好之后递归继续进行迭代，过程如树状图所示</li><li>结束：当读到最后一个元素，说明之前所有子集已收集完毕。</li></ul></li><li>关于重复元素，判断语句多了一个<code>start &amp;&amp; nums[i] == nums[i-1]</code>因为是子集问题，不用像考虑排列组合那样，这道题直接将重复元素略过就可以了。</li></ol><h2 id="更多回溯算法"><a href="#更多回溯算法" class="headerlink" title="更多回溯算法"></a>更多回溯算法</h2><p>更多关于回溯算法的问题请转到<a href="https://allenmistake.github.io/tags/%E5%9B%9E%E6%BA%AF/" target="_blank" rel="noopener">回溯算法标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：46&amp;47.排列组合与回溯（backtrack）</title>
    <link href="http://www.allenmistake.top/2019/03/12/leetcode46-47/"/>
    <id>http://www.allenmistake.top/2019/03/12/leetcode46-47/</id>
    <published>2019-03-12T08:38:45.000Z</published>
    <updated>2019-04-09T07:13:55.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/12/leetcode46-47/maze.jpg" alt="回溯与迷宫" title>                </div>                <div class="image-caption">回溯与迷宫</div>            </figure><h2 id="46排列组合1"><a href="#46排列组合1" class="headerlink" title="46排列组合1"></a>46排列组合1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of distinct integers, return all possible permutations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题目的很明确，就是要求出数组所有排列组合情况，重点是不重复的数字，也就是说我们并不用考虑重复排列的情况</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="comment">// Arrays.sort(nums); // not necessary</span></span><br><span class="line">   backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums);</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(tempList.size() == nums.length)&#123;</span><br><span class="line">      list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">   &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(tempList.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// element already exists, skip</span></span><br><span class="line">         tempList.add(nums[i]);</span><br><span class="line">         backtrack(list, tempList, nums);</span><br><span class="line">         tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47排列组合2"><a href="#47排列组合2" class="headerlink" title="47排列组合2"></a>47排列组合2</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given a collection of numbers that <strong>might contain duplicates</strong>, return all possible unique permutations.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length]);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span> [] nums, <span class="keyword">boolean</span> [] used)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tempList.size() == nums.length)&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i] || i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list, tempList, nums, used);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>用回溯算法解决问题的一般步骤：</p><ol><li>针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</li><li>确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。</li><li>以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</li></ol><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。比如走迷宫问题，就是这条路走不通，然后返回前一个路口，继续下一条路。回溯算法说白了就是穷举法。不过回溯算法使用剪枝函数，剪去一些不可能到达 最终状态（即答案状态）的节点，从而减少状态空间树节点的生成。</p><h3 id="回溯与动态规划"><a href="#回溯与动态规划" class="headerlink" title="回溯与动态规划"></a>回溯与动态规划</h3><p>这道题让我想起之前的爬楼问题，都是一个问题由一个或者几个子问题构成，不断划分<br>他们之间的区别在于：动态规划往往是寻找<strong>一个</strong>最优解，而回溯问题则是<strong>穷举</strong>，深度遍历所有情况，当然也存在不符合要求的情况，但是仍然要遍历到相应的节点上。</p><h3 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h3><ul><li>穷举问题，例如在某个范围内求所有可能情况</li><li>搜索空间均可以表示成树的样子</li></ul><h2 id="用回溯思想解决问题"><a href="#用回溯思想解决问题" class="headerlink" title="用回溯思想解决问题"></a>用回溯思想解决问题</h2><h3 id="回到问题"><a href="#回到问题" class="headerlink" title="回到问题"></a>回到问题</h3><h4 id="排列组合1"><a href="#排列组合1" class="headerlink" title="排列组合1"></a>排列组合1</h4><p>首先，我们来看，这是一种不需要剪枝的问题，得到的所有解一定唯一，那我们看一看程序是怎么实现回溯的：</p><p>图示:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/12/leetcode46-47/回溯算法.png" alt="回溯算法" title>                </div>                <div class="image-caption">回溯算法</div>            </figure></p><ol><li>首先明确回溯是一个递归性质的问题，这道题模型是传一个待排列数组和原数组。</li><li>从0位置依次加入待排列数组，由于每次递归都要从0位置开始判断，所以传入之后要先判断这个数组是否已经出现过这个位置上的数，如果不曾出现，把这个数加入到数组中，再次递归。</li><li>直到依照这个方法将数组填满(<code>tempList.size() == nums.length</code>)，把这样计算出来的数组加入到结果中。这样其中的一个分枝就完成了。</li><li>完成之后自然进行回溯(跳出该层递归)，寻找下个排列组合。</li></ol><h4 id="排列组合2"><a href="#排列组合2" class="headerlink" title="排列组合2"></a>排列组合2</h4><p>这个问题和上面区别不是很大，首先关键点是先用<code>sort</code>函数将数组排序，使重复的元素都放在一起，下面主要说一下剪枝判断的设计<br>首先，用<code>used[i]</code>布尔型数组来判断是否该元素是否已经被排列组合过。<br>判断语句<code>if(used[i] || i &gt; 0 &amp;&amp; nums[i] == nums[i-1] &amp;&amp; !used[i - 1])</code></p><ol><li>前一个<code>used[i]</code>相当与问题1中的判断，即当前待排列数组中是否包含了其本身（这种情况并不是重复，而是其本身）；</li><li>后面<code>i &gt; 0 &amp;&amp; nums[i] == nums[i-1] &amp;&amp; !used[i - 1])</code>其实想表明的意思是该元素与前面的元素重复，并且等于这个值的元素已被排列好；</li></ol><p>这两种情况便可跳过排列组合，也就是剪枝</p><h4 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tempList.remove(tempList.size() - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>注意这个语句，由于我们待排列数组只有一个，我们不断更新，加入的标志是已满，如果得到第一种满足条件的情况直接返回，那么这个排列数组一直保持满的状态，不在会被更新，所以回溯的时候要注意，把带排列数组元素-1，才能有新排列组合情况进来。<br>其他问题也同样，<strong>如果维持的是同一个数据结构，注意回溯的时候回退数据结构中的内容。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>讲了那么多，我们需要注意回溯的几个关键要素</p><ol><li>迭代<br> 回溯问题体现在程序设计上大多数是递归，而每一层递归又会有一个循环来遍历这层递归的所有情况</li><li>条件<br> 对于每个特定的解的某一步，他必然要符合某个解要求符合的条件，如果不符合条件，就要回溯，其实回溯也就是递归调用的返回。</li><li>结束<br> 当到达一个特定结束条件时候，就认为这个一步步构建的解是符合要求的解了。把解存下来或者打印出来。对于这一步来说，有时候也可以另外写一个issolution函数来进行判断。注意，当到达第三步后，有时候还需要构建一个数据结构，把符合要求的解存起来，便于当得到所有解后，把解空间输出来。这个数据结构必须是全局的，作为参数之一传递给递归函数。而且要注意：<strong>如果维持的是同一个数据结构，注意回溯的时候回退数据结构中的内容。</strong></li></ol><p>后面几天我会多找一些关于回溯算法的题来品尝。</p><h2 id="更多关于回溯的问题"><a href="#更多关于回溯的问题" class="headerlink" title="更多关于回溯的问题"></a>更多关于回溯的问题</h2><p>更多关于回溯算法的问题请转到<a href="https://allenmistake.github.io/tags/%E5%9B%9E%E6%BA%AF/" target="_blank" rel="noopener">回溯算法标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结并发进阶之线程池</title>
    <link href="http://www.allenmistake.top/2019/03/12/javadailyplus2/"/>
    <id>http://www.allenmistake.top/2019/03/12/javadailyplus2/</id>
    <published>2019-03-12T08:29:44.000Z</published>
    <updated>2019-07-13T03:43:31.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>例如在Android中，由于主线程的诸多限制，像网络请求等一些耗时的操作我们必须在子线程中运行。我们往往会通过new Thread来开启一个子线程，待子线程操作完成以后通过Handler切换到主线程中运行。这么以来我们无法管理我们所创建的子线程，并且无限制的创建子线程，它们相互之间竞争，很有可能由于占用过多资源而导致死机或者OOM。所以在Java中为我们提供了线程池来管理我们所创建的线程。</p><h3 id="线程池的优势"><a href="#线程池的优势" class="headerlink" title="线程池的优势"></a>线程池的优势</h3><ol><li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li><li>提高系统响应速度，当有任务到达时，无需等待新线程的创建便能立即执行；</li><li>方便线程并发数的管控，线程若是无限制的创建，不仅会额外消耗大量系统资源，更是占用过多资源而阻塞系统或oom等状况，从而降低系统的稳定性。线程池<br>能有效管控线程，统一分配、调优，提供资源使用率；</li><li>更强大的功能，线程池提供了定时、定期以及可控线程数等功能的线程池，使用方便简单。</li></ol><h3 id="线程池创建"><a href="#线程池创建" class="headerlink" title="线程池创建"></a>线程池创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService service = <span class="keyword">new</span> ThreadPoolExecutor(....);</span><br></pre></td></tr></table></figure><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">    TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure><p>ThreadPoolExecutor参数含义</p><ol><li>corePoolSize<br>线程池中的核心线程数，默认情况下，<strong>核心线程一直存活在线程池中</strong>，即便他们在线程池中处于闲置状态。除非我们将ThreadPoolExecutor的allowCoreThreadTimeOut属性设为true的时候，这时候处于闲置的核心线程在等待新任务到来时会有超时策略，这个超时时间由keepAliveTime来指定。一旦超过所设置的超时时间，闲置的核心线程就会被终止。</li><li>maximumPoolSize<br>线程池中所容纳的最大线程数，如果活动的线程达到这个数值以后，后续的新任务将会被阻塞。包含核心线程数+非核心线程数。</li><li>keepAliveTime<br>非核心线程闲置时的超时时长，<strong>对于非核心线程，闲置时间超过这个时间，非核心线程就会被回收</strong>。只有对ThreadPoolExecutor的allowCoreThreadTimeOut属性设为true的时候，这个超时时间才会对核心线程产生效果。</li><li>unit<br>用于指定keepAliveTime参数的<strong>时间单位</strong>。他是一个枚举，可以使用的单位有天（TimeUnit.DAYS），小时（TimeUnit.HOURS），分钟（TimeUnit.MINUTES），毫秒(TimeUnit.MILLISECONDS)，微秒(TimeUnit.MICROSECONDS, 千分之一毫秒)和毫微秒(TimeUnit.NANOSECONDS, 千分之一微秒);</li><li>workQueue<br> 线程池中保存等待执行的任务的阻塞队列。通过线程池中的execute方法提交的<br> Runable对象都会存储在该队列中。我们可以选择下面几个阻塞队列。</li></ol><table><thead><tr><th>阻塞队列</th><th>说明</th></tr></thead><tbody><tr><td>ArrayBlockingQueue</td><td>基于数组实现的有界的阻塞队列,该队列按照FIFO（先进先出）原则对队列中的元素进行排序。</td></tr><tr><td>LinkedBlockingQueue</td><td>基于链表实现的阻塞队列，该队列按照FIFO（先进先出）原则对队列中的元素进行排序。</td></tr><tr><td>SynchronousQueue</td><td>内部没有任何容量的阻塞队列。在它内部没有任何的缓存空间。对于SynchronousQueue中的数据元素只有当我们试着取走的时候才可能存在。</td></tr><tr><td>PriorityBlockingQueue</td><td>具有优先级的无限阻塞队列。</td></tr></tbody></table><ol><li><p>threadFactory<br>线程工厂，<strong>为线程池提供新线程的创建</strong>。ThreadFactory是一个接口，里面只有一个newThread方法。默认为DefaultThreadFactory类。</p></li><li><p>handler<br>是RejectedExecutionHandler对象，RejectedExecutionHandler面只有一个rejectedExecution方法。当任务队列已满并且线达到所限定的最大值或者是无法成功执行任务，这时候ThreadPoolExecutor用RejectedExecutionHandler中的rejectedExecution方法ThreadPoolExecutor中有四个内部类实现了RejectedExecutionHandler程池中它默认是AbortPolicy，在无法处理新任务时抛出RejectedExecutionException异常。下面是在ThreadPoolExecutor中提供的四个可选值。</p></li></ol><table><thead><tr><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>CallerRunsPolicy</td><td>只用调用者所在线程来运行任务。</td></tr><tr><td>AbortPolicy</td><td>直接抛出RejectedExecutionException异常。</td></tr><tr><td>DiscardPolicy</td><td>丢弃掉该任务，不进行处理。</td></tr><tr><td>DiscardOldestPolicy</td><td>丢弃队列里最近的一个任务，并执行当前任务。</td></tr></tbody></table><p>ThreadPoolExecutor的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService service = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;());</span><br></pre></td></tr></table></figure><p>对于ThreadPoolExecutor有多个构造方法，对于上面的构造方法中的其他参数都采用默认值。可以通过execute和submit两种方式来向线程池提交一个任务。execute 当我们使用execute来提交任务时，由于execute方法没有返回值，所以说我们也就无法判定任务是否被线程池执行成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"execute方式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="线程池执行流程"><a href="#线程池执行流程" class="headerlink" title="线程池执行流程"></a>线程池执行流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/12/javadailyplus2/线程池流程.bmp" alt="线程池流程" title>                </div>                <div class="image-caption">线程池流程</div>            </figure><ol><li>如果在线程池中的线程数量没有达到核心的线程数量，这时候就回启动一个核心线程来执行任务。</li><li>如果线程池中的线程数量已经超过核心线程数，这时候任务就会被插入到任务队列中排队等待执行。</li><li>由于任务队列已满，无法将任务插入到任务队列中。这个时候如果线程池中的线程数量没有达到线程池所设定的最大值，那么这时候就会立即启动一个非核心线程来执行任务。</li><li>如果线程池中的数量达到了所规定的最大值，那么就会拒绝执行此任务，这时候就会调用RejectedExecutionHandler中的rejectedExecution方法来通知调用者。</li></ol><h3 id="四种线程池"><a href="#四种线程池" class="headerlink" title="四种线程池"></a>四种线程池</h3><ol><li><p>newFixedThreadPool</p><p> 通过Executors中的newFixedThreadPool方法来创建，该线程池是一种<strong>线程数量固定</strong>的线程池。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p> 在这个线程池中所容纳最大的线程数就是我们设置的核心线程数。如果线程池的线程处于空闲状态的话，它们并不会被回收，除非是这个线程池被关闭。<br> 由于newFixedThreadPool只有核心线程，并且这些线程都不会被回收，也就是它能够更快速的响应外界请求。<br> 从下面的newFixedThreadPool方法的实现可以看出，newFixedThreadPool只有核心线程，并且不存在超时机制，采用LinkedBlockingQueue，所以对于任务队列的大小也是没有限制的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>newCachedThreadPool</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">    <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过s上面的newCachedThreadPool方法在这里我们可以看出它的核心线程数为0，线程池的最大线程数Integer.MAX_VALUE。而Integer.MAX_VALUE是一个很大的数，也差不多可以说这个线程池中的最大线程数可以任意大。当线程池中的线程都处于活动状态的时候，线程池就会创建一个新的线程来处理任务。该线程池中的线程超时时长为60秒，所以当线程处于闲置状态超过60秒的时候便会被回收。这也就意味着若是整个线程池的线程都处于闲置状态超过60秒以后，在newCachedThreadPool线程池中是不存在任何线程的，所以这时候它几乎不占用任何的系统资源。</p><p> 对于newCachedThreadPool他的任务队列采用的是SynchronousQueue，上面说到在SynchronousQueue内部没有任何容量的阻塞队列。SynchronousQueue内部相当于一个空集合，我们无法将一个任务插入到SynchronousQueue中。所以说在线程池中如果现有线程无法接收任务,将会创建新的线程来执行任务。</p></li><li><p>newScheduledThreadPool</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">    <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 它的核心线程数是固定的，对于非核心线程几乎可以说是没有限制的，并且当非核心线程处于限制状态的时候就会立即被回收。</p><p> ScheduledExecutorService功能强大，对于定时执行的任务，建议多采用该方法。</p></li><li>newSingleThreadExecutor<br>通过Executors中的newSingleThreadExecutor方法来创建，在这个线程池中只有一个核心线程，对于任务队列没有大小限制，也就意味着这一个任务处于活动状态时，其他任务都会在任务队列中排队等候依次执行。<br>newSingleThreadExecutor将所有的外界任务统一到一个线程中支持，所以在这个任务执行之间我们不需要处理线程同步的问题。</li></ol><h3 id="线程池的使用技巧"><a href="#线程池的使用技巧" class="headerlink" title="线程池的使用技巧"></a>线程池的使用技巧</h3><p>需要针对具体情况而具体处理，不同的任务类别应采用不同规模的线程池，任务类别可划分为CPU密集型任务、IO密集型任务和混合型任务。(N代表CPU个数)<br>|任务类别|说明|<br>|—|:—|<br>|CPU密集型任务|线程池中线程个数应尽量少，如配置N+1个线程的线程池。|<br>|IO密集型任务|由于IO操作速度远低于CPU速度，那么在运行这类任务时，CPU绝大多数时间处于空闲状态，那么线程池可以配置尽量多些的线程，以提高CPU利用率，如2*N。|<br>|混合型任务|可以拆分为CPU密集型任务和IO密集型任务，当这两类任务执行时间相差无几时，通过拆分再执行的吞吐率高于串行执行的吞吐率，但若这两类任务执行时间有数据级的差距，那么没有拆分的意义。|</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>更多关于Java并发多线程请点击<a href="https://allenmistake.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">Java进阶学习多线程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://www.allenmistake.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结并发进阶之线程初步、锁与同步篇</title>
    <link href="http://www.allenmistake.top/2019/03/09/javadailyplus1/"/>
    <id>http://www.allenmistake.top/2019/03/09/javadailyplus1/</id>
    <published>2019-03-09T12:53:19.000Z</published>
    <updated>2019-07-17T09:05:21.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/09/javadailyplus1/线程状态.png" alt="线程状态图" title>                </div>                <div class="image-caption">线程状态图</div>            </figure><h3 id="新创建"><a href="#新创建" class="headerlink" title="新创建"></a>新创建</h3><p>刚new出来的Thread还没有被运行，<a href="https://allenmistake.github.io/2019/03/09/javadailyplus1/#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">创建线程的三种方式</a></p><h3 id="可运行"><a href="#可运行" class="headerlink" title="可运行"></a>可运行</h3><p>一旦调用start 方法，线程处于runnable状态。一个可运行的线桿可能正在运行也可能没有运行， 这取决于操作系统给线程提供运行的时间。</p><h3 id="被阻塞线程和等待线程"><a href="#被阻塞线程和等待线程" class="headerlink" title="被阻塞线程和等待线程"></a>被阻塞线程和等待线程</h3><p>当线程处于被阻塞或等待状态时， 它暂时不活动。它不运行任何代码且消耗最少的资源。直到线程调度器重新激活它。细节取决于它是怎样达到非活动状态的</p><ul><li>当一个线程试图获取一个内部的对象锁（而不是javiutiUoncurrent 库中的锁)，而该锁被其他线程持有， 则该线程进人<strong>阻塞状态</strong>。当所有其他线程释放该锁，并且线程调度器允许本线程持有它的时候，该线程将变成非阻塞状态。</li><li>当线程等待另一个线程通知调度器一个条件时，它自己进入<strong>等待状态</strong>。在调用Object.wait方法或Thread.join方法，或者是等待java,util.concurrent 库中的Lock 或Condition 时，就会出现这种情况。实际上，被阻塞状态与等待状态是有很大不同的。</li><li>有几个方法有一个超时参数。调用它们导致线程进人<strong>计时等待</strong>(timed waiting) 状态。这一状态将一直保持到超时期满或者接收到适当的通知。带有超时参数的方法有Thread.sleep 和Object.wait、Thread.join、Lock,tryLock以及Condition.await的计时版。</li></ul><h3 id="被终止的线程"><a href="#被终止的线程" class="headerlink" title="被终止的线程"></a>被终止的线程</h3><p>线程因如下两个原因之一而被终止：</p><ul><li>因为run方法正常退出而自然死亡。</li><li>因为一个没有捕获的异常终止了run方法而意外死亡。</li></ul><h3 id="同一个线程被-start-两次-2019-7-13更新"><a href="#同一个线程被-start-两次-2019-7-13更新" class="headerlink" title="同一个线程被 start() 两次(2019-7-13更新)"></a>同一个线程被 start() 两次(2019-7-13更新)</h3><p>Java 的线程是不允许启动两次的，第二次调用必然会抛出 IllegalThreadStateException，这是<br>一种运行时异常，多次调用 start 被认为是编程错误。在第二次调用 start() 方法的时候，线程可能处于终止或者其他（非 NEW）状态，但是不论如何，都是不可以再次启动的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/09/javadailyplus1/线程状态之间相互转化.jpg" alt="线程状态之间相互转化" title>                </div>                <div class="image-caption">线程状态之间相互转化</div>            </figure><h2 id="创建一个新线程的三种方法"><a href="#创建一个新线程的三种方法" class="headerlink" title="创建一个新线程的三种方法"></a>创建一个新线程的三种方法</h2><h3 id="通过Runnable接口创建线程类"><a href="#通过Runnable接口创建线程类" class="headerlink" title="通过Runnable接口创建线程类"></a>通过Runnable接口创建线程类</h3><ol><li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">" "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">" "</span> + i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line">            RunnableThreadTest rtt = <span class="keyword">new</span> RunnableThreadTest();</span><br><span class="line">            <span class="keyword">new</span> Thread(rtt, <span class="string">"新线程1"</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(rtt, <span class="string">"新线程2"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承Thread类创建线程类"><a href="#继承Thread类创建线程类" class="headerlink" title="继承Thread类创建线程类"></a>继承Thread类创建线程类</h3><ol><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//重写run方法，run方法的方法体就是现场执行体</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">" "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">" : "</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> FirstThreadTest().start();</span><br><span class="line">                <span class="keyword">new</span> FirstThreadTest().start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Callable-接口"><a href="#Callable-接口" class="headerlink" title="Callable 接口"></a>Callable 接口</h3><p>Callable 与 Runable 有两点不同：</p><ul><li>可以通过 call() 获得返回值。</li><li>call() 可以抛出异常</li></ul><h3 id="Thread-和-Runnable-的区别"><a href="#Thread-和-Runnable-的区别" class="headerlink" title="Thread 和 Runnable 的区别"></a>Thread 和 Runnable 的区别</h3><p>如果一个类继承 Thread， 则不适合资源共享。但是如果实现了 Runnable 接口的话，则很容易实现资源共享。</p><p>总结：<br>实现 Runnable 接口比继承 Thread 类具有的优势：</p><ol><li>适合多个和相同的程序代码的线程去共享同一个资源。</li><li>可以避免 java 中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现 Runnable或 Callable 类线程，不能直接放入继承Thread 的类。</li></ol><h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><p>没有任何语言方面的需求要求一个被中断的线程应该终止。中断一个线程不过是引起它的注意。被中断的线程可以决定如何响应中断。某些线程是如此重要以至于应该处理完异常后， 继续执行， 而不理会中断。但是，更普遍的情况是，线程将简单地将中断作为一个终止的请求。</p><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>每当线程调度器有机会选择新线程时，它首先选择具有较高优先级的线程。但是，线程优先级是高度依赖于系统的。当虚拟机依赖于宿主机平台的线程实现机制时，Java 线程的优先级被映射到宿主机平台的优先级上，优先级个数也许更多，也许更少。</p><p><code>static void yield( )</code><br>导致当前执行线程处于<strong>让步状态</strong>。如果有其他的可运行线程具有至少与此线程同样高的优先级，那么这些线程接下来会被调度。注意，这是一个静态方法。</p><h3 id="守护线程-2019-7-13更新"><a href="#守护线程-2019-7-13更新" class="headerlink" title="守护线程(2019-7-13更新)"></a>守护线程(2019-7-13更新)</h3><p>有的时候应用中需要一个长期驻留的服务程序，但是不希望其影响应用退出，就可以将其设置为守护线程，如果 JVM 发现只有守护线程存在时，将结束进程，具体可以参考下面代码段。注意，必须在线程启动之前设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread daemonThread = <span class="keyword">new</span> Thread();</span><br><span class="line">daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">daemonThread.start();</span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>为了避免多线程引起的对共享数据的讹误，必须学习如何同步存取。</p><h3 id="竞争条件详解"><a href="#竞争条件详解" class="headerlink" title="竞争条件详解"></a>竞争条件详解</h3><p>当两个线程试图同时更新同一个账户的时候，这个问题就出现了。假定两个线程同时执行指令<code>accounts[to] += amount;</code>问题在于这不是原子操作。该指令可能被处理如下：</p><ol><li>将<code>accounts[to]</code>加载到寄存器。</li><li>增加<code>amount</code> 。</li><li>将结果写回<code>accounts[to]</code>。</li></ol><p>现在，假定第1个线程执行步骤1和2, 然后，它被剥夺了运行权。假定第2个线程被唤醒并修改了accounts 数组中的同一项。然后，第1个线程被唤醒并完成其第3步。<br>这样，这一动作擦去了第二个线程所做的更新。于是，总金额不再正确。<br><strong>因此加入同步锁以避免在该线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。</strong></p><h3 id="锁同步"><a href="#锁同步" class="headerlink" title="锁同步"></a>锁同步</h3><h4 id="锁Lock"><a href="#锁Lock" class="headerlink" title="锁Lock"></a>锁Lock</h4><p>有两种机制防止代码块受并发访问的干扰。Java语言提供一个 synchronized 关键字达到这一目的，并且Java SE 5.0引入了ReentrantLock 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock bankLock = <span class="keyword">new</span> ReentrantLock0 ；<span class="comment">// ReentrantLock implements the Lock interface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from, intto, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">        bankLock.lock();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(Thread.currentThread0);</span><br><span class="line">            accounts[from] -= amount;</span><br><span class="line">            System.out.printf(<span class="string">" %10.2f from %A to %d"</span>, amount, from, to);</span><br><span class="line">            accounts[to] += amount;</span><br><span class="line">            System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>,getTotalBalance());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            banklock.unlockO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重入</strong>Lock是一个更强大的工具，他有一个<strong>重入功能</strong>————当一个线程得到一个对象后，再次请求该对象锁时是可以再次得到该对象的锁的。<br>具体概念就是：自己可以再次获取自己的内部锁。因为线程可以重复地获得已经持有的锁。锁保持一个持有计数（holdcount) 来跟踪对lock 方法的嵌套调用。线程在每一次调用lock 都要调用unlock 来释放锁。由于这一特性，被一个锁保护的代码可以调用另一个使用相同的锁的方法。<br>假定一个线程调用transfer, 在执行结束前被剥夺了运行权。假定第二个线程也调用transfer, 由于第二个线程不能获得锁，将在调用lock 方法时被阻塞。它必须等待第一个线程完成transfer 方法的执行之后才能再度被激活。当第一个线程释放锁时，那么第二个线程才能开始运行</p><p><strong>公平锁</strong>CPU在调度线程的时候是在等待队列里随机挑选一个线程，由于这种随机性所以是无法保证线程先到先得的（synchronized控制的锁就是这种非公平锁）。但这样就会产生饥饿现象，即有些线程（优先级较低的线程）可能永远也无法获取CPU的执行权，优先级高的线程会不断的强制它的资源。那么如何解决饥饿问题呢，这就需要公平锁了。公平锁可以保证线程按照时间的先后顺序执行，避免饥饿现象的产生。但<strong>公平锁的效率比较低</strong>，因为要实现顺序执行，需要维护一个有序队列。</p><p><strong>条件对象Condition</strong><br>假定一个线程已经获得锁，将要执行，但是他所需要的条件还没有满足（例如在余额不足的情况下取钱），便会造成有锁却不执行，其他能够提供满足条件的线程（例如存钱）却只能等待，陷入僵局。<br>一个锁对象可以有一个或多个相关的条件对象。你可以用newCondition 方法获得一个条件对象。习惯上给每一个条件对象命名为可以反映它所表达的条件的名字。例如，在此设置一个条件对象来表达“ 余额充足”条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Condition sufficientFunds;</span><br><span class="line">    ···</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    sufficientFunds=bankLock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果transfer方法发现余额不足，它调用下面这个方法<br><code>sufficientFunds.await();</code><br>当前线程现在被阻塞了，并放弃了锁。我们希望这样可以使得另一个线程可以进行增加账户余额的操作。等待获得锁的线程和调用await 方法的线程存在本质上的不同。一旦一个线程调用await方法，它进人该条件的等待集。当锁可用时，该线程不能马上解除阻塞。相反，它处于阻塞状态，直到另一个线程调用同一条件上的signalAll 方法时为止。</p><h4 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h4><p>在前面一节中，介绍了如何使用 Lock 和 Condition 对象。在进一步深人之前，总结一下有关锁和条件的关键之处：</p><ul><li>锁用来保护代码片段，任何时刻只能有一个线程执行被保护的代码。</li><li>锁可以管理试图进入被保护代码段的线程。</li><li>锁可以拥有一个或多个相关的条件对象。</li><li>每个条件对象管理那些已经进入被保护的代码段但还不能运行的线程。</li></ul><p>Lock 和 Condition 接口为程序设计人员提供了高度的锁定控制。然而，大多数情况下，并不需要那样的控制，并且可以使用一种嵌人到Java 语言内部的机制。</p><p>如果一个方法用synchronized 关键字声明，那么对象的锁将保护整个方法。也就是说，要调用该方法，线程必须获得内部的对象锁。<br>换句话说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    method body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实方法锁其实锁的是实例对象，可以等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//相当于锁实例</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="comment">//需要同步的代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将静态方法声明为synchronized 也是合法的。如果调用这种方法，该方法获得相关的类对象的内部锁。例如，如果Bank类有一个静态同步的方法，那么当该方法被调用时，Bankxlass对象的锁被锁住。因此，没有其他线程可以调用同一个类的这个或任何其他的同步静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//相当于锁的整个类</span></span><br><span class="line">    <span class="keyword">synchronized</span>(xxx.class)&#123;</span><br><span class="line">        <span class="comment">//需要同步的代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态方法同步与非静态方法同步区别：</p><ul><li>静态同步：因此加入同步锁以避免在该线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。</li><li>非静态同步：锁住的是该对象,类的其中一个实例，当该对象(仅仅是这一个对象)在不同线程中执行这个同步方法时，线程之间会形成互斥。达到同步效果，<strong>但如果不同线程同时对该类的不同对象执行这个同步方法时，则线程之间不会形成互斥</strong>，因为他们拥有的是不同的锁。</li></ul><p>内部锁和条件存在一些局限。包括：</p><ul><li>不能中断一个正在试图获得锁的线程。</li><li>试图获得锁时不能设定超时。</li><li>每个锁仅有单一的条件，可能是不够的</li></ul><h4 id="synchronized和ReentrantLock的比较"><a href="#synchronized和ReentrantLock的比较" class="headerlink" title="synchronized和ReentrantLock的比较"></a>synchronized和ReentrantLock的比较</h4><p>区别：</p><ol><li>Lock是一个接口，是通过 JDK 来实现的，而 synchronized 是 Java 中的关键字，synchronized 是内置的语言实现，是 JVM 实现的；</li><li>synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 <code>unLock()</code> 去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁；</li><li>Lock可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断；</li><li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</li><li>Lock可以提高多个线程进行读操作的效率。</li></ol><p>两者在锁的相关概念上区别：</p><ol><li>可中断锁<br> 顾名思义，就是可以响应中断的锁。<br> 在Java中，synchronized就不是可中断锁，而Lock是可中断锁。如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。<br> <code>lockInterruptibly()</code>的用法体现了Lock的可中断性。</li><li>公平锁<br> 公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁（并不是绝对的，大体上是这种顺序），这种就是公平锁。<br> 非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。<br> 在Java中，synchronized 就是非公平锁，它无法保证等待的线程获取锁的顺序。ReentrantLock可以设置成公平锁。</li><li>读写锁<br> 读写锁将对一个资源（比如文件）的访问分成了2个锁，一个读锁和一个写锁。<br> 正因为有了读写锁，才使得多个线程之间的读操作可以并发进行，不需要同步，而写操作需要同步进行，提高了效率。<br> ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。<br> 可以通过readLock()获取读锁，通过writeLock()获取写锁。</li><li>绑定多个条件<br> 一个ReentrantLock对象可以同时绑定多个Condition对象，而在synchronized中，锁对象的wait()和notify()或notifyAll()方法可以实现一个隐含的条件，如果要和多余一个条件关联的时候，就不得不额外地添加一个锁，而ReentrantLock则无须这么做，只需要多次调用new Condition()方法即可。</li></ol><p>在新版的 JDK 中， synchronize 也逐渐有了很多优化，除非我们需要用到 ReentrantLock 的高级功能(比如上述几个锁)，我们尽量选用 synchronize 关键词。</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>还有一种情况可以安全地访问一个共享域，即这个域声明为final 时。考虑以下声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Map&lt;String, Double〉accounts = <span class="keyword">new</span> HashMap&lt;&gt;() ；</span><br></pre></td></tr></table></figure><p>其他线程会在构造函数完成构造之后才看到这个accounts变量。</p><h2 id="线程间协作"><a href="#线程间协作" class="headerlink" title="线程间协作"></a>线程间协作</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><h3 id="wait、notify、notifyall"><a href="#wait、notify、notifyall" class="headerlink" title="wait、notify、notifyall"></a>wait、notify、notifyall</h3><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p><p>它们都属于 Object 的一部分，而不属于 Thread。</p><p>只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。</p><p>使用 wait() 挂起期间，线程会<strong>释放锁</strong>。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h3><ol><li>互斥条件：一个资源每次只能被一个线程使用。</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li></ol><p>有3种典型的死锁类型：</p><h3 id="静态的锁顺序死锁"><a href="#静态的锁顺序死锁" class="headerlink" title="静态的锁顺序死锁"></a>静态的锁顺序死锁</h3><p>a和b两个方法都需要获得A锁和B锁。一个线程执行a方法且已经获得了A锁，在等待B锁；另一个线程执行了b方法且已经获得了B锁，在等待A锁。这种状态，就是发生了静态的锁顺序死锁。</p><p>经典面试问题：写一个死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticLockOrderDeadLock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lockA = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lockB = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockA)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lockB)&#123;</span><br><span class="line">                System.out.println(<span class="string">"function a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockB)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lockA)&#123;</span><br><span class="line">                System.out.println(<span class="string">"function b"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决静态的锁顺序死锁的方法就是：所有需要多个锁的线程，都要以相同的顺序来获得锁。</p><h3 id="动态的锁顺序死锁"><a href="#动态的锁顺序死锁" class="headerlink" title="动态的锁顺序死锁"></a>动态的锁顺序死锁</h3><p>动态的锁顺序死锁是指<strong>两个线程调用同一个方法</strong>时，<strong>传入的参数颠倒</strong>造成的死锁。<br>如下代码，一个线程调用了transferMoney方法并传入参数accountA,accountB；另一个线程调用了transferMoney方法并传入参数accountB,accountA。此时就可能发生在静态的锁顺序死锁中存在的问题，即：第一个线程获得了accountA锁并等待accountB锁，第二个线程获得了accountB锁并等待accountA锁。</p><p>动态的锁顺序死锁解决方案如下：使用System.identifyHashCode来定义锁的顺序。确保所有的线程都以相同的顺序获得锁。</p><h3 id="协作对象之间发生的死锁"><a href="#协作对象之间发生的死锁" class="headerlink" title="协作对象之间发生的死锁"></a>协作对象之间发生的死锁</h3><p>有时，死锁并不会那么明显，比如两个相互协作的类之间的死锁，比如下面的代码：一个线程调用了Taxi对象的setLocation方法，另一个线程调用了Dispatcher对象的getImage方法。此时可能会发生，第一个线程持有Taxi对象锁并等待Dispatcher对象锁，另一个线程持有Dispatcher对象锁并等待Taxi对象锁。</p><p>上面的代码中，我们在持有锁的情况下调用了外部的方法，这是非常危险的（可能发生死锁）。为了避免这种危险的情况发生，我们使用开放调用。如果调用某个外部方法时不需要持有锁，我们称之为开放调用。解决协作对象之间发生的死锁：需要使用开放调用，即<strong>避免在持有锁的情况下调用外部的方法</strong>。</p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>更多关于Java并发多线程请点击<a href="https://allenmistake.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">Java进阶学习多线程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://www.allenmistake.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：67.二进制数相加&amp;字符串相关操作总结</title>
    <link href="http://www.allenmistake.top/2019/03/07/leetcode67/"/>
    <id>http://www.allenmistake.top/2019/03/07/leetcode67/</id>
    <published>2019-03-07T13:15:20.000Z</published>
    <updated>2019-07-16T13:56:31.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Given two binary strings, return their sum (also a binary string).</p><p>The input strings are both non-empty and contains only characters 1 or 0.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题本来不想放上来的，不涉及多少算法上的问题，但是记录一些必要的字符串方法是很有必要的</p><h3 id="StringBuffer、StringBuilder与String"><a href="#StringBuffer、StringBuilder与String" class="headerlink" title="StringBuffer、StringBuilder与String"></a>StringBuffer、StringBuilder与String</h3><p>这三兄弟看似一样，实则区别很小，但是终归还是有区别的</p><ol><li><p>运行速度方面：StringBuilder &gt; StringBuffer &gt; String<br>前两个我们抛开不谈，说说为什么  String 最慢，因为 String 为字符串<strong>常量</strong>，而 StringBuilder 和 StringBuffer 均为字符串<strong>变量</strong>，即 String 对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"abc"</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">str=str+<span class="string">"de"</span>;</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><p> 如果运行这段代码会发现先输出 “abc”，然后又输出 “abcde” ，好像是 str 这个对象被更改了，其实，这只是一种假象罢了，JVM 对于这几行代码是这样处理的，首先创建一个 String 对象 str ，并把 “abc” 赋值给 str ，然后在第三行中，其实 JVM 又创建了一个新的对象也名为 str ，然后再把原来的 str 的值和 “de” 加起来再赋值给新的 str ，而原来的 str 就会被 JVM 的垃圾回收机制（GC）给回收掉了，所以， str 实际上并没有被更改，也就是前面说的<strong> String 对象一旦创建之后就不可更改了</strong>。所以， Java 中对 String 对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。</p></li><li><p>线程安全方面<br> StringBuffer 线程安全，而 StringBuilder 非线程安全，主要由于 Builder 中不带锁方法。这里我们不详细讨论。</p></li><li><p>方法<br>String的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"Hello World"</span></span><br><span class="line">a.charAt(<span class="number">1</span>);<span class="comment">//寻找第1个元素</span></span><br><span class="line"><span class="keyword">byte</span> b[] = a.getBytes();<span class="comment">//转换成比特数组</span></span><br><span class="line"><span class="keyword">char</span>[]b = a.toCharArray();<span class="comment">//转换成字符数组</span></span><br><span class="line">b.concat(a);<span class="comment">//连接两个字符串</span></span><br><span class="line">a.indexOf(<span class="string">"o"</span>));<span class="comment">//“o”第一次出现的位置</span></span><br><span class="line">a.lastIndexOf(<span class="string">"o"</span>);<span class="comment">//“o”最后一次出现的位置</span></span><br></pre></td></tr></table></figure><p>StringBuffer的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sb1.append(<span class="string">" World"</span>);<span class="comment">//在尾部添加字符串</span></span><br><span class="line">sb1.insert(<span class="number">1</span>, <span class="string">"ME"</span>);<span class="comment">//在指定位置后面添加字符串</span></span><br><span class="line">sb1.deleteCharAt(<span class="number">0</span>)；<span class="comment">//删除指定位置元素</span></span><br><span class="line">sb1.reverse();<span class="comment">//反转字符串</span></span><br><span class="line">sb1.toString();<span class="comment">//转换成String类型</span></span><br></pre></td></tr></table></figure></li><li><p>将字符串中的字符型数字转换成int</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = b.charAt(i) - <span class="string">'0'</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="String-为什么要设计成不可变的？-2019-5-14-更新"><a href="#String-为什么要设计成不可变的？-2019-5-14-更新" class="headerlink" title="String 为什么要设计成不可变的？(2019-5-14 更新)"></a>String 为什么要设计成不可变的？(2019-5-14 更新)</h3><ol><li><p>字符串常量池的需要<br> 字符串常量池(String pool, String intern pool, String保留池) 是Java堆内存中一个特殊的存储区域, 当创建一个String对象时,假如此字符串值已经存在于常量池中,则不会创建一个新的对象,而是引用已经存在的对象。还可以使用 String 的 intern() 方法在运行过程中将字符串添加到 String Pool 中。</p><p> 如下面的代码所示,将会在堆内存中只创建一个实际String对象.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abcd"</span>;</span><br><span class="line">String s2 = <span class="string">"abcd"</span>;</span><br></pre></td></tr></table></figure><p> 示意图如下所示:<br> <img src="/2019/03/07/leetcode67/pool.jpg" alt="string 常量池"><br> 假若字符串对象允许改变,那么将会导致各种逻辑错误,比如改变一个对象会影响到另一个独立对象. 严格来说，这种常量池的思想,是一种优化手段.</p><p> String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p></li><li><p>允许String对象缓存HashCode<br> Java中String对象的哈希码被频繁地使用, 比如在hashMap 等容器中。<br> 字符串不变性保证了hash码的唯一性,因此可以放心地进行缓存.这也是一种性能优化手段,意味着不必每次都去计算新的哈希码. 在String类的定义中有如下代码:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash;<span class="comment">//用来缓存HashCode</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="回到这道题"><a href="#回到这道题" class="headerlink" title="回到这道题"></a>回到这道题</h3><p>这道题说两个二进制数相加，得到一个二进制数，首先顺序肯定是从后向前，按位计算，其次要选择一个变量来判断是否应该进位（carry）。我们将每位算出的结果取余保存在一个StringBuffer中，然后将得到的数除以2来判断下一个是否进位。最后返回StringBuffer的反转。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> i = a.length() - <span class="number">1</span>, j = b.length() -<span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) sum += b.charAt(j--) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) sum += a.charAt(i--) - <span class="string">'0'</span>;</span><br><span class="line">            sb.append(sum % <span class="number">2</span>);</span><br><span class="line">            carry = sum / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) sb.append(carry);</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AllenMistake/Leetcode/blob/master/67.add-binary2.java" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="easy" scheme="http://www.allenmistake.top/categories/Leetcode/easy/"/>
    
    
      <category term="字符串" scheme="http://www.allenmistake.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：70.爬楼梯&amp;动态规划小结</title>
    <link href="http://www.allenmistake.top/2019/03/06/ClimbingStairs/"/>
    <id>http://www.allenmistake.top/2019/03/06/ClimbingStairs/</id>
    <published>2019-03-06T12:49:23.000Z</published>
    <updated>2019-03-06T13:06:22.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode日记：70-爬楼梯"><a href="#Leetcode日记：70-爬楼梯" class="headerlink" title="Leetcode日记：70.爬楼梯"></a>Leetcode日记：70.爬楼梯</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/06/ClimbingStairs/stair.jpg" alt="爬呀爬呀爬楼梯" title>                </div>                <div class="image-caption">爬呀爬呀爬楼梯</div>            </figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Note</strong>: Given n will be a positive integer.</p><p><strong>Example 1</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目很容易理解，可以选择一次爬两节台阶，也可以爬一节，问究竟有多少种情况（不能忽略顺序）。<br>这道题和53题的最长子串题有异曲同工之妙，为什么这么说呢？<br>首先我们来看：<br>最长字串要对前面计算的子串长度进行更新，在更新的过程中，势必要得出<strong>在之前的最长字串是多少</strong>。<br>而爬楼梯这道题，同样和前一状态有关，比如爬n节台阶，就会分为两种情况：</p><ul><li>在n-1的台阶处爬一层台阶</li><li>在n-2的台阶处爬两层台阶</li></ul><p>继续向下延伸思考，到达每一次层一共有几种方法这个问题就变成了2个子问题：</p><ul><li>到达n-1层台阶有几种方法</li><li>到达n-2层台阶有几种方法</li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法，这就是动态规划。动态规划常常适用于有重叠子问题和最优子结构性质的问题。我们要明确，动态规划是一种思想，并不是一种具体的算法。</p><p>那么适用于动态规划的问题都有哪些特征呢？</p><ul><li><strong>最优子结构</strong>：当问题的最优解包含了其子问题的最优解时，称该问题具有最优子结构性质。</li><li><strong>重叠子问题</strong>：在用递归算法自顶向下解问题时，每次产生的子问题并不总是新问题，有些子问题被反复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只解一次，而后将其解保存在一个表格中，在以后尽可能多地利用这些子问题的解。</li></ul><h2 id="回到原问题"><a href="#回到原问题" class="headerlink" title="回到原问题"></a>回到原问题</h2><p>让我们回归这道题，我们总结一下之前分析的结果：</p><p><strong>第n个结果=第n-1个结果+第n-2个结果</strong></p><p>好的，我们抛开我们熟悉的斐波那契数列不谈（事实上，在只能走1，2节的时候该题的结果就是斐波那契数列。。），我们可以建立一个dp数组，先将1和2两种情况求出来，之后的3、4、…、n+1<strong>都可以用前两个已经计算出的子结果得到</strong>。</p><p>这就是我们这道题利用到<strong>动态规划</strong>的核心算法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AllenMistake/Leetcode/blob/master/70.climbing-stairs.java" target="_blank" rel="noopener">代码源文件</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态规划问题算法多变，需要多做题熟练掌握这种思想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="easy" scheme="http://www.allenmistake.top/categories/Leetcode/easy/"/>
    
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>你好，Hexo</title>
    <link href="http://www.allenmistake.top/2019/03/06/hellohexo/"/>
    <id>http://www.allenmistake.top/2019/03/06/hellohexo/</id>
    <published>2019-03-06T03:12:01.000Z</published>
    <updated>2019-03-06T02:22:16.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="你好，Hexo"><a href="#你好，Hexo" class="headerlink" title="你好，Hexo"></a>你好，Hexo</h1><h1 id="hexo的使用技巧"><a href="#hexo的使用技巧" class="headerlink" title="hexo的使用技巧"></a>hexo的使用技巧</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/06/hellohexo/coffee1.jpg" alt="喝杯咖啡休息一下" title>                </div>                <div class="image-caption">喝杯咖啡休息一下</div>            </figure><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><h1 id="来日方长"><a href="#来日方长" class="headerlink" title="来日方长"></a>来日方长</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="写作" scheme="http://www.allenmistake.top/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="其他" scheme="http://www.allenmistake.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：66.加一</title>
    <link href="http://www.allenmistake.top/2019/03/05/leetcode66/"/>
    <id>http://www.allenmistake.top/2019/03/05/leetcode66/</id>
    <published>2019-03-04T17:00:00.000Z</published>
    <updated>2019-03-05T15:03:24.845Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.</p><p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p><p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目很明显就是让你把这些数组当成一个数，然后让你返回把这个数+1之后的数组形式，坑爹的是两个例子都没有体现出这道题的特殊值；</p><p>事实上，我们遇到这种+1问题，首先要考虑进位，如果都是题目给的这种例子，末位直接+1，返回OK了，但是如果出现<code>[9]</code>或者是<code>[9,9,9]</code>又该怎么处理呢？</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = digits.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i!=-<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]&lt;<span class="number">9</span>)&#123;</span><br><span class="line">                ++digits[i];</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">            digits[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从这里可以看出，对付进位，位数溢出的方法，其结果必定是首位是1，后面全是0，明确了这一点，就可以理解最后三行的意图了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="easy" scheme="http://www.allenmistake.top/categories/Leetcode/easy/"/>
    
    
      <category term="数组" scheme="http://www.allenmistake.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：53.最大子串</title>
    <link href="http://www.allenmistake.top/2019/03/04/leetcode53/"/>
    <id>http://www.allenmistake.top/2019/03/04/leetcode53/</id>
    <published>2019-03-03T17:00:00.000Z</published>
    <updated>2019-03-11T13:11:49.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="自己的方法"><a href="#自己的方法" class="headerlink" title="自己的方法"></a>自己的方法</h3><p>利用数据结构：无<br>利用算法：动态规划<br>复杂度O(n)</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> temp=max;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            temp=Math.max(nums[i]+temp,nums[i]);</span><br><span class="line">            max=Math.max(temp, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>思路：</strong><br>无非就是用一个值(temp)储存中间连续元素的和，在用另外一个值(max)表示到目前为止的最大值，首先比较temp加上后一个元素和那个元素不加temp谁大，如果不加temp说明nums[i]更大，便把它的值赋给temp，继续累加，期间不断更新max值；<br>这种记录中间产生变量，并在循环后加以运用的思想被称作动态规划</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态规划在这里刚刚浮出水面，我将在后面做一些专门的补充，来说明动态规划的特点和做题时的应用场景</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="easy" scheme="http://www.allenmistake.top/categories/Leetcode/easy/"/>
    
    
      <category term="数组" scheme="http://www.allenmistake.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="动态规划" scheme="http://www.allenmistake.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结之继承、抽象与接口</title>
    <link href="http://www.allenmistake.top/2019/03/04/javadaily3/"/>
    <id>http://www.allenmistake.top/2019/03/04/javadaily3/</id>
    <published>2019-03-03T17:00:00.000Z</published>
    <updated>2019-07-17T07:28:32.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="类，超类，子类"><a href="#类，超类，子类" class="headerlink" title="类，超类，子类"></a>类，超类，子类</h2><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ol><li><p>super与this<br>有些人认为 super 与 this 引用是类似的概念， 实际上， 这样比较并不太恰当。这是因为super 不是一个对象的引用， 不能将 super 赋给另一个对象变量， 它只是一个指示编译器调用超类方法的特殊关键字。</p></li><li><p>super与构造<br>当子类构造的时候，由于不能对其超类的私有成员进行访问，只能调用超类的构造器。如果子类的构造器没有显式地调用超类的构造器， 则将自动地调用超类默认（没有参数)的构造器。</p></li></ol><h3 id="超类与子类引用关系"><a href="#超类与子类引用关系" class="headerlink" title="超类与子类引用关系"></a>超类与子类引用关系</h3><p>超类可以引用子类，但是，不能将一个超类的引用赋给子类变量。在下面的例子中，超类虽然引用了子类，变量staff[0]与boss引用同一个对象。但编译器将staff[0]看成Employee对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(. . .);</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">staff[<span class="number">0</span>] = boss;<span class="comment">//Correct Employee超类可以引用其子类Manger</span></span><br><span class="line">boss = staff[<span class="number">0</span>];<span class="comment">//Error</span></span><br><span class="line">staff[<span class="number">0</span>].setBonus(<span class="number">5000</span>);<span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>在Java 中，子类数组的引用可以转换成超类数组的引用， 而不需要采用强制类型转换。例如，下面是一个经理数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager[] managers = <span class="keyword">new</span> Manager[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>将它转换成Employee[]数组完全是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee[] staff = managers; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>这样做肯定不会有问题，请思考一下其中的缘由。毕竟，如果manager[i] 是一个Manager, 也一定是一个Employee。然而， 实际上，将会发生一些令人惊讶的事情。要切记<strong>managers和staff引用的是同一个数组</strong>。现在看一下这条语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry Hacker"</span>, . . .) ;</span><br></pre></td></tr></table></figure><p>编译器竟然接纳了这个赋值操作。但在这里， staff[0]与manager[0]引用的是同一个对象，似乎我们把一个普通雇员擅自归入经理行列中了。这是一种很忌讳发生的情形，当调用managers[0].setBonus(1000) 的时候，将会导致调用一个不存在的实例域， 进而搅乱相邻存储空间的内容。<br>为了确保不发生这类错误， 所有数组都要牢记<strong>创建它们的元素类型</strong>，并负责监督仅将<strong>类型兼容的引用存储到数组中</strong>。例如，使用new managers[10]创建的数组是一个经理数组。<strong>如果试图存储一个Employee 类型的引用就会引发ArrayStoreException异常</strong>。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>只能在继承层次内进行类型转换。</li><li>在将超类转换成子类之前，应该使用instanceof 进行检查。</li></ul><p>在一般情况下，应该尽量少用类型转换和instanceof 运算符。</p><h3 id="抽象类abstract"><a href="#抽象类abstract" class="headerlink" title="抽象类abstract"></a>抽象类abstract</h3><p>提示：许多程序员认为，在抽象类中不能包含具体方法。建议尽量将通用的域和方法（不管是否是抽象的）放在超类（不管是否是抽象类）中。</p><p>继承抽象类可以有两种选择。<br>一种是在抽象类中定义部分抽象类方法或不定义抽象类方法，这样就必须将子类也标记为抽<br>象类；另一种是定义全部的抽象方法，这样一来，子类就不是抽象的了。<br>抽象类不能被实例化。可以定义一个抽象类的对象变量，但是它只能引用非抽象子类的对象，这个时候，利用这个对象变量调用抽象类的抽象方法，会自动向下寻找，也就是实际调用的是其子类的方法。</p><h2 id="抽象与接口"><a href="#抽象与接口" class="headerlink" title="抽象与接口"></a>抽象与接口</h2><p>抽象类和接口的区别：</p><ol><li>接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供具体的实现。抽象类可以为普通方法提供具体的实现。所以，当一个子类继承抽象类的时候，并不一定要覆盖抽象类的方法（抽象方法除外），而一个类继承一个接口时，<strong>必须要重写接口的所有方法</strong>（毕竟接口中的方法只是个声明）</li><li><p>接口里只能定义静态常量，不能定义普通成员变量。抽象类可以定义普通成员变量和静态变量。在接口中定义成员变量会被自动转化成静态 final 变量，也就是在接口中，下面两个语句等价</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>接口里不包含构造器。抽象类可以包含构造器（抽象类里的构造器不是用于创建对象的，而是让其子类调用这些构造器来完成类的初始化）。</p></li><li>接口里不能包含初始化块，而抽象类里可以包含初始化块。</li><li>一个类最多只能有一个直接父类，包括抽象类，而一个类可以实现多个接口，通过实现多个接口来弥补Java单继承的不足。<br>抽象类中的成员可以是 <code>private</code>、默认、<code>protected</code>、<code>public</code> 的，而接口中的成员全都是 <code>public</code> 的。</li></ol><h2 id="Object所有类的超类"><a href="#Object所有类的超类" class="headerlink" title="Object所有类的超类"></a>Object所有类的超类</h2><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>在Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><h2 id="泛型数组列表"><a href="#泛型数组列表" class="headerlink" title="泛型数组列表"></a>泛型数组列表</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol><li><p>构造形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br></pre></td></tr></table></figure><p> Java SE 7 中， 可以省去右边的类型参数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;()；</span><br></pre></td></tr></table></figure></li><li><p>添加元素<br><strong>add方法</strong><br>如果调用add且内部数组已经满了， 数组列表就将自动地创建一个更大的数组，并将所有的对象从较小的数组中拷贝到较大的数组中。<br>警告：分配数组列表， 如下所示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ArrayList&lt;&gt;(lOO) <span class="comment">// capacity is 100</span></span><br></pre></td></tr></table></figure><p> 它与为新数组分配空间有所不同：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Employee[<span class="number">100</span>] <span class="comment">// size is 100</span></span><br></pre></td></tr></table></figure><p> 数组列表的容量与数组的大小有一个非常重要的区别。如果为数组分配100 个元素的存储空间，数组就有100 个空位置可以使用。而容量为100 个元素的数组列表只是拥有保存100 个元素的潜力（ 实际上，重新分配空间的话，将会超过100), 但是在最初，甚至完成初始化构造之后，数组列表根本就不含有任何元素。</p><p> C++ 注释： ArrayList类似于C++ 的vector 模板。ArrayList 与vector 都是泛型类型。但是C++ 的vector 模板为了便于访问元素重栽了[ ] 运算符。由于Java 没有运算符重栽，所以必须调用显式的方法。此外，C++ 向量是值拷贝。如果a 和b 是两个向量，赋值操作a = b 将会构造一个与b 长度相同的新向量a，并将所有的元素由b 拷贝到a, 而在Java 中，这条赋值语句的操作结果是让a和b引用同一个数组列表。</p></li><li><p>总结</p><ul><li>不必指出数组的大小。</li><li>使用add 将任意多的元素添加到数组中。</li><li>使用size() 替代length 计算元素的数目。</li><li>使用a.get(i) 替代a[i] 访问元素。</li></ul></li></ol><p>这就是Java 中不尽如人意的参数化类型的限制所带来的结果。鉴于兼容性的考虑， 编译<br>器在对类型转换进行检査之后， 如果没有发现违反规则的现象， 就将所有的类型化数组列表<br>转换成原始ArrayList 对象。在程序运行时， 所有的数组列表都是一样的， 即没有虚拟机中<br>的类型参数。因此，类型转换<code>ArrayList</code> 和<code>ArrayList&lt;Employee&gt;</code> 将执行相同的运行时检查。</p><h3 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h3><ol><li><p>对象包装器<br>有时， 需要将int这样的基本类型转换为对象。所有的基本类型都冇一个与之对应的类。通常，这些类称为包装器(wrapper) 。<br>这些对象包装器类拥有很明显的名字：Integer、Long、Float、Double、Short、Byte、Character 、Void 和Boolean<br> 下面是声明一个ArrayList里面存放int型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;()；</span><br></pre></td></tr></table></figure><p> 这种方式适用于小型集合，因为其效率比整型数组int[]要低得多，但是添加成员的方便程度要比整型数组要高。</p></li><li><p>自动装箱<br> 幸运的是， 有一个很有用的特性， 从而更加便于添加int 类型的元素到<code>ArrayList&lt;lnteger&gt;</code>中。下面这个调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p> 将自动地变换成</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(Integer.value0f(<span class="number">3</span>)) ;</span><br></pre></td></tr></table></figure><p> 这种变换被称为<strong>自动装箱</strong>（autoboxing)。</p></li></ol><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><h2 id="内部类-2019-7-12更新"><a href="#内部类-2019-7-12更新" class="headerlink" title="内部类(2019-7-12更新)"></a>内部类(2019-7-12更新)</h2><h3 id="内部类中变量的使用"><a href="#内部类中变量的使用" class="headerlink" title="内部类中变量的使用"></a>内部类中变量的使用</h3><p>如果希望访问所在方法的局部变量，那么这个局部变量必须是<strong>有效 final</strong> 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> methodOuter&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//所在方法中的局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodfInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>new 出来的对象在堆内存中</li><li>局部变量是跟着方法走的，在栈内存当中.</li><li>方法运行结束之后，立即出栈，局部变量就会立即消失.</li><li>但是 new 出来的对象会在堆持续存在，直到垃圾回收消失。</li><li>最终当内部类需要使用局部变量时吗，会复制一份到自己的堆内存中，如果这个变量是不确定的，与你形式会带来不确定的后果。</li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用匿名内部类。</p><h2 id="谈谈反射-2019-7-17更新"><a href="#谈谈反射-2019-7-17更新" class="headerlink" title="谈谈反射(2019-7-17更新)"></a>谈谈反射(2019-7-17更新)</h2><p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p><p>类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forName(“com.mysql.jdbc.Driver”) 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p><p><strong>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</strong></p><p>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：</p><p>Field ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；<br>Method ：可以使用 invoke() 方法调用与 Method 对象关联的方法；<br>Constructor ：可以用 Constructor 的 newInstance() 创建新的对象。</p><h3 id="反射的优点"><a href="#反射的优点" class="headerlink" title="反射的优点"></a>反射的优点</h3><p>可扩展性 ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。<br>类浏览器和可视化开发环境 ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。<br>调试器和测试工具 ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。</p><h3 id="反射的缺点"><a href="#反射的缺点" class="headerlink" title="反射的缺点"></a>反射的缺点</h3><p>尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。</p><p>性能开销 ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。</p><p>安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。</p><p>内部暴露 ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如<strong>访问私有的属性和方法</strong>），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="基础" scheme="http://www.allenmistake.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>新学期总结与3月计划</title>
    <link href="http://www.allenmistake.top/2019/03/03/weeklysummary/"/>
    <id>http://www.allenmistake.top/2019/03/03/weeklysummary/</id>
    <published>2019-03-02T17:00:00.000Z</published>
    <updated>2020-01-03T09:07:13.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三月的主题是治愈"><a href="#三月的主题是治愈" class="headerlink" title="三月的主题是治愈"></a>三月的主题是治愈</h1><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>最近去电影院看了绿皮书，拍的不错，原谅我只能用很贫瘠的词汇量来形容它，这是一部反映种族歧视问题的电影，很轻松，不沉重，上次看到一个黑人和一个白人为雇主关系还是《触不可及》，但是《触不可及》偏重讲男人之间的友情，而《绿皮书》更侧重于反映不同种族之间的不理解。看的时候鼻子酸酸的，感觉被治愈了，这个月还有一部《夏目友人帐》也是出名的治愈番电影化，恰巧三月是回暖的一个月份，都说西安没有春天，珍惜这份没有被太阳烤热的时间吧。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>这是今年写的第一篇总结，其实应该早就写了的，但是总觉得假期并没做很多东西，带到家里的两本书都没看，全都花时间折腾自己的电脑，不得不说备份的重要性。<br>唯一觉得这个暑假的收获可能就是去北京转了转，恰巧那天下雪了，可惜并不知道故宫要提前预约，要不然就能看看雪中的故宫了。但是银装素裹的北海和什刹海也是一种不错的意境。<br>假期本来也就没几天，回来还要干活，自己也给自己放了个假，希望暑假多学习学习。<br>回到学校来就开始帮老师忙项目，忙里偷闲的回顾了一下Java基础知识，然后就开始学习并发，不得不说，并发还是挺难理解的，各种锁，估计要多看几遍了。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前两天在Github看见微软前端2天学习课程，clone到了本地也学习了一下，其实就是今天的事情，奈何自己语言水平不过关，看起来比较吃力，一天才看了本该半天就学完了的东西，而且也谈不上深入理解，希望在三月份能把这份课程学习完。<br>前端我一直比较感兴趣，能做到略知一二就行，会一些基本的语言语法就ok。</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>三月是Java月（自己编的），这个月要把java并发和jvm全部搞定，参考书籍有：</p><ul><li>《Java并发编程艺术》</li><li>深入理解JVM虚拟机</li></ul><p>这个月主要就和这两本书玩命了</p><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><p>感觉现在刷easy有点感觉了，但是讨论区大神有时候给出的方案真的太优美了，什么时候能像他们一样优秀。3月份定的目标是20道leetcode，加油吧！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>今天天气不错，给自己点一首《面具》。每当这个时候都斗志满满呀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Java日常学习总结之类与对象篇</title>
    <link href="http://www.allenmistake.top/2019/02/28/javadaily2/"/>
    <id>http://www.allenmistake.top/2019/02/28/javadaily2/</id>
    <published>2019-02-27T17:00:00.000Z</published>
    <updated>2019-05-15T14:10:42.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ol><li><p>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。在Java 中，任何对象变量的值都是对存储在另外一个地方的一个对象的引用。new 操作符的返回值也是一个引用。</p></li><li><p><strong>构造器产生机制</strong><br>很多人错误地认为Java 对象变量与C++ 的引用类似。然而，在C++中没有空引用， 并且引用不能被赋值。可以将Java 的对象变量看作C++ 的对象指针。例如，</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date birthday; <span class="comment">// Java</span></span><br></pre></td></tr></table></figure><p> 实际上， 等同于</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date* birthday; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p> 一旦理解了这一点， 一切问题就迎刃而解了。当然， 一个Date* 指针只能通过调用new进行初始化。就这一点而言，c++与Java 的语法几乎是一样的。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date* birthday = <span class="keyword">new</span> Date() ; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p> 如果把一个变量的值賦给另一个变量， 两个变量就指向同一个日期， 即它们是同一个对象的指针。在 Java 中的null 引用对应 C++ 中的 NULL 指针。所有的 Java 对象都存储在堆中。当一个对象包含另一个对象变量时， 这个变量依然包含着指向另一个堆对象的指针。<br> 在 C++ 中，指针十分令人头疼，并常常导致程序错误。稍不小心就会创建一个错误的指针，或者造成内存溢出。在 Java 语言中， 这些问题都不复存在。如果使用一个没有初始化的指针，运行系统将会产生一个运行时错误，而不是生成一个随机的结果，同时，不必担心内存管理问题，垃圾收集器将会处理相关的事宜。<br> C++ 确实做了很大的努力，它通过拷贝型构造器和复制操作符来实现对象的自动拷贝。例如，一个链表（ linked list ) 拷贝的结果将会得到一个新链表，其内容与原始链表相同， 但却是一组独立的链接。这使得将同样的拷贝行为内置在类中成为可能。在 Java 中， 必须使用 clone 方法获得对象的完整拷贝。</p></li><li><p><strong>使用静态工厂方法来代替构造器</strong><br>这个技巧或者说注意事项在effective java中的第一章第一节就强调过，他有很多便捷之处，其中一个重要的就是可以根据产生的具体对象的特征来对方法命名，而构造器只能有一种名字（即类的名字）</p></li><li><p><strong>访问器和更改器</strong><br> 访问器：只访问对象元素，不会对对象本身进行修改<br> 修改器：会对对象本身进行修改<br> 在C++ 中，带有 const 后缀的方法是访问器方法；默认为更改器方法。但是，在Java 语言中，访问器方法与更改器方法在语法上没有明显的区别，</p></li></ol><h3 id="自定义的类"><a href="#自定义的类" class="headerlink" title="自定义的类"></a>自定义的类</h3><ol><li><p><strong>构造器使用注意事项</strong><br>Java 构造器的工作方式与 C++ 一样。但是，要记住所有Java 对象都是在堆中构造的，构造器总是伴随着 new 操作符一起使用。<br>请注意，不要在构造器中定义与<strong>实例域</strong>重名的局部变量。例如，下面的构造器将无法设置 salary 。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(St ring n, <span class="keyword">double</span> s, . .</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    String name = n; // Error</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> salary = s; // Error</span></span></span><br><span class="line"><span class="function"><span class="params">...</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure></li><li><p>this与隐式参数<br>在每一个方法中， 关键字 this 表示隐式参数。<br><strong>C++ 注释</strong>： 在 C++ 中， 通常在类的外面定义方法：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Employee::raiseSalary(<span class="keyword">double</span> byPercent) <span class="comment">// C++, not Java</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果在类的内部定义方法，这个方法将自动地成为内联（inline)方法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> getNameQ&#123;</span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">&#125; <span class="comment">// inline in C++</span></span><br></pre></td></tr></table></figure><p> 在 Java 中，<strong>所有的方法都必须在类的内部定义，但并不表示它们是内联方法。是否将某个方法设置为内联方法是Java 虚拟机的任务。即时编译器会监视调用那些简洁、经常被调用、没有被重载以及可优化的方法。</strong></p></li></ol><h3 id="静态域与静态方法"><a href="#静态域与静态方法" class="headerlink" title="静态域与静态方法"></a>静态域与静态方法</h3><ol><li><p>静态域<br>如果将域定义为 static , 每个类中<strong>只有一个</strong>这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。</p></li><li><p>静态方法<br>静态方法是一种不能向对象实施操作的方法。<br>静态方法不能有实例域， 因为它不能操作对象。但是，静态方法可以访问自身类中的静态域。<br>在下面两种情况下使用静态方法：</p><ul><li>一方法不需要访问对象状态，其所需参数都是通过显式参数提供（例如：Math.pow)</li><li>一个方法只需要访问类的静态域（例如：Employee.getNextld)</li></ul><p><strong>静态工厂方法</strong><br>静态工厂的功能和构造器基本一致，都是产生一个对象实例。<br>为什么这些类不利用构造器完成这些操作呢？这主要有两个原因：</p><ul><li>无法命名构造器。构造器的名字必须与类名相同。但是，这里希望将得到的不同特征的实例采用不用的名字</li><li>当使用构造器时，无法改变所构造的对象类型。只能是自己类型，不能是其子类</li></ul></li><li><p>父类的静态方法能不能被重写？（2019-5-14 更新）<br>答案是不能。因为静态方法从程序开始运行后就已经分配了内存，也就是说已经写死了。所有引用到该方法的对象（父类的对象也好子类的对象也好）所指向的都是同一块内存中的数据，也就是该静态方法。子类中如果定义了相同名称的静态方法，<strong>并不会重写，而应该是在内存中又分配了一块给子类的静态方法</strong>，没有重写这一说。</p></li></ol><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ol><li><p><strong>Java 程序设计语言总是采用按值调用</strong><br> <strong>也就是说，方法得到的是所有参数值的一个拷贝特别是，方法不能修改传递给它的任何参数变量的内容。</strong> 在这里对象是个特殊情况，可以改变传入对象中成员变量的值，但是<strong>基本类型</strong>例如int、boolean并不能改变（不会报错，但跳出方法外值不变，因为变得是拷贝，而不是其本身）</p></li><li><p>然而，虽然对象是特殊情况，但对象仍然是按值调用，不是引用调用；</p><ul><li>一个方法不能修改一个基本数据类型的参数（即<strong>数值型或布尔型</strong>）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul></li></ol><h2 id="对象与其他"><a href="#对象与其他" class="headerlink" title="对象与其他"></a>对象与其他</h2><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><ol><li><p>调用另一个构造器<br> 如果构造器的第一个语句形如this(…) ，这个构造器将调用同一个类的另一个构造器。下面是一个典型的例子：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">// calls Employee(String, double)</span></span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"Employee #"</span> + nextld, s);</span><br><span class="line">    nextld++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当调用 new Employee(60000) 时，Employee(double) 构造器将调用 Employee(String ，double) 构造器。采用这种方式使用 this 关键字非常有用，这样对公共的构造器代码部分只编写一次即可。</p></li><li><p>对象析构与 finalize 方法<br> 在析构器中，最常见的操作是回收分配给对象的存储空间。由于 Java 有自动的垃圾回收器，不需要人工回收内存，所以 Java 不支持析构器。</p></li></ol><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol><li>包的导入<br>在C++中，与包机制类似的是命名空间（namespace) 。在Java 中，package 与 import 语句类似于 C++ 中的 namespace 和 using 指令。</li></ol><h2 id="类的设计技巧"><a href="#类的设计技巧" class="headerlink" title="类的设计技巧"></a>类的设计技巧</h2><ol><li>一定要保证数据私有</li><li>一定要对数据初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有的域都需要独立的域访问器和域更改器</li><li>将职责过多的类进行分解</li><li>类名和方法名要能够体现它们的职责</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="基础" scheme="http://www.allenmistake.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java日常学习总结之基础程序设计篇</title>
    <link href="http://www.allenmistake.top/2019/02/24/javadairy1/"/>
    <id>http://www.allenmistake.top/2019/02/24/javadairy1/</id>
    <published>2019-02-23T17:00:00.000Z</published>
    <updated>2019-05-15T14:08:34.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础程序设计篇"><a href="#基础程序设计篇" class="headerlink" title="基础程序设计篇"></a>基础程序设计篇</h2><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li>Java中，布尔值并不能转换成为数字，数字也不能转化为布尔；</li><li>枚举类在第5章的时候介绍；声明的时候<strong>enum</strong>关键词；</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>Java字符串并不是字符型数组</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[]=<span class="string">"Hello"</span></span><br></pre></td></tr></table></figure><p> 这种认识是错误的，Java字符串大致类似于char*指针</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* greeting=<span class="string">"Hello"</span></span><br></pre></td></tr></table></figure></li><li><p>空串是长度为0，内容为空的字符串；null串目前没有任何对象与该对象关联；更多请看第四章</p></li><li><p>String类的一些常用方法</p></li></ul><h4 id="检测两个字符串是否相等"><a href="#检测两个字符串是否相等" class="headerlink" title="检测两个字符串是否相等"></a>检测两个字符串是否相等</h4><ol><li>区分大小写”Hello”.equals(greetintg)</li><li>不区分大小写”Hello”.equalsIgnoreCase(“hello”)</li><li>不能用==来判断，这样对比的是存储位置，而不是具体的值；</li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li>char charAt(inr index)<br>返回指定位置的字符</li><li>int compareTo(String other)<br>按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之前，返回一个正数，相等返回0；</li><li>boolean equals(Object other)</li><li>int indexOf(String str)<br>返回与字符串str或代码点cp匹配的第一个字串开始的位置。位置从0开始计算；</li><li>String substring( int beginlndex, int endlndex )<br>返回一个新字符串。这个字符串包含原始字符串中从beginlndex 到串尾或endlndex-l的所有代码单元。</li></ol><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>如果需要用许多小段的字符串构建一个字符串， 那么应该按照下列步骤进行。<br>   首先， 构建一个空的字符串构建器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilderO;</span><br></pre></td></tr></table></figure><p>当每次需要添加一部分内容时， 就调用append 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.append(ch); <span class="comment">// appends a single character</span></span><br><span class="line">bui1der.append(str); <span class="comment">// appends a string</span></span><br></pre></td></tr></table></figure><p>在需要构建字符串时就凋用toString 方法， 将可以得到一个String 对象， 其中包含了构建器<br>中的字符序列。<br>String completedString = builder.toStringO ;</p><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><ol><li><p>可见输入与不可见输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可见输入</span></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>nextLine 方法将输入一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"What is your name? "</span>);</span><br><span class="line">String name = in.nextLine();</span><br></pre></td></tr></table></figure><p>在这里，使用nextLine 方法是因为在输人行中有可能包含空格。要想读取一个单词（以空白符作为分隔符)，就调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String firstName = in.nextO；</span><br></pre></td></tr></table></figure><p>要想读取一个整数， 就调用nextlnt 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"How old are you? "</span>)；</span><br><span class="line"><span class="keyword">int</span> age = in.nextlntO;</span><br></pre></td></tr></table></figure><p>因为输入是可见的， 所以Scanner 类不适用于从控制台读取密码。Java SE 6 特别引入了Console 类实现这个目的。要想读取一个密码， 可以采用下列代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(<span class="string">"User name: "</span>)；</span><br><span class="line">cha「[] passwd = cons.readPassword(<span class="string">"Password:"</span>);</span><br></pre></td></tr></table></figure><p>为了安全起见， 返回的密码存放在一维字符数组中， 而不是字符串中。在对密码进行处理之后， 应该马上用一个填充值覆盖数组元素</p></li></ol><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li>块作用域<br> c++支持在嵌套的块中声明同一变量，但是Java不允许这么做</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p>声明并创建一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>创建一个数字数组时， 所有元素都初始化为0。boolean 数组元素会初始化为false,对象数组的元素则初始化为一个特殊值null, 这表示这些元素（还）未存放任何对象。初学者对此可能有些不解。例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>会创建一个包含10 个字符串的数组， 所有字符串都为null。</p></li><li><p>打印数组中元素<br>可以利用toString()方法，转化为字符串直接输出；<br>也可以利用循环一个个打印</p></li><li><p>拷贝数组<br>C++ 注释： Java 数组与C++ 数组在堆栈上有很大不同， 但基本上与分配在堆（heap) 上的数组指针一样。也就是说，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>]; <span class="comment">// Java</span></span><br></pre></td></tr></table></figure><p>不同于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>]; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p>而等同于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>]; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Java 中的[ ]运算符被预定义为检查数组边界，而且<strong>没有指针运算</strong>，即不能通过a加1得到数组的下一个元素。</p></li><li><p>多维数组<br>Java 实际上没有多维数组， 只有一维数组。多维数组被解释为“ 数组的数组。”<br>C++ 注释： 在C++ 中， Java 声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doublet] [] balances = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">10</span>] [<span class="number">6</span>]; <span class="comment">// 3ava</span></span><br></pre></td></tr></table></figure><p>不同于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> balances[<span class="number">10</span>] [<span class="number">6</span>] ; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p>也不同于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> (*balances) [<span class="number">6</span>] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">10</span>] [<span class="number">6</span>] ; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure><p>而是分配了一个包含10 个指针的数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>** balances = <span class="keyword">new</span> <span class="keyword">double</span>*[<span class="number">10</span>]; <span class="comment">// C++</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://www.allenmistake.top/categories/Java/"/>
    
    
      <category term="基础" scheme="http://www.allenmistake.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：39.组合之和</title>
    <link href="http://www.allenmistake.top/2018/12/06/leetcode39/"/>
    <id>http://www.allenmistake.top/2018/12/06/leetcode39/</id>
    <published>2018-12-05T17:00:00.000Z</published>
    <updated>2019-03-05T13:55:11.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 target）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,6,7], target = 7,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>又是一个所有满足条件的排列组合，还是用我们熟悉的递归，我的递归是弱项，所以我会多练习一些这方面的题。这里我们新加入三个变量，start记录当前的递归到的下标，out为一个解，res保存所有已经得到的解，每次调用新的递归函数时，此时的target要减去当前数组的的数，具体看代码如下：</p><p>我们也可以用迭代的解法来做，建立一个三维数组dp，这里dp[i]表示目标数为i的所有解法集合。这里的i就从1遍历到target即可，对于每个i，我们都新建一个二维数组cur，然后遍历candidates数组，如果遍历到的数字大于i，说明当前及之后的数字都无法组成i，直接break掉。否则如果相等，那么把当前数字自己组成一个数组，并且加到cur中。否则就遍历dp[i - candidates[j] - 1] 中的所有数组，如果当前数字大于数组的首元素，则跳过，因为我们的结果要求是要有序的。否则就将当前数字加入数组的开头，并且将数组放入cur之中即可，参见代码如下</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt; &amp;candidates, int target) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        combinationSumDFS(candidates, target, <span class="number">0</span>, &#123;&#125;, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> combinationSumDFS(vector&lt;int&gt; &amp;candidates, int target, int start, vector&lt;int&gt; out, vector&lt;vector&lt;int&gt;&gt; &amp;res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.push_back(out); </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = start; i &lt; candidates.size(); ++i) &#123;</span><br><span class="line">            out.push_back(candidates[i]);</span><br><span class="line">            combinationSumDFS(candidates, target - candidates[i], i, out, res);</span><br><span class="line">            out.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="迭代三维数组"><a href="#迭代三维数组" class="headerlink" title="迭代三维数组"></a>迭代三维数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt; &amp;candidates, int target) &#123;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp;</span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">            vector&lt;vector&lt;int&gt;&gt; cur;</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; candidates.size(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (candidates[j] &gt; i) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidates[j] == i) &#123;cur.push_back(&#123;candidates[j]&#125;); <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">for</span> (auto a : dp[i - candidates[j] - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (candidates[j] &gt; a[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                    a.insert(a.begin(), candidates[j]);</span><br><span class="line">                    cur.push_back(a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp.push_back(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>其实思路都是一样的，主要找准利用移位操作来实现除法操作。详细见思路部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="递归" scheme="http://www.allenmistake.top/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="DFS" scheme="http://www.allenmistake.top/tags/DFS/"/>
    
      <category term="数组" scheme="http://www.allenmistake.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>11月学习总结</title>
    <link href="http://www.allenmistake.top/2018/12/02/monthlysummary/"/>
    <id>http://www.allenmistake.top/2018/12/02/monthlysummary/</id>
    <published>2018-12-01T17:00:00.000Z</published>
    <updated>2020-01-03T09:07:30.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="所做工作"><a href="#所做工作" class="headerlink" title="所做工作"></a>所做工作</h2><p>这个月月初搭建了自己的个人博客，用的jekyll静态网页来布局Github Page，也感受到了前端魔法般的魅力。好多人都说前端未来会被AI所代替，但好的UI和交互设计AI是学不来的，只有人才会了解人。在这之后就开始慢慢的总结一些Leetcode刷题日记，这些代码大多数并不是本人写的，都是在网上借鉴的，但能把别人的东西消化吸收，总结出自己的一份感悟，也是一种收获吧。总结心得还是原创的，目的还是为了吸收知识。</p><p>11月份总共写了11篇博客，其中两篇是关于jekyll中的体会与心得，其他9篇是Leetcode日记，分析并总结了共11道题，进度很慢，但是刚刚起步，总要有一个过程，时间还早。</p><p>其实进度拖沓的原因是因为月末生了场病，而且现在还没有恢复，导致没有精力顾暇Leetcode这边。</p><h2 id="内容分析"><a href="#内容分析" class="headerlink" title="内容分析"></a>内容分析</h2><ul><li><code>3.最长不重复子串</code> 是一个关于字符串的问题，其中的算法逻辑与哈希表的数据结构运用都很巧妙</li><li><code>4.求中位数</code>是这个月唯一的一道hard题，考察了对递归的运用和二分法的掌握情况</li><li><code>6.z字形变换和12&amp;13.罗马数字转换</code>偏向于观察逻辑关系，考察对数组/字符串的理解和巧妙用法</li><li><code>15.三数之和</code>是两数之和的升级版，如何将位置问题转化成已知问题，这里调用自带函数sort显得尤为重要。</li><li><code>24.括号匹配</code>是一道很重要的题目，牵扯到了很多知识点，例如递归与回溯剪枝、DFS，要多多回味。</li><li><code>29.两数相除</code>是一道很特别的题，核心思想是位操作，如何利用位操作完成四则运算，需要把握其中的逻辑。</li></ul><p>最后，总结一下本个月重要的三道题</p><ul><li>三数之和、求中位数、括号匹配</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>12月份是期末备战的一个月，Lettcode的时间估计又要有所缩减，不过在什么阶段就要做什么事情，休息一下未尝是件坏事。</p><p>winter is coming…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/"/>
    
      <category term="月总结" scheme="http://www.allenmistake.top/categories/%E6%80%BB%E7%BB%93/%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode日记：29.两数相除</title>
    <link href="http://www.allenmistake.top/2018/12/01/leetcode29/"/>
    <id>http://www.allenmistake.top/2018/12/01/leetcode29/</id>
    <published>2018-11-30T17:00:00.000Z</published>
    <updated>2019-03-05T13:55:30.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个整数，被除数<code>dividend</code>和除数<code>divisor</code>。将两数相除，要求不使用乘法、除法和<code>mod</code>运算符。</p><p>返回被除数<code>dividend</code>除以除数<code>divisor</code>得到的商。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 10, divisor = 3</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 7, divisor = -3</span><br><span class="line">输出: -2</span><br></pre></td></tr></table></figure></p><p>说明:</p><ul><li>被除数和除数均为 32 位有符号整数。</li><li>除数不为 0。</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题让我们求两数相除，而且规定我们不能用乘法，除法和取余操作，那么我们还可以用另一神器——<strong>位操作</strong>（Bit Operation）。</p><p>思路是，如果被除数大于或等于除数，则进行如下循环，定义变量t等于除数，定义计数p，当t的两倍小于等于被除数时，进行如下循环，t扩大一倍，p扩大一倍，然后更新res和m。这道题的OJ给的一些test case非常的讨厌，因为输入的都是int型，比如被除数是-2147483648，在int范围内，当除数是-1时，结果就超出了int范围，需要返回INT_MAX，所以对于这种情况我们就在开始用if判定，将其和除数为0的情况放一起判定，返回INT_MAX。然后我们还要根据被除数和除数的正负来确定返回值的正负，这里我们采用长整型long来完成所有的计算，最后返回值乘以符号即可，代码如下：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int divide(int dividend, int divisor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (divisor == <span class="number">0</span> || (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>)) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        long long m = abs((long long)dividend), n = abs((long long)divisor), res = <span class="number">0</span>;</span><br><span class="line">        int sign = ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> sign == <span class="number">1</span> ? m : -m;</span><br><span class="line">        <span class="keyword">while</span> (m &gt;= n) &#123;</span><br><span class="line">            long long t = n, p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= (t &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += p;</span><br><span class="line">            m -= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign == <span class="number">1</span> ? res : -res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="简化后的代码"><a href="#简化后的代码" class="headerlink" title="简化后的代码"></a>简化后的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int divide(int dividend, int divisor) &#123;</span><br><span class="line">        long long m = abs((long long)dividend), n = abs((long long)divisor), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">        <span class="keyword">while</span> (m &gt;= n) &#123;</span><br><span class="line">            long long t = n, p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (m &gt; (t &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += p;</span><br><span class="line">            m -= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) res = -res;</span><br><span class="line">        <span class="keyword">return</span> res &gt; INT_MAX ? INT_MAX : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    int divide(int dividend, int divisor) &#123;</span><br><span class="line">        long long res = <span class="number">0</span>;</span><br><span class="line">        long long m = abs((long long)dividend), n = abs((long long)divisor);</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        long long t = n, p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &gt; (t &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += p + divide(m - t, n);</span><br><span class="line">        <span class="keyword">if</span> ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) res = -res;</span><br><span class="line">        <span class="keyword">return</span> res &gt; INT_MAX ? INT_MAX : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>其实思路都是一样的，主要找准利用移位操作来实现除法操作。详细见思路部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="位操作" scheme="http://www.allenmistake.top/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：24.括号的生成</title>
    <link href="http://www.allenmistake.top/2018/11/23/leetcode24/"/>
    <id>http://www.allenmistake.top/2018/11/23/leetcode24/</id>
    <published>2018-11-22T17:00:00.000Z</published>
    <updated>2019-03-05T13:56:00.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p><p>例如，给出 n = 3，生成结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="方法一：暴力法（递归）"><a href="#方法一：暴力法（递归）" class="headerlink" title="方法一：暴力法（递归）"></a>方法一：暴力法（递归）</h3><p>思路</p><p>我们可以生成所有 $2^{2n}$ 个 <code>&#39;(&#39;</code> 和<code>&#39;)&#39;</code> 字符构成的序列。然后，我们将检查每一个是否有效。</p><p>算法</p><p>为了生成所有序列，我们使用递归。长度为 n 的序列就是<code>&#39;(&#39;</code>加上所有长度为 n-1 的序列，以及<code>&#39;)&#39;</code>加上所有长度为 n-1 的序列。</p><p>为了检查序列是否为有效的，我们会跟踪平衡，也就是左括号的数量减去右括号的数量的净值。如果这个值始终小于零或者不以零结束，该序列就是无效的，否则它是有效的。</p><h3 id="方法一改进版：递归法"><a href="#方法一改进版：递归法" class="headerlink" title="方法一改进版：递归法"></a>方法一改进版：递归法</h3><p>这道题给定一个数字n，让生成共有n个括号的所有正确的形式，对于这种列出所有结果的题首先还是考虑用递归Recursion来解，由于字符串只有左括号和右括号两种字符，而且最终结果必定是左括号3个，右括号3个，所以我们定义两个变量left和right分别表示剩余左右括号的个数，如果在某次递归时，左括号的个数大于右括号的个数，说明此时生成的字符串中右括号的个数大于左括号的个数，即会出现’)(‘这样的非法串，所以这种情况直接返回，不继续处理。如果left和right都为0，则说明此时生成的字符串已有3个左括号和3个右括号，且字符串合法，则存入结果中后返回。如果以上两种情况都不满足，若此时left大于0，则调用递归函数，注意参数的更新，若right大于0，则调用递归函数，同样要更新参数。</p><p>这种递归的方法和第一种暴力法很像，核心思想都是先产生字符串，一旦不符合规则立刻舍弃，但是这样会增加时间复杂度，我们可以直接产生符合要求的字符串，然后添加到vector中，这就需要我们有一个比较严谨的逻辑条件。请看方法二</p><h3 id="方法二：回溯法（重点掌握）"><a href="#方法二：回溯法（重点掌握）" class="headerlink" title="方法二：回溯法（重点掌握）"></a>方法二：回溯法（重点掌握）</h3><p>思路和算法<br>类似于此题，要求解出所有的排列组合，我们优先考虑递归法或者回溯法<br>只有在我们知道序列仍然保持有效时才添加<code>&#39;(&#39;</code>or<code>&#39;)&#39;</code>，而不是像方法一那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，</p><p>如果我们还剩一个位置，我们可以开始放一个左括号。 如果它不超过左括号的数量，我们可以放一个右括号。</p><h3 id="方法三：闭合法"><a href="#方法三：闭合法" class="headerlink" title="方法三：闭合法"></a>方法三：闭合法</h3><p>思路</p><p>为了枚举某些内容，我们通常希望将其表示为更容易计算的不相交子集的总和。</p><p>考虑有效括号序列 S 的闭包数：至少存在<code>index&gt; = 0</code>，使得<code>S[0], S[1], ..., S[2*index+1]</code>是有效的。 显然，每个括号序列都有一个唯一的闭包号。 我们可以尝试单独列举它们。</p><p>算法</p><p>对于每个闭合数<code>c</code>，我们知道起始和结束括号必定位于索引<code>0</code>和<code>2*c + 1</code>。然后两者间的<code>2*c</code>个元素一定是有效序列，其余元素一定是有效序列。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="法一：暴力法（java）"><a href="#法一：暴力法（java）" class="headerlink" title="法一：暴力法（java）"></a>法一：暴力法（java）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    public List&lt;<span class="built_in">String</span>&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; combinations = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        generateAll(<span class="keyword">new</span> char[<span class="number">2</span> * n], <span class="number">0</span>, combinations);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> generateAll(char[] current, int pos, List&lt;<span class="built_in">String</span>&gt; result) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == current.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid(current))</span><br><span class="line">                result.add(<span class="keyword">new</span> <span class="built_in">String</span>(current));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current[pos] = <span class="string">'('</span>;</span><br><span class="line">            generateAll(current, pos+<span class="number">1</span>, result);</span><br><span class="line">            current[pos] = <span class="string">')'</span>;</span><br><span class="line">            generateAll(current, pos+<span class="number">1</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean valid(char[] current) &#123;</span><br><span class="line">        int balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (char c: current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) balance++;</span><br><span class="line">            <span class="keyword">else</span> balance--;</span><br><span class="line">            <span class="keyword">if</span> (balance &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (balance == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generateParenthesis(self, N):</span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">0</span>: <span class="keyword">return</span> [<span class="string">''</span>]</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> xrange(N):</span><br><span class="line">        <span class="keyword">for</span> left <span class="keyword">in</span> self.generateParenthesis(c):</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.generateParenthesis(N<span class="number">-1</span>-c):</span><br><span class="line">                ans.append(<span class="string">'(&#123;&#125;)&#123;&#125;'</span>.format(left, right))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="法一改进版：递归法"><a href="#法一改进版：递归法" class="headerlink" title="法一改进版：递归法"></a>法一改进版：递归法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        generateParenthesisDFS(n, n, <span class="string">""</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> generateParenthesisDFS(int left, int right, string out, vector&lt;string&gt; &amp;res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) res.push_back(out);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &gt; <span class="number">0</span>) generateParenthesisDFS(left - <span class="number">1</span>, right, out + <span class="string">'('</span>, res);</span><br><span class="line">            <span class="keyword">if</span> (right &gt; <span class="number">0</span>) generateParenthesisDFS(left, right - <span class="number">1</span>, out + <span class="string">')'</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="法二：回溯法（java）"><a href="#法二：回溯法（java）" class="headerlink" title="法二：回溯法（java）"></a>法二：回溯法（java）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    public List&lt;<span class="built_in">String</span>&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        backtrack(ans, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> backtrack(List&lt;<span class="built_in">String</span>&gt; ans, <span class="built_in">String</span> cur, int open, int close, int max)&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.length() == max * <span class="number">2</span>) &#123;</span><br><span class="line">            ans.add(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (open &lt; max)</span><br><span class="line">            backtrack(ans, cur+<span class="string">"("</span>, open+<span class="number">1</span>, close, max);</span><br><span class="line">        <span class="keyword">if</span> (close &lt; open)</span><br><span class="line">            backtrack(ans, cur+<span class="string">")"</span>, open, close+<span class="number">1</span>, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法三：闭合法"><a href="#法三：闭合法" class="headerlink" title="法三：闭合法"></a>法三：闭合法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    public List&lt;<span class="built_in">String</span>&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="string">""</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (int c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">String</span> left: generateParenthesis(c))</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">String</span> right: generateParenthesis(n<span class="number">-1</span>-c))</span><br><span class="line">                        ans.add(<span class="string">"("</span> + left + <span class="string">")"</span> + right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><h3 id="递归与回溯的区别"><a href="#递归与回溯的区别" class="headerlink" title="递归与回溯的区别"></a>递归与回溯的区别</h3><p>递归：为了描述问题的某一状态，必须用到该状态的上一状态，而描述上一状态，又必须用到上一状态的上一状态……这种用自已来定义自己的方法，称为递归定义。形式如 f(n) = n*f(n-1), if n=0,f(n)=1.</p><p>解答树角度：在dfs遍历一棵解答树      </p><p>优点：结构简洁</p><p>缺点：效率低，可能栈溢出<br>递归一般结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> f()  </span><br><span class="line">&#123;  </span><br><span class="line">     <span class="keyword">if</span>(符合边界条件)  </span><br><span class="line">    &#123;  </span><br><span class="line">       <span class="comment">///////  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">     <span class="comment">//某种形式的调用  </span></span><br><span class="line">     f();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回溯：从问题的某一种可能出发, 搜索从这种情况出发所能达到的所有可能, 当这一条路走到” 尽头 “的时候, 再倒回出发点, 从另一个可能出发, 继续搜索. 这种不断” 回溯 “寻找解的方法, 称作” 回溯法 “。递归的一种，或者说是通过递归这种代码结构来实现回溯这个目的。回溯法可以被认为是一个有过剪枝的DFS过程。</p><p>解答树角度：带回溯的dfs遍历一棵解答树</p><p>回溯的一般结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> dfs(int 当前状态)  </span><br><span class="line">    &#123;  </span><br><span class="line">          <span class="keyword">if</span>(当前状态为边界状态)  </span><br><span class="line">          &#123;  </span><br><span class="line">            记录或输出  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)       <span class="comment">//横向遍历解答树所有子节点  </span></span><br><span class="line">         &#123;  </span><br><span class="line">               <span class="comment">//扩展出一个子状态。  </span></span><br><span class="line">               修改了全局变量  </span><br><span class="line">               <span class="keyword">if</span>(子状态满足约束条件)  </span><br><span class="line">                &#123;  </span><br><span class="line">                  dfs(子状态)  </span><br><span class="line">               &#125;  </span><br><span class="line">                恢复全局变量<span class="comment">//回溯部分  </span></span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="DFS与BFS"><a href="#DFS与BFS" class="headerlink" title="DFS与BFS"></a>DFS与BFS</h3><p>BFS：Breadth-First-Search，宽度优先搜索；<br>BFS是从root开始扩展，每一层都是精密的搜索完整了才下一个</p><p>DFS：Depth-first search，深度优先搜索。<br>DFS主要的特性是深度优先，总是不停的往下找，走到没路才罢休。</p><h3 id="关于此题"><a href="#关于此题" class="headerlink" title="关于此题"></a>关于此题</h3><p>这道题就是灵活运用递归和回溯，可以看出来我们有两次判断，一个判断就是如果括号有n组，那么左括号一定不能大于n，而且，当左括号数量大于右括号时，我们开始有了分类，可以继续插入左括号（如果满足条件一的话），也可以插入右括号。核心的思想还是要想到递归。关于列出所有排列组合的情况，优先考虑递归回溯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="DFS" scheme="http://www.allenmistake.top/tags/DFS/"/>
    
      <category term="回溯" scheme="http://www.allenmistake.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll&amp;latex使用技巧</title>
    <link href="http://www.allenmistake.top/2018/11/18/jekyllskill/"/>
    <id>http://www.allenmistake.top/2018/11/18/jekyllskill/</id>
    <published>2018-11-17T17:00:00.000Z</published>
    <updated>2019-03-11T13:13:50.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jekyll常见问题与解决方法"><a href="#jekyll常见问题与解决方法" class="headerlink" title="jekyll常见问题与解决方法"></a>jekyll常见问题与解决方法</h1><h2 id="双花括号"><a href="#双花括号" class="headerlink" title="双花括号"></a>双花括号</h2><p>首先，在jekyll中双花括号是由其自身含义的，如果你不是因为jekyll而编写的双花括号， 需要加入下面语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">//要编写的代码，其中也许会包含&apos;&#123;&#123;&apos;，类似的双花括号</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>这两行代码的意思就是让中间的代码块不翻译成jekyll语言，所以jekyll独有的语法在这个区域中全部失效。</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![题目图片](&#123;&#123;site.url&#125;&#125;/assets/img/leetcode11.jpg)</span><br></pre></td></tr></table></figure><h1 id="latex的常用公式与语法"><a href="#latex的常用公式与语法" class="headerlink" title="latex的常用公式与语法"></a>latex的常用公式与语法</h1><p>使用latex的前提是加入下面标识</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$在此键入公式$</span><br></pre></td></tr></table></figure><h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a^<span class="number">2</span>*b_2$</span><br></pre></td></tr></table></figure><p>出来的效果就是这样的：$a^2*b_2$</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>这个帮助文档时不时更新，当遇到jekyll、latex相关问题时，将解决办法总结出来，以便之后查阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="写作" scheme="http://www.allenmistake.top/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="其他" scheme="http://www.allenmistake.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：12&amp;13.整型与罗马数字的相互转化</title>
    <link href="http://www.allenmistake.top/2018/11/17/leetcode12&amp;13/"/>
    <id>http://www.allenmistake.top/2018/11/17/leetcode12&amp;13/</id>
    <published>2018-11-16T17:00:00.000Z</published>
    <updated>2019-03-11T13:15:56.963Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="12-整型to罗马数字"><a href="#12-整型to罗马数字" class="headerlink" title="12.整型to罗马数字"></a>12.整型to罗马数字</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><p><strong>Symbol Value</strong><br><br>I 1<br><br>V 5<br><br>X 10<br><br>L 50<br><br>C 100<br><br>D 500<br><br>M 1000<br><br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.<br><br>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before V (5) and X (10) to make 4 and 9. </li><li><code>X</code> can be placed before L (50) and C (100) to make 40 and 90. </li><li><code>C</code> can be placed before D (500) and M (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: &quot;III&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;IV&quot;</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 9</span><br><span class="line">Output: &quot;IX&quot;</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: L = 50, V = 5, III = 3.</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们将每一个罗马字母与相对象的数字存放在两个数组中，因为限制了输入本身的整型数字大小，所以我们直接依次除以每一位代表的整数，注意4和9这两个数有特殊的逻辑编写方式。综合考虑，逻辑是</p><ul><li>从高位开始除以罗马数字<code>M-&gt;I</code>，（设当前罗马位为$\alpha$）得到结果<code>x</code></li><li>如果<code>x</code>小于4，说明可以用该位的罗马数字重复表示（$\alpha*n$）（例如，3000就是MMM）</li><li>如果<code>x</code>等于4，那就是$\alpha-1,\alpha$（例如IV）</li><li>如果<code>x</code>大于4小于九，那就是$\alpha，\alpha*n$（例如VIII）</li><li>如果<code>x</code>等于9，便是$\alpha-2，\alpha$（例如IX）</li><li>取余，继续迭代</li></ul><p>其实，这个动手稍微算一下，总结一下规律，还是比较好明白这里面的逻辑规律的，只是用眼看反而不容易看出来。</p><p>但是我们还有一种算法，简化代码，首先，不觉得把4和9单独拿出来判断过于繁琐了么，干脆就把所有的4和9的情况也写进数组，这样就完全依靠数组来来判断，而不需要再写那么多else if，看起来很麻烦。这里其实是一个很简单的贪婪算法，既然这里谈到了贪心算法，我们不如就来了解一下</p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法的基本思路是从问题的某一个初始解出发一步一步地进行，根据某个优化测度，每一步都要确保能获得局部最优解。每一步只考虑一个数据，他的选取应该满足局部优化的条件。若下一个数据和部分最优解连在一起不再是可行解时，就不把该数据添加到部分解中，直到把所有数据枚举完，或者不能再添加算法停止</p><p>其实可以发现，贪心算法的优点在于代码简洁，比较傻瓜，但是不一定是最优解。但是此题我们不需要考虑最优解这个问题，在这道题的应用，即我们只考虑当前最高位，检测当前最高位是否大于我们数组中预设的最高位，如果是，则减去最高位，并且字符串添加一次最高位，因为数组中设置了4和9，我们也不用担心4被忽略</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="一般解法"><a href="#一般解法" class="headerlink" title="一般解法"></a>一般解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span> roman[] = &#123;<span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'L'</span>, <span class="string">'X'</span>, <span class="string">'V'</span>, <span class="string">'I'</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> value[] = &#123;<span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">7</span>; n += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = num / value[n];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i) </span><br><span class="line">                    res += roman[n];</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">4</span>) </span><br><span class="line">                res = res + roman[n] + roman[n - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">4</span> &amp;&amp; x &lt; <span class="number">9</span>) &#123;</span><br><span class="line">                res += roman[n - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">6</span>; i &lt;= x; ++i) </span><br><span class="line">                    res += roman[n];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">9</span>) </span><br><span class="line">                res = res + roman[n] + roman[n - <span class="number">2</span>];</span><br><span class="line">            num %= value[n];            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">""</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; val&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;string&gt; str&#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                res += str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="13-罗马数字to整型"><a href="#13-罗马数字to整型" class="headerlink" title="13.罗马数字to整型"></a>13.罗马数字to整型</h1><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure></p><p>示例 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure></p><p>示例 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure></p><p><code>Follow up:</code><br><code>Coud you solve it without converting the integer to a string?</code></p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>提示：</p><ol><li>相同的数字连写，所表示的数等于这些数字相加得到的数，如：Ⅲ = 3；</li><li>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数， 如：Ⅷ = 8；Ⅻ = 12；</li><li>小的数字，（限于Ⅰ、X 和C）在大的数字的左边，所表示的数等于大数减小数得到的数，如：Ⅳ= 4；Ⅸ= 9；</li><li>正常使用时，连写的数字重复不得超过三次。（表盘上的四点钟“IIII”例外）</li><li>在一个数的上面画一条横线，表示这个数扩大1000倍。</li></ol><p>有几条须注意掌握：</p><ol><li>基本数字Ⅰ、X 、C 中的任何一个，自身连用构成数目，或者放在大数的右边连用构成数目，都不能超过三个；放在大数的左边只能用一个。</li><li>不能把基本数字V 、L 、D 中的任何一个作为小数放在大数的左边采用相减的方法构成数目；放在大数的右边采用相加的方式构成数目，只能使用一个。</li><li>V 和X 左边的小数字只能用Ⅰ。</li><li>L 和C 左边的小数字只能用X。</li><li>D 和M 左边的小数字只能用C。</li></ol><p>而这道题好就好在没有让我们来验证输入字符串是不是罗马数字，这样省掉不少功夫。我们需要用到map数据结构，来将罗马数字的字母转化为对应的整数值，因为输入的一定是罗马数字，那么我们只要考虑两种情况即可：<br><br>第一，如果当前数字是最后一个数字，或者之后的数字比它小的话，则加上当前数字<br><br>第二，其他情况则减去这个数字</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m&#123;&#123;<span class="string">'I'</span>, <span class="number">1</span>&#125;, &#123;<span class="string">'V'</span>, <span class="number">5</span>&#125;, &#123;<span class="string">'X'</span>, <span class="number">10</span>&#125;, &#123;<span class="string">'L'</span>, <span class="number">50</span>&#125;, &#123;<span class="string">'C'</span>, <span class="number">100</span>&#125;, &#123;<span class="string">'D'</span>, <span class="number">500</span>&#125;, &#123;<span class="string">'M'</span>, <span class="number">1000</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = m[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (i == s.size() - <span class="number">1</span> || m[s[i+<span class="number">1</span>]] &lt;= m[s[i]]) res += val;</span><br><span class="line">            <span class="keyword">else</span> res -= val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>这两道题虽然题目很一样，但是所采用的逻辑结构是完全不一样的。整型转化成罗马数字所采用的是数字拆分，我们可以选择像7&amp;9一样的除法提取每一位，但是由于罗马数字的特殊逻辑，需要再判断中添加循环，来重复打印；而像方法2选择减法拆分直接将循环充分利用，很是巧妙。</p><p>第二道题则利用了map的对应关系，当然这个也可以将4和9考虑进来，只不过对程序的化简起不到太大作用，（采用4和9仍要判断是否要判断下一位）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="字符串" scheme="http://www.allenmistake.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="贪心算法" scheme="http://www.allenmistake.top/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：7&amp;9.翻转整数&amp;判断回文数</title>
    <link href="http://www.allenmistake.top/2018/11/14/leecode7&amp;9/"/>
    <id>http://www.allenmistake.top/2018/11/14/leecode7&amp;9/</id>
    <published>2018-11-13T17:00:00.000Z</published>
    <updated>2019-05-15T14:47:03.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="7-翻转整数"><a href="#7-翻转整数" class="headerlink" title="7.翻转整数"></a>7.翻转整数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Reverse digits of an integer.</p><p>Example1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = 123, return 321</span><br></pre></td></tr></table></figure><p>Example2: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = -123, return -321</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是一道相当经典的算法题，题目本身不难，看你自己考虑的是否全面，需要考虑的有几个问题</p><ul><li>变换数字问题，是由int转化为int，溢出问题如何避免与检测？</li><li>需要对整数的每一位进行提取，如何编写代码？</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>面对上面的两个问题</p><ul><li>首先，溢出问题的解决我们可以用一个long long型的变量来存放翻转过程的数，最后检查如果输出的结果溢出<code>(res &gt; INT_MAX || res &lt; INT_MIN）</code>，这边是我们滴水不漏版的答案。但是我们思考因为输入的x也是一个整型数，所以x的范围也应该在 -2147483648～2147483647 之间，那么x的第一位只能是1或者2，翻转之后res的最后一位只能是1或2，所以res只能是 2147483641 或 2147483642 都在int的范围内。但是它们对应的x为 1463847412 和 2463847412，后者超出了数值范围。所以当过程中res等于 214748364 时， 输入的x只能为 1463847412， 翻转后的结果为 2147483641，都在正确的范围内，所以不用check。这便是官方给出的精简版。</li><li>无论是哪个版本，提取每一位的方法都是一样的，顺序是从低位往高位取，例如123456，我们先对他进行取余=6，提取出最后一位，再把123456整体除以10，将最后一位抹去，循环往复。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="滴水不漏版"><a href="#滴水不漏版" class="headerlink" title="滴水不漏版"></a>滴水不漏版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            res = <span class="number">10</span> * res + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (res &gt; INT_MAX || res &lt; INT_MIN) ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="官方精简版"><a href="#官方精简版" class="headerlink" title="官方精简版"></a>官方精简版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(res) &gt; INT_MAX / <span class="number">10</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="9-判断回文数"><a href="#9-判断回文数" class="headerlink" title="9.判断回文数"></a>9.判断回文数</h1><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p>`Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 121</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure></p><p><code>Follow up:</code><br><code>Coud you solve it without converting the integer to a string?</code></p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>首先只要是负数就一定不是回文数，可以首先排除；然后就是找第1位和对应的第n位，这里提供了一种思路就是首先用n次循环计算出位数，然后 $\text{div}=10^n$，设立这个数的目的是为了找到前向位，后向位我们通过上面的翻转整数（取余）很快得到。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPalindrome(int x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        int div = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x / div &gt;= <span class="number">10</span>) </span><br><span class="line">            div *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            int left = x / div;</span><br><span class="line">            int right = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (left != right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = (x % div) / <span class="number">10</span>;</span><br><span class="line">            div /= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>这两道题都是很经典的入门题，涉及到的只是不多</p><ol><li>int类型溢出判断</li><li>整数得到每一位数</li></ol><p>这两个是很基础的知识，以后可能会经常用到，今天两道题不涉及特殊的数据结构，所以可说的不多，继续努力吧。感觉easy题以后要是明白的话没必要在往博客上写了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="easy" scheme="http://www.allenmistake.top/categories/Leetcode/easy/"/>
    
    
      <category term="整数" scheme="http://www.allenmistake.top/tags/%E6%95%B4%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：6.Z字形变换</title>
    <link href="http://www.allenmistake.top/2018/11/13/leetcode6/"/>
    <id>http://www.allenmistake.top/2018/11/13/leetcode6/</id>
    <published>2018-11-12T17:00:00.000Z</published>
    <updated>2019-05-18T13:01:24.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，找出不含有重复字符的最长子串的长度。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出: &quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line">解释：</span><br><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 4输出: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释:</span><br><span class="line">P     I    N</span><br><span class="line">A   L S   I  G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题有两种解法，一种是利用数学表达式计算出行数与元素排布位置的联系，用数学表达式表达出，不过这并不是我们想要的最优解，或者说，他并不优雅，因为没有体现出算法的美感，只是单纯的找规律了。</p><p>所以我们想，能不能不靠找规律，准备一个数组与之对应：</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>我们可以使用 $\min(numRows,n)$ 个列表来表示 Z 字形图案中的非空行。<br>从左到右迭代，将每个字符添加到合适的行。可以使用当前行和当前方向这两个变量对合适的行进行跟踪。只有当我们向上移动到最上面的行或向下移动到最下面的行时，当前方向才会发生改变。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rows(min(numRows, <span class="keyword">int</span>(s.size())));</span><br><span class="line">        <span class="keyword">int</span> curRow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> goingDown = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">            rows[curRow] += c;</span><br><span class="line">            <span class="keyword">if</span> (curRow == <span class="number">0</span> || curRow == numRows - <span class="number">1</span>) </span><br><span class="line">                goingDown = !goingDown;</span><br><span class="line">            curRow += goingDown ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> row : rows)</span><br><span class="line">            ret += row;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码运行过程"><a href="#代码运行过程" class="headerlink" title="代码运行过程"></a>代码运行过程</h2><p>以<code>&quot;PAYPALISHIRING&quot;</code>numRows=3为例：</p><p>我们首先把行数，元素数两者最小那个当做划分区域（通常都是行数小），这样我们就分成了numRows=3组，很自然，我们把前三个元素依次放到，第1、2、3组中，注意，当我们触底（curRows=3）时，需要回溯（减小curRows），所以我们创建了变量<code>goingdown</code>，来控制是向上还是向下。</p><p>而且只需要遍历一次，下面以goingdown的改变来分组</p><h3 id="元素0-2"><a href="#元素0-2" class="headerlink" title="元素0-2"></a>元素0-2</h3><ul><li>第一组：P</li><li>第二组：A</li><li>第三组：Y</li></ul><h3 id="元素3-4"><a href="#元素3-4" class="headerlink" title="元素3-4"></a>元素3-4</h3><ul><li>第一组：P<strong>A</strong></li><li>第二组：A<strong>P</strong></li><li>第三组：Y</li></ul><h3 id="元素5-6"><a href="#元素5-6" class="headerlink" title="元素5-6"></a>元素5-6</h3><ul><li>第一组：PA</li><li>第二组：AP<strong>L</strong></li><li>第三组：Y<strong>I</strong></li></ul><p>依次类推，很容易明白其中规律</p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>其实数学规律很容易想到，但是代码可能可能不是很容易写出来，但是上面的这种算法，很直观，为什么不容易想到呢，我认为是思维受到了限制，我们很容易地就直接造出一个与原数组等长的数组，一个一个往上去添加，但是我们可以先靠行分类，然后改变数值放入的顺序。</p><p>本体值得注意的有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rows(min(numRows, <span class="keyword">int</span>(s.size())));</span><br><span class="line">···</span><br><span class="line">rows[curRow] += c;</span><br></pre></td></tr></table></figure><p>vector中的元素类型是String，这一点很巧妙，这样只需要一个加号，就能在结尾添加新字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goingDown = !goingDown;</span><br><span class="line">curRow += goingDown ? <span class="number">1</span> : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>能把代码写到如此简洁需要一个过程，当然，简单点的话可以写一个判断来改变goingdown的值</p><p>最重要的思想还是通过控制curRow的步进方向，来实现Z字形变换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="数组" scheme="http://www.allenmistake.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：4.两个有序数组的中位数</title>
    <link href="http://www.allenmistake.top/2018/11/10/leetcode4/"/>
    <id>http://www.allenmistake.top/2018/11/10/leetcode4/</id>
    <published>2018-11-09T17:00:00.000Z</published>
    <updated>2019-05-15T14:41:20.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume nums1 and nums2 cannot be both empty.<br>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br></pre></td></tr></table></figure><p>The median is 2.0<br>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br></pre></td></tr></table></figure><p>The median is (2 + 3)/2 = 2.5</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>要求很简单，给定两个不全为空的数组，求他们两个数组合在一起后的中位数，首先，我们要直到</p><ol><li>中位数是什么？ 回顾一下中位数的定义，如果某个有序数组长度是奇数，那么其中位数就是最中间那个，如果是偶数，那么就是最中间两个数字的平均值。</li><li>我们要明确，这道题是给定了时间复杂度了的，即O(log (m+n))，是一个log复杂度，所以肯定不是遍历。<br>其实看到log很容易想到二分法，但是如何在两个数组中利用二分法求中位数呢？<br>假设两个有序数组的长度分别为m和n，由于两个数组长度之和 m+n 的奇偶不确定，因此需要分情况来讨论，对于奇数的情况，直接找到最中间的数即可，偶数的话需要求最中间两个数的平均值。为了简化代码，不分情况讨论，我们使用一个小trick，<strong>我们分别找第 (m+n+1) / 2 个，和 (m+n+2) / 2 个，然后求其平均值</strong>即可，这对奇偶数均适用。加入 m+n 为奇数的话，那么其实 (m+n+1) / 2 和 (m+n+2) / 2 的值相等，相当于两个相同的数字相加再除以2，还是其本身。</li></ol><p>详细讲解可以仔细研读官方给出的解决方案，这里只说几个重点<br>好，这里我们需要定义一个函数来在两个有序数组中找到第K个元素，下面重点来看如何实现找到第K个元素。</p><ol><li>降低复杂度的特殊情况<br>首先，为了避免产生新的数组从而增加时间复杂度，<strong>我们使用两个变量i和j分别来标记数组nums1和nums2的起始位置</strong>。然后来处理一些corner cases（边缘情况），比如当某一个数组的起始位置大于等于其数组长度时，说明其所有数字均已经被淘汰了，相当于一个空数组了，那么实际上就变成了在另一个数组中找数字，直接就可以找出来了。还有就是如果K=1的话，那么我们只要比较nums1和nums2的起始位置i和j上的数字就可以了。</li><li>对谁进行二分？<br>难点就在于一般的情况怎么处理？因为我们需要在两个有序数组中找到第K个元素，为了加快搜索的速度，我们要使用二分法，那么对谁二分呢，数组么？其实要对K二分，意思是我们需要分别在nums1和nums2中查找第K/2个元素，注意这里由于两个数组的长度不定，所以有可能某个数组没有第K/2个数字，所以我们需要先check一下，数组中到底存不存在第K/2个数字，如果存在就取出来，否则就赋值上一个整型最大值。如果某个数组没有第K/2个数字，那么我们就淘汰另一个数字的前K/2个数字即可。有没有可能两个数组都不存在第K/2个数字呢，这道题里是不可能的，因为我们的K不是任意给的，而是给的m+n的中间值，所以必定至少会有一个数组是存在第K/2个数字的。</li><li>二分法<br>最后就是二分法的核心啦，比较这两个数组的第K/2小的数字midVal1和midVal2的大小，<strong>如果第一个数组的第K/2个数字小的话，那么说明我们要找的数字肯定不在nums1中的前K/2个数字，所以我们可以将其淘汰</strong>，将nums1的起始位置向后移动K/2个，并且此时的K也自减去K/2，调用递归。反之，我们淘汰nums2中的前K/2个数字，并将nums2的起始位置向后移动K/2个，并且此时的K也自减去K/2，调用递归即可，参见代码如下：</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.size(), n = nums2.size(), left = (m + n + <span class="number">1</span>) / <span class="number">2</span>, right = (m + n + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (findKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, left) + findKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, right)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nums1.size()) <span class="keyword">return</span> nums2[j + k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= nums2.size()) <span class="keyword">return</span> nums1[i + k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> min(nums1[i], nums2[j]);</span><br><span class="line">        <span class="keyword">int</span> midVal1 = (i + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums1.size()) ? nums1[i + k / <span class="number">2</span> - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> midVal2 = (j + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums2.size()) ? nums2[j + k / <span class="number">2</span> - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">        <span class="keyword">if</span> (midVal1 &lt; midVal2) &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, i + k / <span class="number">2</span>, nums2, j, k - k / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, i, nums2, j + k / <span class="number">2</span>, k - k / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码运行过程"><a href="#代码运行过程" class="headerlink" title="代码运行过程"></a>代码运行过程</h2><p>我们假设两个有序数组分别是<br>num1：[1，5，6，9]<br>num2：[3，7，8]<br>那么我们带入到上述代码中运行，观察运行情况</p><ol><li>首先，我们根据两个数组总长度确定left=4和right=4。</li><li>计算(num1，i=0，num2，j=0，k=4)<br>我们先不管前三个特殊判断，直接看接下来的赋值，</li><li>第一次迭代<br>midVal1=5，midVal2=7（位置i+k/2-1）<br>然后比较大小midVal1与midVal2的大小，小的元素所在的数组(i=i+k/2)继续带入（num1，i=2，num2，j=0，k=k-k/2=2）</li><li>第二次迭代<br>midVal1=6，midVal2=3（大的元素随着k的减小而往前收缩），（num1，i=2，num2，j=1，k=k-k/2=1）</li><li>第三次迭代，此时k等于1，执行特殊判断(3)，num1[i=2]=6，num2[j=1]=7，取最小值6，找到。</li></ol><p>我们再来看一个例子：<br>num1：[6]<br>num2：[1，5，7，8，10]</p><ol><li>初始化：left=3，right=4</li></ol><p>首先计算left分支（k=3）：</p><ol><li>i=0，j=0，k=3；均取头元素，num1[0]&gt;num2[0]，j=k/2，k=k-k/2</li><li>i=0，j=1，k=2，num1[0]&gt;num2[1]，j=k/2，k=k-k/2</li><li>k=1，return min(6,7)=6；</li></ol><p>下面计算right分支（k=4）:</p><ol><li>i=0，j=0，k=4；此时并无i+k/2-1，所以设置midVal1=无穷，这样midVal2一定是比较小的，j=k/2，k=k-k/2</li><li>i=0，j=2，k=2；此时midVal1收缩到num1[0]，与num2[2]比较</li><li>i=1，j=2，k=1，此时i=num1.size()，执行第一判断，return num2[2]=7</li></ol><p>所以最后结果是（6+7）/2</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看出，有些限制复杂度的题，更是给了我们足够的提示，log（m+n）代表不能遍历数组，而且需要二分，如何将二分和中位数的判断紧密的结合起来，是个难题。也是这道题在Leetcode处于Hard的原因，</p><ol><li>首先，我们要掌握二分法在两个数组中的处理方式</li><li>判断好边界情况</li></ol><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="http://www.cnblogs.com/grandyang/p/4465932.html" target="_blank" rel="noopener">[LeetCode] Median of Two Sorted Arrays 两个有序数组的中位数</a></li><li><a href="https://leetcode-cn.com/articles/median-of-two-sorted-arrays/" target="_blank" rel="noopener">Leetcode官方解法</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="hard" scheme="http://www.allenmistake.top/categories/Leetcode/hard/"/>
    
    
      <category term="递归" scheme="http://www.allenmistake.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode日记：3.最长不重复子串</title>
    <link href="http://www.allenmistake.top/2018/11/09/leetcode3/"/>
    <id>http://www.allenmistake.top/2018/11/09/leetcode3/</id>
    <published>2018-11-08T17:00:00.000Z</published>
    <updated>2019-05-15T14:41:26.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，找出不含有重复字符的最长子串的长度。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 无重复字符的最长子串是 &quot;abc&quot;，其长度为 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 无重复字符的最长子串是 &quot;b&quot;，其长度为 1。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 无重复字符的最长子串是 &quot;wke&quot;，其长度为 3。</span><br><span class="line">请注意，答案必须是一个子串，&quot;pwke&quot; 是一个子序列 而不是子串。</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道求让我们求最长的无重复字符的子串，注意这里是子串，不是子序列，所以必须是连续的。我们先不考虑代码怎么实现，如果给一个例子中的例子”abcabcbb”，让你手动找无重复字符的子串，该怎么找。<br>博主会一个字符一个字符的遍历，比如a，b，c，然后又出现了一个a，那么此时就应该去掉第一次出现的a，然后继续往后，又出现了一个b，则应该去掉一次出现的b，以此类推，最终发现最长的长度为3。所以说，我们需要记录之前出现过的字符，记录的方式有很多，最常见的是统计字符出现的个数，但是这道题字符出现的位置很重要，所以我们可以使用HashMap来建立字符和其出现位置之间的映射。进一步考虑，由于字符会重复出现，到底是保存所有出现的位置呢，还是只记录一个位置？我们之前手动推导的方法实际上是维护了一个滑动窗口，窗口内的都是没有重复的字符，我们需要尽可能的扩大窗口的大小。由于窗口在不停向右滑动，所以<strong>我们只关心每个字符最后出现的位置，并建立映射</strong>。窗口的右边界就是当前遍历到的字符的位置，为了求出窗口的大小，我们需要一个变量left来指向滑动窗口的左边界，这样，如果当前遍历到的字符从未出现过，那么直接扩大右边界，如果之前出现过，那么就分两种情况，在或不在滑动窗口内，如果不在滑动窗口内，那么就没事，当前字符可以加进来，如果在的话，就需要先在滑动窗口内去掉这个已经出现过的字符了，去掉的方法并不需要将左边界left一位一位向右遍历查找，由于我们的HashMap已经保存了该重复字符最后出现的位置，所以直接移动left指针就可以了。我们维护一个结果res，每次用出现过的窗口大小来更新结果res，就可以得到最终结果啦。<br>这里我们可以建立一个256位大小的整型数组来代替HashMap，这样做的原因是ASCII表共能表示256个字符，所以可以记录所有字符，然后我们需要定义两个变量<code>res</code>和<code>left</code>，其中<code>res</code>用来记录最长无重复子串的长度，<code>left</code>指向该无重复子串左边的起始位置，然后我们遍历整个字符串，对于每一个遍历到的字符，如果哈希表中该字符串对应的值为0，说明没有遇到过该字符，则此时计算最长无重复子串，<code>i - left +１</code>，其中<code>ｉ</code>是最长无重复子串最右边的位置，<code>left</code>是最左边的位置，还有一种情况也需要计算最长无重复子串，就是当哈希表中的值小于<code>left</code>，这是由于此时出现过重复的字符，<code>left</code>的位置更新了，如果又遇到了新的字符，就要重新计算最长无重复子串。最后每次都要在哈希表中将当前字符对应的值赋值为<code>i+1</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;, res = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[s[i]] == <span class="number">0</span> || m[s[i]] &lt; left) &#123;</span><br><span class="line">                res = max(res, i - left + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = m[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            m[s[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码运行过程"><a href="#代码运行过程" class="headerlink" title="代码运行过程"></a>代码运行过程</h2><p>以”abcabcab”`为例：（这里以a来代替a的Ascll码值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">判断：m[a]==0（a没出现过） res=1 更新m&#123;a&#125;=1（a出现在第1个位置）</span><br><span class="line">m[b]==0 res=2 更新m[b]=2（b出现在第2个位置）</span><br><span class="line">m[c]==0 res=3 更新m[c]=3 （c出现在第3个位置）</span><br><span class="line">判断：此时m[a]==1!=0，所以执行else left=m[a]（更新起始位置）再次更新m[a]=4</span><br><span class="line">判断：此时m[b]==2!=0，所以执行else left=m[b] m[b]=5</span><br><span class="line">直到最后，滑窗滑到&quot;cab&quot;</span><br></pre></td></tr></table></figure><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p><code>m[s[i]]</code>中的索引是以<code>s[i]</code>的字符ASCII，其值为该字符在s中最后出现的位置<br>相当于HashMap中的<br><code>key=字符，value=位置</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m[s[i]] == <span class="number">0</span> || m[s[i]] &lt; left)</span><br></pre></td></tr></table></figure><p>这个判断可以理解为如果 第i个字符从未出现过，或i在之前曾经出现过，<br>那么我们就将当前最长长度设置为从<code>left-1</code>到i的长度<code>i-left+1</code><br>重要的是我们要了解这个程序的逻辑结构———如何判别一个字符子串重复<br>其次，还要理解滑窗的概念，滑窗的确定需要两个值</p><ol><li>起始位置<code>left</code>，即到目前为止，不重复的第一个字符</li><li>长度<code>res</code>，也是最后要返回的值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Leetcode" scheme="http://www.allenmistake.top/categories/Leetcode/"/>
    
      <category term="medium" scheme="http://www.allenmistake.top/categories/Leetcode/medium/"/>
    
    
      <category term="哈希" scheme="http://www.allenmistake.top/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>我的第一个jekyll博客</title>
    <link href="http://www.allenmistake.top/2018/11/08/my-first-jekyll-blog/"/>
    <id>http://www.allenmistake.top/2018/11/08/my-first-jekyll-blog/</id>
    <published>2018-11-07T17:00:00.000Z</published>
    <updated>2019-06-23T13:15:06.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我的第一个jekyll博客"><a href="#我的第一个jekyll博客" class="headerlink" title="我的第一个jekyll博客"></a>我的第一个jekyll博客</h2><p>千辛万苦，终于搭建了自己的博客，个人感觉CSDN还是很不错的，但是有两个很明显的缺点</p><ol><li>广告太多，而且是百度推广的，自己搜索点什么全都能在上面看见，有时候搜个蟑螂药，图片上去是蟑螂；</li><li>界面太混乱，缺少定制性；</li></ol><p>所以我找了很多搭建个人博客的方法，其实有很多方法，有Hexo还有jekyll，最后还是选择了jekyll，jekyll还是有很多优点的</p><ol><li>theme多，界面赏心悦目；</li><li>完美支持Github托管，上手简单；</li><li>全面支持Markdown，而且可以学到一些前端的知识；</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一篇博客少不了测试环节，首先，我们测试一下代码块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个测试代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;, res = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[s[i]] == <span class="number">0</span> || m[s[i]] &lt; left) &#123;</span><br><span class="line">                res = max(res, i - left + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = m[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            m[s[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后<strong>加粗</strong>看一下效果</p><h2 id="日后计划"><a href="#日后计划" class="headerlink" title="日后计划"></a>日后计划</h2><h3 id="jekyll博客"><a href="#jekyll博客" class="headerlink" title="jekyll博客"></a>jekyll博客</h3><p>把jekyll博客功能逐渐补充完善，补充草稿功能，加入目录导航，添加个性化标签。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>把基本功能不值得差不多了，就要开始刷Leetcode题目了，个人感觉把一些重要的加上就行了，不用每个都要分析一下。</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Anroid的内容打算从寒假开始看，现在把Java基础打好，虽然本科学习了一段，但对于JVM的特性还不太清楚；<br>而且c++底层的东西也正在学习，首先要把基础打好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一个痛并快乐的过程，其实也没有多痛啦~只是需要督促自己学习，总之，努力努力再努力！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="写作" scheme="http://www.allenmistake.top/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="其他" scheme="http://www.allenmistake.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
